
FOURTOR_F446RE2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  080085d0  080085d0  000185d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008998  08008998  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008998  08008998  00018998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089a0  080089a0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  080089a0  080089a0  000189a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080089b0  080089b0  000189b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080089b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  200001dc  08008b90  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08008b90  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018ea2  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000363e  00000000  00000000  000390ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011a0  00000000  00000000  0003c6f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001020  00000000  00000000  0003d890  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002727e  00000000  00000000  0003e8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010a33  00000000  00000000  00065b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4543  00000000  00000000  00076561  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014aaa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000565c  00000000  00000000  0014ab20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080085b4 	.word	0x080085b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080085b4 	.word	0x080085b4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
bool CANSPI_Initialize(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8000efa:	2300      	movs	r3, #0
 8000efc:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 8000efe:	2300      	movs	r3, #0
 8000f00:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000f02:	2300      	movs	r3, #0
 8000f04:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000f06:	2300      	movs	r3, #0
 8000f08:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	70fb      	strb	r3, [r7, #3]
  
  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;      
 8000f0e:	2300      	movs	r3, #0
 8000f10:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000f12:	2300      	movs	r3, #0
 8000f14:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000f16:	2300      	movs	r3, #0
 8000f18:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000f22:	2308      	movs	r3, #8
 8000f24:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000f26:	2300      	movs	r3, #0
 8000f28:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000f32:	2300      	movs	r3, #0
 8000f34:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000f36:	2300      	movs	r3, #0
 8000f38:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000f42:	2300      	movs	r3, #0
 8000f44:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000f46:	2300      	movs	r3, #0
 8000f48:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000f52:	2300      	movs	r3, #0
 8000f54:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000f62:	2308      	movs	r3, #8
 8000f64:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000f66:	2300      	movs	r3, #0
 8000f68:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	72fb      	strb	r3, [r7, #11]
  
  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 8000f6e:	f000 faa1 	bl	80014b4 <MCP2515_Initialize>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f083 0301 	eor.w	r3, r3, #1
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <CANSPI_Initialize+0x9a>
    return false;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e05e      	b.n	8001040 <CANSPI_Initialize+0x158>
    
  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 8000f82:	f000 fab9 	bl	80014f8 <MCP2515_SetConfigMode>
 8000f86:	4603      	mov	r3, r0
 8000f88:	f083 0301 	eor.w	r3, r3, #1
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <CANSPI_Initialize+0xae>
    return false;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e054      	b.n	8001040 <CANSPI_Initialize+0x158>
  
  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	461a      	mov	r2, r3
 8000f9a:	2123      	movs	r1, #35	; 0x23
 8000f9c:	2020      	movs	r0, #32
 8000f9e:	f000 fb55 	bl	800164c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2127      	movs	r1, #39	; 0x27
 8000fa8:	2024      	movs	r0, #36	; 0x24
 8000faa:	f000 fb4f 	bl	800164c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	2103      	movs	r1, #3
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 fb48 	bl	800164c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000fbc:	f107 0318 	add.w	r3, r7, #24
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	2107      	movs	r1, #7
 8000fc4:	2004      	movs	r0, #4
 8000fc6:	f000 fb41 	bl	800164c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	461a      	mov	r2, r3
 8000fd0:	210b      	movs	r1, #11
 8000fd2:	2008      	movs	r0, #8
 8000fd4:	f000 fb3a 	bl	800164c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	461a      	mov	r2, r3
 8000fde:	2113      	movs	r1, #19
 8000fe0:	2010      	movs	r0, #16
 8000fe2:	f000 fb33 	bl	800164c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	461a      	mov	r2, r3
 8000fec:	2117      	movs	r1, #23
 8000fee:	2014      	movs	r0, #20
 8000ff0:	f000 fb2c 	bl	800164c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	211b      	movs	r1, #27
 8000ffc:	2018      	movs	r0, #24
 8000ffe:	f000 fb25 	bl	800164c <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8001002:	2104      	movs	r1, #4
 8001004:	2060      	movs	r0, #96	; 0x60
 8001006:	f000 fafb 	bl	8001600 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 800100a:	2101      	movs	r1, #1
 800100c:	2070      	movs	r0, #112	; 0x70
 800100e:	f000 faf7 	bl	8001600 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8001012:	2100      	movs	r1, #0
 8001014:	202a      	movs	r0, #42	; 0x2a
 8001016:	f000 faf3 	bl	8001600 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 800101a:	21e5      	movs	r1, #229	; 0xe5
 800101c:	2029      	movs	r0, #41	; 0x29
 800101e:	f000 faef 	bl	8001600 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8001022:	2183      	movs	r1, #131	; 0x83
 8001024:	2028      	movs	r0, #40	; 0x28
 8001026:	f000 faeb 	bl	8001600 <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 800102a:	f000 fa83 	bl	8001534 <MCP2515_SetNormalMode>
 800102e:	4603      	mov	r3, r0
 8001030:	f083 0301 	eor.w	r3, r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <CANSPI_Initialize+0x156>
    return false;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <CANSPI_Initialize+0x158>
  
  return true;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <CANSPI_Receive>:
  return (returnValue);
}

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8001054:	f000 fb26 	bl	80016a4 <MCP2515_GetRxStatus>
 8001058:	4603      	mov	r3, r0
 800105a:	733b      	strb	r3, [r7, #12]
  
  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 800105c:	7b3b      	ldrb	r3, [r7, #12]
 800105e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001062:	b2db      	uxtb	r3, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d066      	beq.n	8001136 <CANSPI_Receive+0xee>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8001068:	7b3b      	ldrb	r3, [r7, #12]
 800106a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b40      	cmp	r3, #64	; 0x40
 8001072:	bf0c      	ite	eq
 8001074:	2301      	moveq	r3, #1
 8001076:	2300      	movne	r3, #0
 8001078:	b2da      	uxtb	r2, r3
 800107a:	7b3b      	ldrb	r3, [r7, #12]
 800107c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2bc0      	cmp	r3, #192	; 0xc0
 8001084:	bf0c      	ite	eq
 8001086:	2301      	moveq	r3, #1
 8001088:	2300      	movne	r3, #0
 800108a:	b2db      	uxtb	r3, r3
 800108c:	4313      	orrs	r3, r2
 800108e:	b2db      	uxtb	r3, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	d007      	beq.n	80010a4 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	220d      	movs	r2, #13
 800109a:	4619      	mov	r1, r3
 800109c:	2090      	movs	r0, #144	; 0x90
 800109e:	f000 fa8b 	bl	80015b8 <MCP2515_ReadRxSequence>
 80010a2:	e00c      	b.n	80010be <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80010a4:	7b3b      	ldrb	r3, [r7, #12]
 80010a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b80      	cmp	r3, #128	; 0x80
 80010ae:	d106      	bne.n	80010be <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80010b0:	f107 0310 	add.w	r3, r7, #16
 80010b4:	220d      	movs	r2, #13
 80010b6:	4619      	mov	r1, r3
 80010b8:	2094      	movs	r0, #148	; 0x94
 80010ba:	f000 fa7d 	bl	80015b8 <MCP2515_ReadRxSequence>
    }
    
    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80010be:	7b3b      	ldrb	r3, [r7, #12]
 80010c0:	f003 0318 	and.w	r3, r3, #24
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b10      	cmp	r3, #16
 80010c8:	d10c      	bne.n	80010e4 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2202      	movs	r2, #2
 80010ce:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80010d0:	7cb8      	ldrb	r0, [r7, #18]
 80010d2:	7cf9      	ldrb	r1, [r7, #19]
 80010d4:	7c3a      	ldrb	r2, [r7, #16]
 80010d6:	7c7b      	ldrb	r3, [r7, #17]
 80010d8:	f000 f832 	bl	8001140 <convertReg2ExtendedCANid>
 80010dc:	4602      	mov	r2, r0
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	e00b      	b.n	80010fc <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80010ea:	7c3b      	ldrb	r3, [r7, #16]
 80010ec:	7c7a      	ldrb	r2, [r7, #17]
 80010ee:	4611      	mov	r1, r2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 f863 	bl	80011bc <convertReg2StandardCANid>
 80010f6:	4602      	mov	r2, r0
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 80010fc:	7d3a      	ldrb	r2, [r7, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8001102:	7d7a      	ldrb	r2, [r7, #21]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8001108:	7dba      	ldrb	r2, [r7, #22]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800110e:	7dfa      	ldrb	r2, [r7, #23]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8001114:	7e3a      	ldrb	r2, [r7, #24]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800111a:	7e7a      	ldrb	r2, [r7, #25]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8001120:	7eba      	ldrb	r2, [r7, #26]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8001126:	7efa      	ldrb	r2, [r7, #27]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 800112c:	7f3a      	ldrb	r2, [r7, #28]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 8001132:	2301      	movs	r3, #1
 8001134:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 8001136:	7ffb      	ldrb	r3, [r7, #31]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3720      	adds	r7, #32
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8001140:	b490      	push	{r4, r7}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	4604      	mov	r4, r0
 8001148:	4608      	mov	r0, r1
 800114a:	4611      	mov	r1, r2
 800114c:	461a      	mov	r2, r3
 800114e:	4623      	mov	r3, r4
 8001150:	71fb      	strb	r3, [r7, #7]
 8001152:	4603      	mov	r3, r0
 8001154:	71bb      	strb	r3, [r7, #6]
 8001156:	460b      	mov	r3, r1
 8001158:	717b      	strb	r3, [r7, #5]
 800115a:	4613      	mov	r3, r2
 800115c:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8001166:	793b      	ldrb	r3, [r7, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 800116e:	793b      	ldrb	r3, [r7, #4]
 8001170:	095b      	lsrs	r3, r3, #5
 8001172:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8001174:	797b      	ldrb	r3, [r7, #5]
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 800117a:	7bbb      	ldrb	r3, [r7, #14]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4413      	add	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4413      	add	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4413      	add	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 80011a4:	79bb      	ldrb	r3, [r7, #6]
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4413      	add	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	617b      	str	r3, [r7, #20]
  return (returnValue);
 80011b0:	697b      	ldr	r3, [r7, #20]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc90      	pop	{r4, r7}
 80011ba:	4770      	bx	lr

080011bc <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	460a      	mov	r2, r1
 80011c6:	71fb      	strb	r3, [r7, #7]
 80011c8:	4613      	mov	r3, r2
 80011ca:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80011d6:	79bb      	ldrb	r3, [r7, #6]
 80011d8:	095b      	lsrs	r3, r3, #5
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	4413      	add	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 80011e8:	68fb      	ldr	r3, [r7, #12]
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <_ZN7CANopen9read16bitEthPtt>:
  }
}

uint8_t CANopen::read16bit(\
    uint16_t index, uint8_t subIndex,\
    uint16_t* data, uint16_t id/*=DEFAULT_NODE_ID*/) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	817b      	strh	r3, [r7, #10]
 8001206:	4613      	mov	r3, r2
 8001208:	727b      	strb	r3, [r7, #9]
  composeMsg(SDO_REQUEST_READ,index,subIndex);
 800120a:	7a7b      	ldrb	r3, [r7, #9]
 800120c:	897a      	ldrh	r2, [r7, #10]
 800120e:	2140      	movs	r1, #64	; 0x40
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f000 f843 	bl	800129c <_ZN7CANopen10composeMsgEhth>
  sendCanBuffer(id+SDO_COMMAND_ID_BASE,4);
 8001216:	8c3b      	ldrh	r3, [r7, #32]
 8001218:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800121c:	b29b      	uxth	r3, r3
 800121e:	2204      	movs	r2, #4
 8001220:	4619      	mov	r1, r3
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f000 f820 	bl	8001268 <_ZN7CANopen13sendCanBufferEth>
  if (receiveCanMsg()==SDO_RESPONSE_READ_16BIT) {
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f000 f85d 	bl	80012e8 <_ZN7CANopen13receiveCanMsgEv>
 800122e:	4603      	mov	r3, r0
 8001230:	2b4b      	cmp	r3, #75	; 0x4b
 8001232:	bf0c      	ite	eq
 8001234:	2301      	moveq	r3, #1
 8001236:	2300      	movne	r3, #0
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00c      	beq.n	8001258 <_ZN7CANopen9read16bitEthPtt+0x60>
    uint8_t* ptr = (uint8_t*)data;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	617b      	str	r3, [r7, #20]
    ptr[0] = can_receive_buffer[4];
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <_ZN7CANopen9read16bitEthPtt+0x6c>)
 8001244:	791a      	ldrb	r2, [r3, #4]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	701a      	strb	r2, [r3, #0]
    ptr[1] = can_receive_buffer[5];
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	3301      	adds	r3, #1
 800124e:	4a05      	ldr	r2, [pc, #20]	; (8001264 <_ZN7CANopen9read16bitEthPtt+0x6c>)
 8001250:	7952      	ldrb	r2, [r2, #5]
 8001252:	701a      	strb	r2, [r3, #0]
    return SUCCESS;
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <_ZN7CANopen9read16bitEthPtt+0x62>
  } else {
    return FAILURE; // requested data not received
 8001258:	2300      	movs	r3, #0
  }
}
 800125a:	4618      	mov	r0, r3
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000214 	.word	0x20000214

08001268 <_ZN7CANopen13sendCanBufferEth>:
  }
}


uint8_t CANopen::sendCanBuffer(\
    uint16_t id, uint8_t length) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af02      	add	r7, sp, #8
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	460b      	mov	r3, r1
 8001272:	807b      	strh	r3, [r7, #2]
 8001274:	4613      	mov	r3, r2
 8001276:	707b      	strb	r3, [r7, #1]
  return can_bus.sendMsgBuf(id,EXT,length,can_msg_buffer);
 8001278:	8879      	ldrh	r1, [r7, #2]
 800127a:	787a      	ldrb	r2, [r7, #1]
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <_ZN7CANopen13sendCanBufferEth+0x2c>)
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	4613      	mov	r3, r2
 8001282:	2200      	movs	r2, #0
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <_ZN7CANopen13sendCanBufferEth+0x30>)
 8001286:	f001 f841 	bl	800230c <_ZN7MCP_CAN10sendMsgBufEmhhPh>
 800128a:	4603      	mov	r3, r0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	2000020c 	.word	0x2000020c
 8001298:	200001f8 	.word	0x200001f8

0800129c <_ZN7CANopen10composeMsgEhth>:


uint8_t CANopen::composeMsg(\
    uint8_t type_byte, uint16_t index, uint8_t subIndex) {
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	4608      	mov	r0, r1
 80012a6:	4611      	mov	r1, r2
 80012a8:	461a      	mov	r2, r3
 80012aa:	4603      	mov	r3, r0
 80012ac:	70fb      	strb	r3, [r7, #3]
 80012ae:	460b      	mov	r3, r1
 80012b0:	803b      	strh	r3, [r7, #0]
 80012b2:	4613      	mov	r3, r2
 80012b4:	70bb      	strb	r3, [r7, #2]
  can_msg_buffer[0] = type_byte;
 80012b6:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <_ZN7CANopen10composeMsgEhth+0x48>)
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	7013      	strb	r3, [r2, #0]
  uint8_t *ptr = (uint8_t*)&index;
 80012bc:	463b      	mov	r3, r7
 80012be:	60fb      	str	r3, [r7, #12]
  can_msg_buffer[1] = ptr[0];
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	781a      	ldrb	r2, [r3, #0]
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <_ZN7CANopen10composeMsgEhth+0x48>)
 80012c6:	705a      	strb	r2, [r3, #1]
  can_msg_buffer[2] = ptr[1];
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	785a      	ldrb	r2, [r3, #1]
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <_ZN7CANopen10composeMsgEhth+0x48>)
 80012ce:	709a      	strb	r2, [r3, #2]
  can_msg_buffer[3] = subIndex;
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <_ZN7CANopen10composeMsgEhth+0x48>)
 80012d2:	78bb      	ldrb	r3, [r7, #2]
 80012d4:	70d3      	strb	r3, [r2, #3]
  return SUCCESS;
 80012d6:	2301      	movs	r3, #1
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	2000020c 	.word	0x2000020c

080012e8 <_ZN7CANopen13receiveCanMsgEv>:


uint8_t CANopen::receiveCanMsg() {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  // wait for message
  uint32_t startTime = millis();
 80012f0:	f001 fb62 	bl	80029b8 <HAL_GetTick>
 80012f4:	60f8      	str	r0, [r7, #12]
  while(can_bus.checkReceive()!=CANBUS_NEW_MSG){
 80012f6:	4854      	ldr	r0, [pc, #336]	; (8001448 <_ZN7CANopen13receiveCanMsgEv+0x160>)
 80012f8:	f001 f887 	bl	800240a <_ZN7MCP_CAN12checkReceiveEv>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b03      	cmp	r3, #3
 8001300:	bf14      	ite	ne
 8001302:	2301      	movne	r3, #1
 8001304:	2300      	moveq	r3, #0
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00d      	beq.n	8001328 <_ZN7CANopen13receiveCanMsgEv+0x40>
    if ((millis()-startTime)>CAN_RECEIVE_TIMEOUT_MS) {
 800130c:	f001 fb54 	bl	80029b8 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	bf8c      	ite	hi
 800131a:	2301      	movhi	r3, #1
 800131c:	2300      	movls	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0e8      	beq.n	80012f6 <_ZN7CANopen13receiveCanMsgEv+0xe>
      return FAILURE; // timed out
 8001324:	2300      	movs	r3, #0
 8001326:	e08b      	b.n	8001440 <_ZN7CANopen13receiveCanMsgEv+0x158>
    }
  }
  uint8_t length;
  canId = can_bus.getCanId();
 8001328:	4847      	ldr	r0, [pc, #284]	; (8001448 <_ZN7CANopen13receiveCanMsgEv+0x160>)
 800132a:	f001 f883 	bl	8002434 <_ZN7MCP_CAN8getCanIdEv>
 800132e:	4603      	mov	r3, r0
 8001330:	b29a      	uxth	r2, r3
 8001332:	4b46      	ldr	r3, [pc, #280]	; (800144c <_ZN7CANopen13receiveCanMsgEv+0x164>)
 8001334:	801a      	strh	r2, [r3, #0]
  while (can_bus.checkReceive()==CANBUS_NEW_MSG) {
 8001336:	4844      	ldr	r0, [pc, #272]	; (8001448 <_ZN7CANopen13receiveCanMsgEv+0x160>)
 8001338:	f001 f867 	bl	800240a <_ZN7MCP_CAN12checkReceiveEv>
 800133c:	4603      	mov	r3, r0
 800133e:	2b03      	cmp	r3, #3
 8001340:	bf0c      	ite	eq
 8001342:	2301      	moveq	r3, #1
 8001344:	2300      	movne	r3, #0
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d079      	beq.n	8001440 <_ZN7CANopen13receiveCanMsgEv+0x158>
    can_bus.readMsgBuf(&length,can_receive_buffer);
 800134c:	f107 030b 	add.w	r3, r7, #11
 8001350:	4a3f      	ldr	r2, [pc, #252]	; (8001450 <_ZN7CANopen13receiveCanMsgEv+0x168>)
 8001352:	4619      	mov	r1, r3
 8001354:	483c      	ldr	r0, [pc, #240]	; (8001448 <_ZN7CANopen13receiveCanMsgEv+0x160>)
 8001356:	f001 f829 	bl	80023ac <_ZN7MCP_CAN10readMsgBufEPhS0_>
#ifdef DEBUG // read out all received messages
    printf("Id: ");printf("%x\n",canId);
 800135a:	483e      	ldr	r0, [pc, #248]	; (8001454 <_ZN7CANopen13receiveCanMsgEv+0x16c>)
 800135c:	f005 f9bc 	bl	80066d8 <iprintf>
 8001360:	4b3a      	ldr	r3, [pc, #232]	; (800144c <_ZN7CANopen13receiveCanMsgEv+0x164>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	483c      	ldr	r0, [pc, #240]	; (8001458 <_ZN7CANopen13receiveCanMsgEv+0x170>)
 8001368:	f005 f9b6 	bl	80066d8 <iprintf>
    printf("data: "); for(int i = 0; i<length; i++) {
 800136c:	483b      	ldr	r0, [pc, #236]	; (800145c <_ZN7CANopen13receiveCanMsgEv+0x174>)
 800136e:	f005 f9b3 	bl	80066d8 <iprintf>
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	7afb      	ldrb	r3, [r7, #11]
 8001378:	461a      	mov	r2, r3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	4293      	cmp	r3, r2
 800137e:	da0e      	bge.n	800139e <_ZN7CANopen13receiveCanMsgEv+0xb6>
    printf("%x",can_receive_buffer[i]); printf(" "); }
 8001380:	4a33      	ldr	r2, [pc, #204]	; (8001450 <_ZN7CANopen13receiveCanMsgEv+0x168>)
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	4413      	add	r3, r2
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	4835      	ldr	r0, [pc, #212]	; (8001460 <_ZN7CANopen13receiveCanMsgEv+0x178>)
 800138c:	f005 f9a4 	bl	80066d8 <iprintf>
 8001390:	2020      	movs	r0, #32
 8001392:	f005 f9b9 	bl	8006708 <putchar>
    printf("data: "); for(int i = 0; i<length; i++) {
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	3301      	adds	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	e7eb      	b.n	8001376 <_ZN7CANopen13receiveCanMsgEv+0x8e>
#endif

    // check the type bit, which kind of response it is
    switch (can_receive_buffer[0]) {
 800139e:	4b2c      	ldr	r3, [pc, #176]	; (8001450 <_ZN7CANopen13receiveCanMsgEv+0x168>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b4f      	cmp	r3, #79	; 0x4f
 80013a4:	d010      	beq.n	80013c8 <_ZN7CANopen13receiveCanMsgEv+0xe0>
 80013a6:	2b4f      	cmp	r3, #79	; 0x4f
 80013a8:	dc06      	bgt.n	80013b8 <_ZN7CANopen13receiveCanMsgEv+0xd0>
 80013aa:	2b43      	cmp	r3, #67	; 0x43
 80013ac:	d010      	beq.n	80013d0 <_ZN7CANopen13receiveCanMsgEv+0xe8>
 80013ae:	2b4b      	cmp	r3, #75	; 0x4b
 80013b0:	d00c      	beq.n	80013cc <_ZN7CANopen13receiveCanMsgEv+0xe4>
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d027      	beq.n	8001406 <_ZN7CANopen13receiveCanMsgEv+0x11e>
        for (uint8_t i=0; i<length; i++) {
          printf("%x",can_receive_buffer[i]);
        }
        break; // maybe another msg is waiting
      default:
        break;
 80013b6:	e03d      	b.n	8001434 <_ZN7CANopen13receiveCanMsgEv+0x14c>
    switch (can_receive_buffer[0]) {
 80013b8:	2b60      	cmp	r3, #96	; 0x60
 80013ba:	d00b      	beq.n	80013d4 <_ZN7CANopen13receiveCanMsgEv+0xec>
 80013bc:	2b60      	cmp	r3, #96	; 0x60
 80013be:	db39      	blt.n	8001434 <_ZN7CANopen13receiveCanMsgEv+0x14c>
 80013c0:	3b80      	subs	r3, #128	; 0x80
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d836      	bhi.n	8001434 <_ZN7CANopen13receiveCanMsgEv+0x14c>
 80013c6:	e007      	b.n	80013d8 <_ZN7CANopen13receiveCanMsgEv+0xf0>
        return SDO_RESPONSE_READ_8BIT;
 80013c8:	234f      	movs	r3, #79	; 0x4f
 80013ca:	e039      	b.n	8001440 <_ZN7CANopen13receiveCanMsgEv+0x158>
        return SDO_RESPONSE_READ_16BIT;
 80013cc:	234b      	movs	r3, #75	; 0x4b
 80013ce:	e037      	b.n	8001440 <_ZN7CANopen13receiveCanMsgEv+0x158>
        return SDO_RESPONSE_READ_32BIT;
 80013d0:	2343      	movs	r3, #67	; 0x43
 80013d2:	e035      	b.n	8001440 <_ZN7CANopen13receiveCanMsgEv+0x158>
        return SDO_RESPONSE_WRITE;
 80013d4:	2360      	movs	r3, #96	; 0x60
 80013d6:	e033      	b.n	8001440 <_ZN7CANopen13receiveCanMsgEv+0x158>
        printf("\nERROR\n");
 80013d8:	4822      	ldr	r0, [pc, #136]	; (8001464 <_ZN7CANopen13receiveCanMsgEv+0x17c>)
 80013da:	f005 fa05 	bl	80067e8 <puts>
        printf("Error Message is: ");
 80013de:	4822      	ldr	r0, [pc, #136]	; (8001468 <_ZN7CANopen13receiveCanMsgEv+0x180>)
 80013e0:	f005 f97a 	bl	80066d8 <iprintf>
        for (uint8_t i=0; i<length; i++) {
 80013e4:	2300      	movs	r3, #0
 80013e6:	74fb      	strb	r3, [r7, #19]
 80013e8:	7afb      	ldrb	r3, [r7, #11]
 80013ea:	7cfa      	ldrb	r2, [r7, #19]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d223      	bcs.n	8001438 <_ZN7CANopen13receiveCanMsgEv+0x150>
          printf("%x",can_receive_buffer[i]);
 80013f0:	7cfb      	ldrb	r3, [r7, #19]
 80013f2:	4a17      	ldr	r2, [pc, #92]	; (8001450 <_ZN7CANopen13receiveCanMsgEv+0x168>)
 80013f4:	5cd3      	ldrb	r3, [r2, r3]
 80013f6:	4619      	mov	r1, r3
 80013f8:	4819      	ldr	r0, [pc, #100]	; (8001460 <_ZN7CANopen13receiveCanMsgEv+0x178>)
 80013fa:	f005 f96d 	bl	80066d8 <iprintf>
        for (uint8_t i=0; i<length; i++) {
 80013fe:	7cfb      	ldrb	r3, [r7, #19]
 8001400:	3301      	adds	r3, #1
 8001402:	74fb      	strb	r3, [r7, #19]
 8001404:	e7f0      	b.n	80013e8 <_ZN7CANopen13receiveCanMsgEv+0x100>
        printf("\nPDO Msg received\n");
 8001406:	4819      	ldr	r0, [pc, #100]	; (800146c <_ZN7CANopen13receiveCanMsgEv+0x184>)
 8001408:	f005 f9ee 	bl	80067e8 <puts>
        printf("Message is: ");
 800140c:	4818      	ldr	r0, [pc, #96]	; (8001470 <_ZN7CANopen13receiveCanMsgEv+0x188>)
 800140e:	f005 f963 	bl	80066d8 <iprintf>
        for (uint8_t i=0; i<length; i++) {
 8001412:	2300      	movs	r3, #0
 8001414:	74bb      	strb	r3, [r7, #18]
 8001416:	7afb      	ldrb	r3, [r7, #11]
 8001418:	7cba      	ldrb	r2, [r7, #18]
 800141a:	429a      	cmp	r2, r3
 800141c:	d20e      	bcs.n	800143c <_ZN7CANopen13receiveCanMsgEv+0x154>
          printf("%x",can_receive_buffer[i]);
 800141e:	7cbb      	ldrb	r3, [r7, #18]
 8001420:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <_ZN7CANopen13receiveCanMsgEv+0x168>)
 8001422:	5cd3      	ldrb	r3, [r2, r3]
 8001424:	4619      	mov	r1, r3
 8001426:	480e      	ldr	r0, [pc, #56]	; (8001460 <_ZN7CANopen13receiveCanMsgEv+0x178>)
 8001428:	f005 f956 	bl	80066d8 <iprintf>
        for (uint8_t i=0; i<length; i++) {
 800142c:	7cbb      	ldrb	r3, [r7, #18]
 800142e:	3301      	adds	r3, #1
 8001430:	74bb      	strb	r3, [r7, #18]
 8001432:	e7f0      	b.n	8001416 <_ZN7CANopen13receiveCanMsgEv+0x12e>
        break;
 8001434:	bf00      	nop
 8001436:	e77e      	b.n	8001336 <_ZN7CANopen13receiveCanMsgEv+0x4e>
        break;
 8001438:	bf00      	nop
 800143a:	e77c      	b.n	8001336 <_ZN7CANopen13receiveCanMsgEv+0x4e>
        break; // maybe another msg is waiting
 800143c:	bf00      	nop
  while (can_bus.checkReceive()==CANBUS_NEW_MSG) {
 800143e:	e77a      	b.n	8001336 <_ZN7CANopen13receiveCanMsgEv+0x4e>
    } // switch type_bit
  } // while msg received
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200001f8 	.word	0x200001f8
 800144c:	2000021c 	.word	0x2000021c
 8001450:	20000214 	.word	0x20000214
 8001454:	08008618 	.word	0x08008618
 8001458:	08008620 	.word	0x08008620
 800145c:	08008624 	.word	0x08008624
 8001460:	0800862c 	.word	0x0800862c
 8001464:	08008630 	.word	0x08008630
 8001468:	08008638 	.word	0x08008638
 800146c:	0800864c 	.word	0x0800864c
 8001470:	08008660 	.word	0x08008660

08001474 <_Z41__static_initialization_and_destruction_0ii>:
  can_msg_buffer[1] = id;
  sendCanBuffer(0x0000,2);
  while (readCanBus()!=SUCCESS)
  {printf("\n waiting sendSyncMsg");};
  return SUCCESS;
}
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d108      	bne.n	8001496 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800148a:	4293      	cmp	r3, r2
 800148c:	d103      	bne.n	8001496 <_Z41__static_initialization_and_destruction_0ii+0x22>
MCP_CAN CANopen::can_bus = MCP_CAN(CS_PIN_DEFAULT);
 800148e:	210a      	movs	r1, #10
 8001490:	4803      	ldr	r0, [pc, #12]	; (80014a0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8001492:	f000 fea7 	bl	80021e4 <_ZN7MCP_CANC1Eh>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200001f8 	.word	0x200001f8

080014a4 <_GLOBAL__sub_I__ZN7CANopen7can_busE>:
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014ac:	2001      	movs	r0, #1
 80014ae:	f7ff ffe1 	bl	8001474 <_Z41__static_initialization_and_destruction_0ii>
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <MCP2515_Initialize>:
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);
#define false 0
#define true 1
/* MCP2515 초기화 */
_Bool MCP2515_Initialize(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 80014ba:	2201      	movs	r2, #1
 80014bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c0:	480b      	ldr	r0, [pc, #44]	; (80014f0 <MCP2515_Initialize+0x3c>)
 80014c2:	f002 f89b 	bl	80035fc <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 80014c6:	230a      	movs	r3, #10
 80014c8:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 80014ca:	480a      	ldr	r0, [pc, #40]	; (80014f4 <MCP2515_Initialize+0x40>)
 80014cc:	f003 fc4a 	bl	8004d64 <HAL_SPI_GetState>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d101      	bne.n	80014da <MCP2515_Initialize+0x26>
      return true;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e006      	b.n	80014e8 <MCP2515_Initialize+0x34>
    
    loop--;
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	3b01      	subs	r3, #1
 80014de:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f1      	bne.n	80014ca <MCP2515_Initialize+0x16>
      
  return false;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40020400 	.word	0x40020400
 80014f4:	20000224 	.word	0x20000224

080014f8 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */  
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80014fe:	2180      	movs	r1, #128	; 0x80
 8001500:	200f      	movs	r0, #15
 8001502:	f000 f87d 	bl	8001600 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8001506:	230a      	movs	r3, #10
 8001508:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 800150a:	200e      	movs	r0, #14
 800150c:	f000 f830 	bl	8001570 <MCP2515_ReadByte>
 8001510:	4603      	mov	r3, r0
 8001512:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001516:	2b80      	cmp	r3, #128	; 0x80
 8001518:	d101      	bne.n	800151e <MCP2515_SetConfigMode+0x26>
      return true;
 800151a:	2301      	movs	r3, #1
 800151c:	e006      	b.n	800152c <MCP2515_SetConfigMode+0x34>
    
    loop--;
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	3b01      	subs	r3, #1
 8001522:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1ef      	bne.n	800150a <MCP2515_SetConfigMode+0x12>
  
  return false;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */  
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 800153a:	2100      	movs	r1, #0
 800153c:	200f      	movs	r0, #15
 800153e:	f000 f85f 	bl	8001600 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8001542:	230a      	movs	r3, #10
 8001544:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* 모드전환 확인 */    
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8001546:	200e      	movs	r0, #14
 8001548:	f000 f812 	bl	8001570 <MCP2515_ReadByte>
 800154c:	4603      	mov	r3, r0
 800154e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <MCP2515_SetNormalMode+0x26>
      return true;
 8001556:	2301      	movs	r3, #1
 8001558:	e006      	b.n	8001568 <MCP2515_SetNormalMode+0x34>
    
    loop--;
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	3b01      	subs	r3, #1
 800155e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1ef      	bne.n	8001546 <MCP2515_SetNormalMode+0x12>
  
  return false;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800157a:	2200      	movs	r2, #0
 800157c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <MCP2515_ReadByte+0x44>)
 8001582:	f002 f83b 	bl	80035fc <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ);
 8001586:	2003      	movs	r0, #3
 8001588:	f000 f8aa 	bl	80016e0 <SPI_Tx>
  SPI_Tx(address);
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	4618      	mov	r0, r3
 8001590:	f000 f8a6 	bl	80016e0 <SPI_Tx>
  retVal = SPI_Rx();
 8001594:	f000 f8ca 	bl	800172c <SPI_Rx>
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 800159c:	2201      	movs	r2, #1
 800159e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a2:	4804      	ldr	r0, [pc, #16]	; (80015b4 <MCP2515_ReadByte+0x44>)
 80015a4:	f002 f82a 	bl	80035fc <HAL_GPIO_WritePin>
  
  return retVal;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40020400 	.word	0x40020400

080015b8 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
 80015c4:	4613      	mov	r3, r2
 80015c6:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80015c8:	2200      	movs	r2, #0
 80015ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ce:	480b      	ldr	r0, [pc, #44]	; (80015fc <MCP2515_ReadRxSequence+0x44>)
 80015d0:	f002 f814 	bl	80035fc <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);        
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f882 	bl	80016e0 <SPI_Tx>
  SPI_RxBuffer(data, length);
 80015dc:	79bb      	ldrb	r3, [r7, #6]
 80015de:	4619      	mov	r1, r3
 80015e0:	6838      	ldr	r0, [r7, #0]
 80015e2:	f000 f8b3 	bl	800174c <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 80015e6:	2201      	movs	r2, #1
 80015e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ec:	4803      	ldr	r0, [pc, #12]	; (80015fc <MCP2515_ReadRxSequence+0x44>)
 80015ee:	f002 f805 	bl	80035fc <HAL_GPIO_WritePin>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40020400 	.word	0x40020400

08001600 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	460a      	mov	r2, r1
 800160a:	71fb      	strb	r3, [r7, #7]
 800160c:	4613      	mov	r3, r2
 800160e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001616:	480c      	ldr	r0, [pc, #48]	; (8001648 <MCP2515_WriteByte+0x48>)
 8001618:	f001 fff0 	bl	80035fc <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 800161c:	2002      	movs	r0, #2
 800161e:	f000 f85f 	bl	80016e0 <SPI_Tx>
  SPI_Tx(address);
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f85b 	bl	80016e0 <SPI_Tx>
  SPI_Tx(data);  
 800162a:	79bb      	ldrb	r3, [r7, #6]
 800162c:	4618      	mov	r0, r3
 800162e:	f000 f857 	bl	80016e0 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 8001632:	2201      	movs	r2, #1
 8001634:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001638:	4803      	ldr	r0, [pc, #12]	; (8001648 <MCP2515_WriteByte+0x48>)
 800163a:	f001 ffdf 	bl	80035fc <HAL_GPIO_WritePin>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40020400 	.word	0x40020400

0800164c <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	603a      	str	r2, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
 8001658:	460b      	mov	r3, r1
 800165a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800165c:	2200      	movs	r2, #0
 800165e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001662:	480f      	ldr	r0, [pc, #60]	; (80016a0 <MCP2515_WriteByteSequence+0x54>)
 8001664:	f001 ffca 	bl	80035fc <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8001668:	2002      	movs	r0, #2
 800166a:	f000 f839 	bl	80016e0 <SPI_Tx>
  SPI_Tx(startAddress);
 800166e:	79fb      	ldrb	r3, [r7, #7]
 8001670:	4618      	mov	r0, r3
 8001672:	f000 f835 	bl	80016e0 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8001676:	79ba      	ldrb	r2, [r7, #6]
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	b2db      	uxtb	r3, r3
 800167e:	3301      	adds	r3, #1
 8001680:	b2db      	uxtb	r3, r3
 8001682:	4619      	mov	r1, r3
 8001684:	6838      	ldr	r0, [r7, #0]
 8001686:	f000 f83d 	bl	8001704 <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 800168a:	2201      	movs	r2, #1
 800168c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001690:	4803      	ldr	r0, [pc, #12]	; (80016a0 <MCP2515_WriteByteSequence+0x54>)
 8001692:	f001 ffb3 	bl	80035fc <HAL_GPIO_WritePin>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40020400 	.word	0x40020400

080016a4 <MCP2515_GetRxStatus>:
  return retVal;
}

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80016aa:	2200      	movs	r2, #0
 80016ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b0:	480a      	ldr	r0, [pc, #40]	; (80016dc <MCP2515_GetRxStatus+0x38>)
 80016b2:	f001 ffa3 	bl	80035fc <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_RX_STATUS);
 80016b6:	20b0      	movs	r0, #176	; 0xb0
 80016b8:	f000 f812 	bl	80016e0 <SPI_Tx>
  retVal = SPI_Rx();
 80016bc:	f000 f836 	bl	800172c <SPI_Rx>
 80016c0:	4603      	mov	r3, r0
 80016c2:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 80016c4:	2201      	movs	r2, #1
 80016c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ca:	4804      	ldr	r0, [pc, #16]	; (80016dc <MCP2515_GetRxStatus+0x38>)
 80016cc:	f001 ff96 	bl	80035fc <HAL_GPIO_WritePin>
  
  return retVal;
 80016d0:	79fb      	ldrb	r3, [r7, #7]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40020400 	.word	0x40020400

080016e0 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 80016ea:	1df9      	adds	r1, r7, #7
 80016ec:	230a      	movs	r3, #10
 80016ee:	2201      	movs	r2, #1
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <SPI_Tx+0x20>)
 80016f2:	f002 fe4d 	bl	8004390 <HAL_SPI_Transmit>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000224 	.word	0x20000224

08001704 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	b29a      	uxth	r2, r3
 8001714:	230a      	movs	r3, #10
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <SPI_TxBuffer+0x24>)
 800171a:	f002 fe39 	bl	8004390 <HAL_SPI_Transmit>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000224 	.word	0x20000224

0800172c <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001732:	1df9      	adds	r1, r7, #7
 8001734:	230a      	movs	r3, #10
 8001736:	2201      	movs	r2, #1
 8001738:	4803      	ldr	r0, [pc, #12]	; (8001748 <SPI_Rx+0x1c>)
 800173a:	f002 ff5d 	bl	80045f8 <HAL_SPI_Receive>
  return retVal;
 800173e:	79fb      	ldrb	r3, [r7, #7]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000224 	.word	0x20000224

0800174c <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	b29a      	uxth	r2, r3
 800175c:	230a      	movs	r3, #10
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	4803      	ldr	r0, [pc, #12]	; (8001770 <SPI_RxBuffer+0x24>)
 8001762:	f002 ff49 	bl	80045f8 <HAL_SPI_Receive>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000224 	.word	0x20000224

08001774 <_ZN7CANopenC1Ev>:


class CANopen
{
public:
  CANopen() {}
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <_Z41__static_initialization_and_destruction_0ii>:

uint8_t MotorCtrl::motorHalt() {
  // save way to bring the motor to a halt
  // triggers the target reached flag
  return can.write16bit(ADR_CONTROLWORD,0x00,0x8F);
}
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d107      	bne.n	80017ac <_Z41__static_initialization_and_destruction_0ii+0x20>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d102      	bne.n	80017ac <_Z41__static_initialization_and_destruction_0ii+0x20>
CANopen MotorCtrl::can = CANopen();
 80017a6:	4803      	ldr	r0, [pc, #12]	; (80017b4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80017a8:	f7ff ffe4 	bl	8001774 <_ZN7CANopenC1Ev>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000220 	.word	0x20000220

080017b8 <_GLOBAL__sub_I__ZN9MotorCtrl3canE>:
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7ff ffe3 	bl	800178c <_Z41__static_initialization_and_destruction_0ii>
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <MX_CAN1_Init+0x64>)
 80017ce:	4a18      	ldr	r2, [pc, #96]	; (8001830 <MX_CAN1_Init+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80017d2:	4b16      	ldr	r3, [pc, #88]	; (800182c <MX_CAN1_Init+0x64>)
 80017d4:	2206      	movs	r2, #6
 80017d6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_CAN1_Init+0x64>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <MX_CAN1_Init+0x64>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_CAN1_Init+0x64>)
 80017e6:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80017ea:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_CAN1_Init+0x64>)
 80017ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80017f2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <MX_CAN1_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_CAN1_Init+0x64>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <MX_CAN1_Init+0x64>)
 8001802:	2200      	movs	r2, #0
 8001804:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_CAN1_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <MX_CAN1_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_CAN1_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <MX_CAN1_Init+0x64>)
 800181a:	f001 f8fb 	bl	8002a14 <HAL_CAN_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001824:	f000 f9ea 	bl	8001bfc <Error_Handler>
  }

}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200002a8 	.word	0x200002a8
 8001830:	40006400 	.word	0x40006400

08001834 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a1d      	ldr	r2, [pc, #116]	; (80018c8 <HAL_CAN_MspInit+0x94>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d134      	bne.n	80018c0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <HAL_CAN_MspInit+0x98>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <HAL_CAN_MspInit+0x98>)
 8001860:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b19      	ldr	r3, [pc, #100]	; (80018cc <HAL_CAN_MspInit+0x98>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_CAN_MspInit+0x98>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a14      	ldr	r2, [pc, #80]	; (80018cc <HAL_CAN_MspInit+0x98>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_CAN_MspInit+0x98>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800188e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189c:	2303      	movs	r3, #3
 800189e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80018a0:	2309      	movs	r3, #9
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	4809      	ldr	r0, [pc, #36]	; (80018d0 <HAL_CAN_MspInit+0x9c>)
 80018ac:	f001 fd14 	bl	80032d8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80018b0:	2200      	movs	r2, #0
 80018b2:	2100      	movs	r1, #0
 80018b4:	2014      	movs	r0, #20
 80018b6:	f001 fcb6 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80018ba:	2014      	movs	r0, #20
 80018bc:	f001 fccf 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80018c0:	bf00      	nop
 80018c2:	3728      	adds	r7, #40	; 0x28
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40006400 	.word	0x40006400
 80018cc:	40023800 	.word	0x40023800
 80018d0:	40020000 	.word	0x40020000

080018d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b2e      	ldr	r3, [pc, #184]	; (80019a8 <MX_GPIO_Init+0xd4>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a2d      	ldr	r2, [pc, #180]	; (80019a8 <MX_GPIO_Init+0xd4>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <MX_GPIO_Init+0xd4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <MX_GPIO_Init+0xd4>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a26      	ldr	r2, [pc, #152]	; (80019a8 <MX_GPIO_Init+0xd4>)
 8001910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <MX_GPIO_Init+0xd4>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <MX_GPIO_Init+0xd4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a1f      	ldr	r2, [pc, #124]	; (80019a8 <MX_GPIO_Init+0xd4>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <MX_GPIO_Init+0xd4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <MX_GPIO_Init+0xd4>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a18      	ldr	r2, [pc, #96]	; (80019a8 <MX_GPIO_Init+0xd4>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <MX_GPIO_Init+0xd4>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 800195a:	2201      	movs	r2, #1
 800195c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001960:	4812      	ldr	r0, [pc, #72]	; (80019ac <MX_GPIO_Init+0xd8>)
 8001962:	f001 fe4b 	bl	80035fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800196a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800196c:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <MX_GPIO_Init+0xdc>)
 800196e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	480e      	ldr	r0, [pc, #56]	; (80019b4 <MX_GPIO_Init+0xe0>)
 800197c:	f001 fcac 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001980:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <MX_GPIO_Init+0xd8>)
 800199a:	f001 fc9d 	bl	80032d8 <HAL_GPIO_Init>

}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	; 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40020400 	.word	0x40020400
 80019b0:	10210000 	.word	0x10210000
 80019b4:	40020800 	.word	0x40020800

080019b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <MX_I2C1_Init+0x50>)
 80019be:	4a13      	ldr	r2, [pc, #76]	; (8001a0c <MX_I2C1_Init+0x54>)
 80019c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019c2:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <MX_I2C1_Init+0x50>)
 80019c4:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <MX_I2C1_Init+0x58>)
 80019c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <MX_I2C1_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	; (8001a08 <MX_I2C1_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <MX_I2C1_Init+0x50>)
 80019d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	; (8001a08 <MX_I2C1_Init+0x50>)
 80019de:	2200      	movs	r2, #0
 80019e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <MX_I2C1_Init+0x50>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <MX_I2C1_Init+0x50>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <MX_I2C1_Init+0x50>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019f4:	4804      	ldr	r0, [pc, #16]	; (8001a08 <MX_I2C1_Init+0x50>)
 80019f6:	f001 fe1b 	bl	8003630 <HAL_I2C_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a00:	f000 f8fc 	bl	8001bfc <Error_Handler>
  }

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200002d0 	.word	0x200002d0
 8001a0c:	40005400 	.word	0x40005400
 8001a10:	000186a0 	.word	0x000186a0

08001a14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <HAL_I2C_MspInit+0x84>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d12c      	bne.n	8001a90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_I2C_MspInit+0x88>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a17      	ldr	r2, [pc, #92]	; (8001a9c <HAL_I2C_MspInit+0x88>)
 8001a40:	f043 0302 	orr.w	r3, r3, #2
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_I2C_MspInit+0x88>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a58:	2312      	movs	r3, #18
 8001a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a60:	2303      	movs	r3, #3
 8001a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a64:	2304      	movs	r3, #4
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <HAL_I2C_MspInit+0x8c>)
 8001a70:	f001 fc32 	bl	80032d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_I2C_MspInit+0x88>)
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_I2C_MspInit+0x88>)
 8001a7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a82:	6413      	str	r3, [r2, #64]	; 0x40
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <HAL_I2C_MspInit+0x88>)
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	; 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40005400 	.word	0x40005400
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	40020400 	.word	0x40020400

08001aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aaa:	f000 ff1f 	bl	80028ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aae:	f000 f82f 	bl	8001b10 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab2:	f7ff ff0f 	bl	80018d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001ab6:	f000 fe61 	bl	800277c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001aba:	f7ff ff7d 	bl	80019b8 <MX_I2C1_Init>
  MX_CAN1_Init();
 8001abe:	f7ff fe83 	bl	80017c8 <MX_CAN1_Init>
  MX_SPI2_Init();
 8001ac2:	f000 fcc3 	bl	800244c <MX_SPI2_Init>
//
//
//  	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
//   	HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING);// Activate CAN_IT_RX_FIFO0_MSG_PENDING Interrupt
//   	HAL_CAN_Start(&hcan1);
  CANSPI_Initialize();
 8001ac6:	f7ff fa0f 	bl	8000ee8 <CANSPI_Initialize>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(CANSPI_Receive(&rxMessage))
 8001aca:	480e      	ldr	r0, [pc, #56]	; (8001b04 <main+0x60>)
 8001acc:	f7ff fabc 	bl	8001048 <CANSPI_Receive>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	bf14      	ite	ne
 8001ad6:	2301      	movne	r3, #1
 8001ad8:	2300      	moveq	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f4      	beq.n	8001aca <main+0x26>
	 	      {
		  motor.read16bit(0x1404,0x00,&temp);
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <main+0x64>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f241 4104 	movw	r1, #5124	; 0x1404
 8001aec:	4807      	ldr	r0, [pc, #28]	; (8001b0c <main+0x68>)
 8001aee:	f7ff fb83 	bl	80011f8 <_ZN7CANopen9read16bitEthPtt>
//			  printf("The message id is 0x036 \r\n");
//			  printf("ID:0x%2x DLC:%d \r\n",rxMessage.frame.id,rxMessage.frame.dlc);
//			  printf("0x%2x 0x%2x 0x%2x 0x%2x 0x%2x 0x%2x 0x%2x 0x%2x \r\n",rxMessage.frame.data0,rxMessage.frame.data1,rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,rxMessage.frame.data6,rxMessage.frame.data7);
//
//		  }
		  printf("\n");
 8001af2:	200a      	movs	r0, #10
 8001af4:	f004 fe08 	bl	8006708 <putchar>
	 //	        txMessage.frame.data6 = rxMessage.frame.data6;
	 //	        txMessage.frame.data7 = rxMessage.frame.data7;
	 //	        CANSPI_Transmit(&txMessage);
//	 		  printf("ID:0x%2x DLC:%d \r\n",rxMessage.frame.id,rxMessage.frame.dlc);
//	 		  printf("0x%2x 0x%2x 0x%2x 0x%2x 0x%2x 0x%2x 0x%2x 0x%2x \r\n",rxMessage.frame.data0,rxMessage.frame.data1,rxMessage.frame.data2,rxMessage.frame.data3,rxMessage.frame.data4,rxMessage.frame.data5,rxMessage.frame.data6,rxMessage.frame.data7);
	 		  HAL_Delay(1000);
 8001af8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001afc:	f000 ff68 	bl	80029d0 <HAL_Delay>
	  if(CANSPI_Receive(&rxMessage))
 8001b00:	e7e3      	b.n	8001aca <main+0x26>
 8001b02:	bf00      	nop
 8001b04:	2000027c 	.word	0x2000027c
 8001b08:	20000292 	.word	0x20000292
 8001b0c:	20000290 	.word	0x20000290

08001b10 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b094      	sub	sp, #80	; 0x50
 8001b14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	2234      	movs	r2, #52	; 0x34
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f004 f975 	bl	8005e0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b24:	f107 0308 	add.w	r3, r7, #8
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	4b2e      	ldr	r3, [pc, #184]	; (8001bf4 <_Z18SystemClock_Configv+0xe4>)
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	4a2d      	ldr	r2, [pc, #180]	; (8001bf4 <_Z18SystemClock_Configv+0xe4>)
 8001b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b42:	6413      	str	r3, [r2, #64]	; 0x40
 8001b44:	4b2b      	ldr	r3, [pc, #172]	; (8001bf4 <_Z18SystemClock_Configv+0xe4>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b50:	2300      	movs	r3, #0
 8001b52:	603b      	str	r3, [r7, #0]
 8001b54:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <_Z18SystemClock_Configv+0xe8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a27      	ldr	r2, [pc, #156]	; (8001bf8 <_Z18SystemClock_Configv+0xe8>)
 8001b5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <_Z18SystemClock_Configv+0xe8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b68:	603b      	str	r3, [r7, #0]
 8001b6a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b70:	2301      	movs	r3, #1
 8001b72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b74:	2310      	movs	r3, #16
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b80:	2308      	movs	r3, #8
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b84:	23a8      	movs	r3, #168	; 0xa8
 8001b86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b90:	2302      	movs	r3, #2
 8001b92:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f002 f93b 	bl	8003e14 <HAL_RCC_OscConfig>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf14      	ite	ne
 8001ba4:	2301      	movne	r3, #1
 8001ba6:	2300      	moveq	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001bae:	f000 f825 	bl	8001bfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb2:	230f      	movs	r3, #15
 8001bb4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bbe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bca:	f107 0308 	add.w	r3, r7, #8
 8001bce:	2105      	movs	r1, #5
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f001 fe65 	bl	80038a0 <HAL_RCC_ClockConfig>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	bf14      	ite	ne
 8001bdc:	2301      	movne	r3, #1
 8001bde:	2300      	moveq	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8001be6:	f000 f809 	bl	8001bfc <Error_Handler>
  }
}
 8001bea:	bf00      	nop
 8001bec:	3750      	adds	r7, #80	; 0x50
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40007000 	.word	0x40007000

08001bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <_Z41__static_initialization_and_destruction_0ii>:
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d107      	bne.n	8001c2c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d102      	bne.n	8001c2c <_Z41__static_initialization_and_destruction_0ii+0x20>
CANopen motor;
 8001c26:	4803      	ldr	r0, [pc, #12]	; (8001c34 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001c28:	f7ff fda4 	bl	8001774 <_ZN7CANopenC1Ev>
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000290 	.word	0x20000290

08001c38 <_GLOBAL__sub_I_sFilterConfig>:
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c40:	2001      	movs	r0, #1
 8001c42:	f7ff ffe3 	bl	8001c0c <_Z41__static_initialization_and_destruction_0ii>
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_ZN7MCP_CAN20mcp2515_readRegisterEh>:
/*********************************************************************************************************
** Function name:           mcp2515_readRegister
** Descriptions:            read register
*********************************************************************************************************/
INT8U MCP_CAN::mcp2515_readRegister(const INT8U address)                                                                     
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	70fb      	strb	r3, [r7, #3]
    INT8U ret;

    MCP2515_SELECT();
 8001c54:	2201      	movs	r2, #1
 8001c56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c5a:	4814      	ldr	r0, [pc, #80]	; (8001cac <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x64>)
 8001c5c:	f001 fcce 	bl	80035fc <HAL_GPIO_WritePin>
    spi_readwrite(MCP_READ);
 8001c60:	2364      	movs	r3, #100	; 0x64
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2301      	movs	r3, #1
 8001c66:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x68>)
 8001c68:	4912      	ldr	r1, [pc, #72]	; (8001cb4 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x6c>)
 8001c6a:	4813      	ldr	r0, [pc, #76]	; (8001cb8 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x70>)
 8001c6c:	f002 fdcd 	bl	800480a <HAL_SPI_TransmitReceive>
    spi_readwrite(address);
 8001c70:	2364      	movs	r3, #100	; 0x64
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	2301      	movs	r3, #1
 8001c76:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x68>)
 8001c78:	490e      	ldr	r1, [pc, #56]	; (8001cb4 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x6c>)
 8001c7a:	480f      	ldr	r0, [pc, #60]	; (8001cb8 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x70>)
 8001c7c:	f002 fdc5 	bl	800480a <HAL_SPI_TransmitReceive>
    ret = spi_read();
 8001c80:	2364      	movs	r3, #100	; 0x64
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	2301      	movs	r3, #1
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x68>)
 8001c88:	490a      	ldr	r1, [pc, #40]	; (8001cb4 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x6c>)
 8001c8a:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x70>)
 8001c8c:	f002 fdbd 	bl	800480a <HAL_SPI_TransmitReceive>
 8001c90:	4603      	mov	r3, r0
 8001c92:	73fb      	strb	r3, [r7, #15]
    MCP2515_UNSELECT();
 8001c94:	2200      	movs	r2, #0
 8001c96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c9a:	4804      	ldr	r0, [pc, #16]	; (8001cac <_ZN7MCP_CAN20mcp2515_readRegisterEh+0x64>)
 8001c9c:	f001 fcae 	bl	80035fc <HAL_GPIO_WritePin>

    return ret;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40020400 	.word	0x40020400
 8001cb0:	20000298 	.word	0x20000298
 8001cb4:	20000294 	.word	0x20000294
 8001cb8:	20000224 	.word	0x20000224

08001cbc <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh>:
/*********************************************************************************************************
** Function name:           mcp2515_readRegisterS
** Descriptions:            read registerS
*********************************************************************************************************/
void MCP_CAN::mcp2515_readRegisterS(const INT8U address, INT8U values[], const INT8U n)
{
 8001cbc:	b590      	push	{r4, r7, lr}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af02      	add	r7, sp, #8
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	460b      	mov	r3, r1
 8001cca:	72fb      	strb	r3, [r7, #11]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	72bb      	strb	r3, [r7, #10]
	INT8U i;
	MCP2515_SELECT();
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cd6:	481b      	ldr	r0, [pc, #108]	; (8001d44 <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh+0x88>)
 8001cd8:	f001 fc90 	bl	80035fc <HAL_GPIO_WritePin>
	spi_readwrite(MCP_READ);
 8001cdc:	2364      	movs	r3, #100	; 0x64
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh+0x8c>)
 8001ce4:	4919      	ldr	r1, [pc, #100]	; (8001d4c <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh+0x90>)
 8001ce6:	481a      	ldr	r0, [pc, #104]	; (8001d50 <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh+0x94>)
 8001ce8:	f002 fd8f 	bl	800480a <HAL_SPI_TransmitReceive>
	spi_readwrite(address);
 8001cec:	2364      	movs	r3, #100	; 0x64
 8001cee:	9300      	str	r3, [sp, #0]
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	4a15      	ldr	r2, [pc, #84]	; (8001d48 <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh+0x8c>)
 8001cf4:	4915      	ldr	r1, [pc, #84]	; (8001d4c <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh+0x90>)
 8001cf6:	4816      	ldr	r0, [pc, #88]	; (8001d50 <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh+0x94>)
 8001cf8:	f002 fd87 	bl	800480a <HAL_SPI_TransmitReceive>
	// mcp2515 has auto-increment of address-pointer
	for (i=0; i<n && i<CAN_MAX_CHAR_IN_MESSAGE; i++) {
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	75fb      	strb	r3, [r7, #23]
 8001d00:	7dfa      	ldrb	r2, [r7, #23]
 8001d02:	7abb      	ldrb	r3, [r7, #10]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d213      	bcs.n	8001d30 <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh+0x74>
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
 8001d0a:	2b07      	cmp	r3, #7
 8001d0c:	d810      	bhi.n	8001d30 <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh+0x74>
		values[i] = spi_read();
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	18d4      	adds	r4, r2, r3
 8001d14:	2364      	movs	r3, #100	; 0x64
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	2301      	movs	r3, #1
 8001d1a:	4a0b      	ldr	r2, [pc, #44]	; (8001d48 <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh+0x8c>)
 8001d1c:	490b      	ldr	r1, [pc, #44]	; (8001d4c <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh+0x90>)
 8001d1e:	480c      	ldr	r0, [pc, #48]	; (8001d50 <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh+0x94>)
 8001d20:	f002 fd73 	bl	800480a <HAL_SPI_TransmitReceive>
 8001d24:	4603      	mov	r3, r0
 8001d26:	7023      	strb	r3, [r4, #0]
	for (i=0; i<n && i<CAN_MAX_CHAR_IN_MESSAGE; i++) {
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	75fb      	strb	r3, [r7, #23]
 8001d2e:	e7e7      	b.n	8001d00 <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh+0x44>
	}
	MCP2515_UNSELECT();
 8001d30:	2200      	movs	r2, #0
 8001d32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d36:	4803      	ldr	r0, [pc, #12]	; (8001d44 <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh+0x88>)
 8001d38:	f001 fc60 	bl	80035fc <HAL_GPIO_WritePin>
}
 8001d3c:	bf00      	nop
 8001d3e:	371c      	adds	r7, #28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd90      	pop	{r4, r7, pc}
 8001d44:	40020400 	.word	0x40020400
 8001d48:	20000298 	.word	0x20000298
 8001d4c:	20000294 	.word	0x20000294
 8001d50:	20000224 	.word	0x20000224

08001d54 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>:
/*********************************************************************************************************
** Function name:           mcp2515_setRegister
** Descriptions:            set register
*********************************************************************************************************/
void MCP_CAN::mcp2515_setRegister(const INT8U address, const INT8U value)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	70fb      	strb	r3, [r7, #3]
 8001d60:	4613      	mov	r3, r2
 8001d62:	70bb      	strb	r3, [r7, #2]
    MCP2515_SELECT();
 8001d64:	2201      	movs	r2, #1
 8001d66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d6a:	4812      	ldr	r0, [pc, #72]	; (8001db4 <_ZN7MCP_CAN19mcp2515_setRegisterEhh+0x60>)
 8001d6c:	f001 fc46 	bl	80035fc <HAL_GPIO_WritePin>
    spi_readwrite(MCP_WRITE);
 8001d70:	2364      	movs	r3, #100	; 0x64
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2301      	movs	r3, #1
 8001d76:	4a10      	ldr	r2, [pc, #64]	; (8001db8 <_ZN7MCP_CAN19mcp2515_setRegisterEhh+0x64>)
 8001d78:	4910      	ldr	r1, [pc, #64]	; (8001dbc <_ZN7MCP_CAN19mcp2515_setRegisterEhh+0x68>)
 8001d7a:	4811      	ldr	r0, [pc, #68]	; (8001dc0 <_ZN7MCP_CAN19mcp2515_setRegisterEhh+0x6c>)
 8001d7c:	f002 fd45 	bl	800480a <HAL_SPI_TransmitReceive>
    spi_readwrite(address);
 8001d80:	2364      	movs	r3, #100	; 0x64
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	2301      	movs	r3, #1
 8001d86:	4a0c      	ldr	r2, [pc, #48]	; (8001db8 <_ZN7MCP_CAN19mcp2515_setRegisterEhh+0x64>)
 8001d88:	490c      	ldr	r1, [pc, #48]	; (8001dbc <_ZN7MCP_CAN19mcp2515_setRegisterEhh+0x68>)
 8001d8a:	480d      	ldr	r0, [pc, #52]	; (8001dc0 <_ZN7MCP_CAN19mcp2515_setRegisterEhh+0x6c>)
 8001d8c:	f002 fd3d 	bl	800480a <HAL_SPI_TransmitReceive>
    spi_readwrite(value);
 8001d90:	2364      	movs	r3, #100	; 0x64
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2301      	movs	r3, #1
 8001d96:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <_ZN7MCP_CAN19mcp2515_setRegisterEhh+0x64>)
 8001d98:	4908      	ldr	r1, [pc, #32]	; (8001dbc <_ZN7MCP_CAN19mcp2515_setRegisterEhh+0x68>)
 8001d9a:	4809      	ldr	r0, [pc, #36]	; (8001dc0 <_ZN7MCP_CAN19mcp2515_setRegisterEhh+0x6c>)
 8001d9c:	f002 fd35 	bl	800480a <HAL_SPI_TransmitReceive>
    MCP2515_UNSELECT();
 8001da0:	2200      	movs	r2, #0
 8001da2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001da6:	4803      	ldr	r0, [pc, #12]	; (8001db4 <_ZN7MCP_CAN19mcp2515_setRegisterEhh+0x60>)
 8001da8:	f001 fc28 	bl	80035fc <HAL_GPIO_WritePin>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40020400 	.word	0x40020400
 8001db8:	20000298 	.word	0x20000298
 8001dbc:	20000294 	.word	0x20000294
 8001dc0:	20000224 	.word	0x20000224

08001dc4 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh>:
/*********************************************************************************************************
** Function name:           mcp2515_setRegisterS
** Descriptions:            set registerS
*********************************************************************************************************/
void MCP_CAN::mcp2515_setRegisterS(const INT8U address, const INT8U values[], const INT8U n)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	461a      	mov	r2, r3
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	72fb      	strb	r3, [r7, #11]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	72bb      	strb	r3, [r7, #10]
    INT8U i;
    MCP2515_SELECT();
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dde:	4817      	ldr	r0, [pc, #92]	; (8001e3c <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh+0x78>)
 8001de0:	f001 fc0c 	bl	80035fc <HAL_GPIO_WritePin>
    spi_readwrite(MCP_WRITE);
 8001de4:	2364      	movs	r3, #100	; 0x64
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2301      	movs	r3, #1
 8001dea:	4a15      	ldr	r2, [pc, #84]	; (8001e40 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh+0x7c>)
 8001dec:	4915      	ldr	r1, [pc, #84]	; (8001e44 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh+0x80>)
 8001dee:	4816      	ldr	r0, [pc, #88]	; (8001e48 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh+0x84>)
 8001df0:	f002 fd0b 	bl	800480a <HAL_SPI_TransmitReceive>
    spi_readwrite(address);
 8001df4:	2364      	movs	r3, #100	; 0x64
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2301      	movs	r3, #1
 8001dfa:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh+0x7c>)
 8001dfc:	4911      	ldr	r1, [pc, #68]	; (8001e44 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh+0x80>)
 8001dfe:	4812      	ldr	r0, [pc, #72]	; (8001e48 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh+0x84>)
 8001e00:	f002 fd03 	bl	800480a <HAL_SPI_TransmitReceive>
       
    for (i=0; i<n; i++) 
 8001e04:	2300      	movs	r3, #0
 8001e06:	75fb      	strb	r3, [r7, #23]
 8001e08:	7dfa      	ldrb	r2, [r7, #23]
 8001e0a:	7abb      	ldrb	r3, [r7, #10]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d20b      	bcs.n	8001e28 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh+0x64>
    {
        spi_readwrite(values[i]);
 8001e10:	2364      	movs	r3, #100	; 0x64
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	2301      	movs	r3, #1
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh+0x7c>)
 8001e18:	490a      	ldr	r1, [pc, #40]	; (8001e44 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh+0x80>)
 8001e1a:	480b      	ldr	r0, [pc, #44]	; (8001e48 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh+0x84>)
 8001e1c:	f002 fcf5 	bl	800480a <HAL_SPI_TransmitReceive>
    for (i=0; i<n; i++) 
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
 8001e22:	3301      	adds	r3, #1
 8001e24:	75fb      	strb	r3, [r7, #23]
 8001e26:	e7ef      	b.n	8001e08 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh+0x44>
    }
    MCP2515_UNSELECT();
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e2e:	4803      	ldr	r0, [pc, #12]	; (8001e3c <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh+0x78>)
 8001e30:	f001 fbe4 	bl	80035fc <HAL_GPIO_WritePin>
}
 8001e34:	bf00      	nop
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	20000298 	.word	0x20000298
 8001e44:	20000294 	.word	0x20000294
 8001e48:	20000224 	.word	0x20000224

08001e4c <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>:
/*********************************************************************************************************
** Function name:           mcp2515_modifyRegister
** Descriptions:            set bit of one register
*********************************************************************************************************/
void MCP_CAN::mcp2515_modifyRegister(const INT8U address, const INT8U mask, const INT8U data)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af02      	add	r7, sp, #8
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	4608      	mov	r0, r1
 8001e56:	4611      	mov	r1, r2
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	70fb      	strb	r3, [r7, #3]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	70bb      	strb	r3, [r7, #2]
 8001e62:	4613      	mov	r3, r2
 8001e64:	707b      	strb	r3, [r7, #1]
    MCP2515_SELECT();
 8001e66:	2201      	movs	r2, #1
 8001e68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e6c:	4816      	ldr	r0, [pc, #88]	; (8001ec8 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0x7c>)
 8001e6e:	f001 fbc5 	bl	80035fc <HAL_GPIO_WritePin>
    spi_readwrite(MCP_BITMOD);
 8001e72:	2364      	movs	r3, #100	; 0x64
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	2301      	movs	r3, #1
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0x80>)
 8001e7a:	4915      	ldr	r1, [pc, #84]	; (8001ed0 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0x84>)
 8001e7c:	4815      	ldr	r0, [pc, #84]	; (8001ed4 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0x88>)
 8001e7e:	f002 fcc4 	bl	800480a <HAL_SPI_TransmitReceive>
    spi_readwrite(address);
 8001e82:	2364      	movs	r3, #100	; 0x64
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	2301      	movs	r3, #1
 8001e88:	4a10      	ldr	r2, [pc, #64]	; (8001ecc <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0x80>)
 8001e8a:	4911      	ldr	r1, [pc, #68]	; (8001ed0 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0x84>)
 8001e8c:	4811      	ldr	r0, [pc, #68]	; (8001ed4 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0x88>)
 8001e8e:	f002 fcbc 	bl	800480a <HAL_SPI_TransmitReceive>
    spi_readwrite(mask);
 8001e92:	2364      	movs	r3, #100	; 0x64
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	2301      	movs	r3, #1
 8001e98:	4a0c      	ldr	r2, [pc, #48]	; (8001ecc <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0x80>)
 8001e9a:	490d      	ldr	r1, [pc, #52]	; (8001ed0 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0x84>)
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0x88>)
 8001e9e:	f002 fcb4 	bl	800480a <HAL_SPI_TransmitReceive>
    spi_readwrite(data);
 8001ea2:	2364      	movs	r3, #100	; 0x64
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0x80>)
 8001eaa:	4909      	ldr	r1, [pc, #36]	; (8001ed0 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0x84>)
 8001eac:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0x88>)
 8001eae:	f002 fcac 	bl	800480a <HAL_SPI_TransmitReceive>
    MCP2515_UNSELECT();
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eb8:	4803      	ldr	r0, [pc, #12]	; (8001ec8 <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh+0x7c>)
 8001eba:	f001 fb9f 	bl	80035fc <HAL_GPIO_WritePin>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40020400 	.word	0x40020400
 8001ecc:	20000298 	.word	0x20000298
 8001ed0:	20000294 	.word	0x20000294
 8001ed4:	20000224 	.word	0x20000224

08001ed8 <_ZN7MCP_CAN18mcp2515_readStatusEv>:
/*********************************************************************************************************
** Function name:           mcp2515_readStatus
** Descriptions:            read mcp2515's Status
*********************************************************************************************************/
INT8U MCP_CAN::mcp2515_readStatus(void)                             
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af02      	add	r7, sp, #8
 8001ede:	6078      	str	r0, [r7, #4]
	INT8U i;
	MCP2515_SELECT();
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ee6:	4810      	ldr	r0, [pc, #64]	; (8001f28 <_ZN7MCP_CAN18mcp2515_readStatusEv+0x50>)
 8001ee8:	f001 fb88 	bl	80035fc <HAL_GPIO_WritePin>
	spi_readwrite(MCP_READ_STATUS);
 8001eec:	2364      	movs	r3, #100	; 0x64
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	4a0e      	ldr	r2, [pc, #56]	; (8001f2c <_ZN7MCP_CAN18mcp2515_readStatusEv+0x54>)
 8001ef4:	490e      	ldr	r1, [pc, #56]	; (8001f30 <_ZN7MCP_CAN18mcp2515_readStatusEv+0x58>)
 8001ef6:	480f      	ldr	r0, [pc, #60]	; (8001f34 <_ZN7MCP_CAN18mcp2515_readStatusEv+0x5c>)
 8001ef8:	f002 fc87 	bl	800480a <HAL_SPI_TransmitReceive>
	i = spi_read();
 8001efc:	2364      	movs	r3, #100	; 0x64
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	2301      	movs	r3, #1
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <_ZN7MCP_CAN18mcp2515_readStatusEv+0x54>)
 8001f04:	490a      	ldr	r1, [pc, #40]	; (8001f30 <_ZN7MCP_CAN18mcp2515_readStatusEv+0x58>)
 8001f06:	480b      	ldr	r0, [pc, #44]	; (8001f34 <_ZN7MCP_CAN18mcp2515_readStatusEv+0x5c>)
 8001f08:	f002 fc7f 	bl	800480a <HAL_SPI_TransmitReceive>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	73fb      	strb	r3, [r7, #15]
	MCP2515_UNSELECT();
 8001f10:	2200      	movs	r2, #0
 8001f12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f16:	4804      	ldr	r0, [pc, #16]	; (8001f28 <_ZN7MCP_CAN18mcp2515_readStatusEv+0x50>)
 8001f18:	f001 fb70 	bl	80035fc <HAL_GPIO_WritePin>
	
	return i;
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	20000298 	.word	0x20000298
 8001f30:	20000294 	.word	0x20000294
 8001f34:	20000224 	.word	0x20000224

08001f38 <_ZN7MCP_CAN16mcp2515_write_idEhhm>:
/*********************************************************************************************************
** Function name:           mcp2515_write_id
** Descriptions:            write can id
*********************************************************************************************************/
void MCP_CAN::mcp2515_write_id( const INT8U mcp_addr, const INT8U ext, const INT32U id )
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	607b      	str	r3, [r7, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	72fb      	strb	r3, [r7, #11]
 8001f46:	4613      	mov	r3, r2
 8001f48:	72bb      	strb	r3, [r7, #10]
    uint16_t canid;
    INT8U tbufdata[4];

    canid = (uint16_t)(id & 0x0FFFF);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	82fb      	strh	r3, [r7, #22]

    if ( ext == 1) 
 8001f4e:	7abb      	ldrb	r3, [r7, #10]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d123      	bne.n	8001f9c <_ZN7MCP_CAN16mcp2515_write_idEhhm+0x64>
    {
        tbufdata[MCP_EID0] = (INT8U) (canid & 0xFF);
 8001f54:	8afb      	ldrh	r3, [r7, #22]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	74fb      	strb	r3, [r7, #19]
        tbufdata[MCP_EID8] = (INT8U) (canid >> 8);
 8001f5a:	8afb      	ldrh	r3, [r7, #22]
 8001f5c:	121b      	asrs	r3, r3, #8
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	74bb      	strb	r3, [r7, #18]
        canid = (uint16_t)(id >> 16);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	0c1b      	lsrs	r3, r3, #16
 8001f66:	82fb      	strh	r3, [r7, #22]
        tbufdata[MCP_SIDL] = (INT8U) (canid & 0x03);
 8001f68:	8afb      	ldrh	r3, [r7, #22]
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	747b      	strb	r3, [r7, #17]
        tbufdata[MCP_SIDL] += (INT8U) ((canid & 0x1C) << 3);
 8001f74:	7c7a      	ldrb	r2, [r7, #17]
 8001f76:	8afb      	ldrh	r3, [r7, #22]
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f023 031f 	bic.w	r3, r3, #31
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	747b      	strb	r3, [r7, #17]
        tbufdata[MCP_SIDL] |= MCP_TXB_EXIDE_M;
 8001f88:	7c7b      	ldrb	r3, [r7, #17]
 8001f8a:	f043 0308 	orr.w	r3, r3, #8
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	747b      	strb	r3, [r7, #17]
        tbufdata[MCP_SIDH] = (INT8U) (canid >> 5 );
 8001f92:	8afb      	ldrh	r3, [r7, #22]
 8001f94:	115b      	asrs	r3, r3, #5
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	743b      	strb	r3, [r7, #16]
 8001f9a:	e00b      	b.n	8001fb4 <_ZN7MCP_CAN16mcp2515_write_idEhhm+0x7c>
    }
    else 
    {
        tbufdata[MCP_SIDH] = (INT8U) (canid >> 3 );
 8001f9c:	8afb      	ldrh	r3, [r7, #22]
 8001f9e:	10db      	asrs	r3, r3, #3
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	743b      	strb	r3, [r7, #16]
        tbufdata[MCP_SIDL] = (INT8U) ((canid & 0x07 ) << 5);
 8001fa4:	8afb      	ldrh	r3, [r7, #22]
 8001fa6:	015b      	lsls	r3, r3, #5
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	747b      	strb	r3, [r7, #17]
        tbufdata[MCP_EID0] = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	74fb      	strb	r3, [r7, #19]
        tbufdata[MCP_EID8] = 0;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	74bb      	strb	r3, [r7, #18]
    }
    mcp2515_setRegisterS( mcp_addr, tbufdata, 4 );
 8001fb4:	f107 0210 	add.w	r2, r7, #16
 8001fb8:	7af9      	ldrb	r1, [r7, #11]
 8001fba:	2304      	movs	r3, #4
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f7ff ff01 	bl	8001dc4 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh>
}
 8001fc2:	bf00      	nop
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <_ZN7MCP_CAN15mcp2515_read_idEhPhPm>:
/*********************************************************************************************************
** Function name:           mcp2515_read_id
** Descriptions:            read can id
*********************************************************************************************************/
void MCP_CAN::mcp2515_read_id( const INT8U mcp_addr, INT8U* ext, INT32U* id )
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	60f8      	str	r0, [r7, #12]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	72fb      	strb	r3, [r7, #11]
    INT8U tbufdata[4];

    *ext = 0;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
    *id = 0;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]

    mcp2515_readRegisterS( mcp_addr, tbufdata, 4 );
 8001fe6:	f107 0214 	add.w	r2, r7, #20
 8001fea:	7af9      	ldrb	r1, [r7, #11]
 8001fec:	2304      	movs	r3, #4
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f7ff fe64 	bl	8001cbc <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh>

    *id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 8001ff4:	7d3b      	ldrb	r3, [r7, #20]
 8001ff6:	00da      	lsls	r2, r3, #3
 8001ff8:	7d7b      	ldrb	r3, [r7, #21]
 8001ffa:	115b      	asrs	r3, r3, #5
 8001ffc:	4413      	add	r3, r2
 8001ffe:	461a      	mov	r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	601a      	str	r2, [r3, #0]

    if ( (tbufdata[MCP_SIDL] & MCP_TXB_EXIDE_M) ==  MCP_TXB_EXIDE_M ) 
 8002004:	7d7b      	ldrb	r3, [r7, #21]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d019      	beq.n	8002042 <_ZN7MCP_CAN15mcp2515_read_idEhPhPm+0x78>
    {
                                                                        /* extended id                  */
        *id = (*id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	009a      	lsls	r2, r3, #2
 8002014:	7d7b      	ldrb	r3, [r7, #21]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	441a      	add	r2, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	601a      	str	r2, [r3, #0]
        *id = (*id<<8) + tbufdata[MCP_EID8];
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	7dba      	ldrb	r2, [r7, #22]
 8002028:	441a      	add	r2, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	601a      	str	r2, [r3, #0]
        *id = (*id<<8) + tbufdata[MCP_EID0];
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	7dfa      	ldrb	r2, [r7, #23]
 8002036:	441a      	add	r2, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	601a      	str	r2, [r3, #0]
        *ext = 1;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
    }
}
 8002042:	bf00      	nop
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <_ZN7MCP_CAN20mcp2515_write_canMsgEh>:
/*********************************************************************************************************
** Function name:           mcp2515_write_canMsg
** Descriptions:            write msg
*********************************************************************************************************/
void MCP_CAN::mcp2515_write_canMsg( const INT8U buffer_sidh_addr)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	70fb      	strb	r3, [r7, #3]
    INT8U mcp_addr;
    mcp_addr = buffer_sidh_addr;
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	73fb      	strb	r3, [r7, #15]
    mcp2515_setRegisterS(mcp_addr+5, m_nDta, m_nDlc );                  /* write data bytes             */
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	3305      	adds	r3, #5
 800205e:	b2d9      	uxtb	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f103 0209 	add.w	r2, r3, #9
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	7a1b      	ldrb	r3, [r3, #8]
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff feaa 	bl	8001dc4 <_ZN7MCP_CAN20mcp2515_setRegisterSEhPKhh>
    if ( m_nRtr == 1)                                                   /* if RTR set bit in byte       */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	7c5b      	ldrb	r3, [r3, #17]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d106      	bne.n	8002086 <_ZN7MCP_CAN20mcp2515_write_canMsgEh+0x3c>
    {
        m_nDlc |= MCP_RTR_MASK;  
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	7a1b      	ldrb	r3, [r3, #8]
 800207c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002080:	b2da      	uxtb	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	721a      	strb	r2, [r3, #8]
    }
    mcp2515_setRegister((mcp_addr+4), m_nDlc );                        /* write the RTR and DLC        */
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	3304      	adds	r3, #4
 800208a:	b2d9      	uxtb	r1, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	7a1b      	ldrb	r3, [r3, #8]
 8002090:	461a      	mov	r2, r3
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff fe5e 	bl	8001d54 <_ZN7MCP_CAN19mcp2515_setRegisterEhh>
    mcp2515_write_id(mcp_addr, m_nExtFlg, m_nID );                     /* write CAN id                 */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	781a      	ldrb	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	7bf9      	ldrb	r1, [r7, #15]
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff ff48 	bl	8001f38 <_ZN7MCP_CAN16mcp2515_write_idEhhm>

}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <_ZN7MCP_CAN19mcp2515_read_canMsgEh>:
/*********************************************************************************************************
** Function name:           mcp2515_read_canMsg
** Descriptions:            read message
*********************************************************************************************************/
void MCP_CAN::mcp2515_read_canMsg( const INT8U buffer_sidh_addr)        /* read can msg                 */
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	70fb      	strb	r3, [r7, #3]
    INT8U mcp_addr, ctrl;

    mcp_addr = buffer_sidh_addr;
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	73fb      	strb	r3, [r7, #15]

    mcp2515_read_id( mcp_addr, &m_nExtFlg,&m_nID );
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3304      	adds	r3, #4
 80020c6:	7bf9      	ldrb	r1, [r7, #15]
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff7e 	bl	8001fca <_ZN7MCP_CAN15mcp2515_read_idEhPhPm>

    ctrl = mcp2515_readRegister( mcp_addr-1 );
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	4619      	mov	r1, r3
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff fdb6 	bl	8001c48 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
 80020dc:	4603      	mov	r3, r0
 80020de:	73bb      	strb	r3, [r7, #14]
    m_nDlc = mcp2515_readRegister( mcp_addr+4 );
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	3304      	adds	r3, #4
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	4619      	mov	r1, r3
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff fdad 	bl	8001c48 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
 80020ee:	4603      	mov	r3, r0
 80020f0:	461a      	mov	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	721a      	strb	r2, [r3, #8]

    if ((ctrl & 0x08)) {
 80020f6:	7bbb      	ldrb	r3, [r7, #14]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <_ZN7MCP_CAN19mcp2515_read_canMsgEh+0x58>
        m_nRtr = 1;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	745a      	strb	r2, [r3, #17]
 8002106:	e002      	b.n	800210e <_ZN7MCP_CAN19mcp2515_read_canMsgEh+0x5e>
    }
    else {
        m_nRtr = 0;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	745a      	strb	r2, [r3, #17]
    }

    m_nDlc &= MCP_DLC_MASK;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7a1b      	ldrb	r3, [r3, #8]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	b2da      	uxtb	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	721a      	strb	r2, [r3, #8]
    mcp2515_readRegisterS( mcp_addr+5, &(m_nDta[0]), m_nDlc );
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	3305      	adds	r3, #5
 8002120:	b2d9      	uxtb	r1, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f103 0209 	add.w	r2, r3, #9
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	7a1b      	ldrb	r3, [r3, #8]
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff fdc5 	bl	8001cbc <_ZN7MCP_CAN21mcp2515_readRegisterSEhPhh>
}
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <_ZN7MCP_CAN22mcp2515_start_transmitEh>:
/*********************************************************************************************************
** Function name:           sendMsg
** Descriptions:            send message
*********************************************************************************************************/
void MCP_CAN::mcp2515_start_transmit(const INT8U mcp_addr)              /* start transmit               */
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	70fb      	strb	r3, [r7, #3]
    mcp2515_modifyRegister( mcp_addr-1 , MCP_TXB_TXREQ_M, MCP_TXB_TXREQ_M );
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	3b01      	subs	r3, #1
 800214a:	b2d9      	uxtb	r1, r3
 800214c:	2308      	movs	r3, #8
 800214e:	2208      	movs	r2, #8
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fe7b 	bl	8001e4c <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh>:
/*********************************************************************************************************
** Function name:           sendMsg
** Descriptions:            send message
*********************************************************************************************************/
INT8U MCP_CAN::mcp2515_getNextFreeTXBuf(INT8U *txbuf_n)                 /* get Next free txbuf          */
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
    INT8U res, i, ctrlval;
    INT8U ctrlregs[MCP_N_TXBUFFERS] = { MCP_TXB0CTRL, MCP_TXB1CTRL, MCP_TXB2CTRL };
 800216a:	4a1d      	ldr	r2, [pc, #116]	; (80021e0 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x80>)
 800216c:	f107 0308 	add.w	r3, r7, #8
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	4611      	mov	r1, r2
 8002174:	8019      	strh	r1, [r3, #0]
 8002176:	3302      	adds	r3, #2
 8002178:	0c12      	lsrs	r2, r2, #16
 800217a:	701a      	strb	r2, [r3, #0]

    res = MCP_ALLTXBUSY;
 800217c:	2302      	movs	r3, #2
 800217e:	73bb      	strb	r3, [r7, #14]
    *txbuf_n = 0x00;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]

                                                                        /* check all 3 TX-Buffers       */
    for (i=0; i<MCP_N_TXBUFFERS; i++) {
 8002186:	2300      	movs	r3, #0
 8002188:	73fb      	strb	r3, [r7, #15]
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d822      	bhi.n	80021d6 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x76>
        ctrlval = mcp2515_readRegister( ctrlregs[i] );
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	f107 0210 	add.w	r2, r7, #16
 8002196:	4413      	add	r3, r2
 8002198:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800219c:	4619      	mov	r1, r3
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fd52 	bl	8001c48 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
 80021a4:	4603      	mov	r3, r0
 80021a6:	737b      	strb	r3, [r7, #13]
        if ( (ctrlval & MCP_TXB_TXREQ_M) == 0 ) {
 80021a8:	7b7b      	ldrb	r3, [r7, #13]
 80021aa:	f003 0308 	and.w	r3, r3, #8
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10d      	bne.n	80021ce <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x6e>
            *txbuf_n = ctrlregs[i]+1;                                   /* return SIDH-address of Buffe */
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	f107 0210 	add.w	r2, r7, #16
 80021b8:	4413      	add	r3, r2
 80021ba:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80021be:	3301      	adds	r3, #1
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	701a      	strb	r2, [r3, #0]
                                                                        /* r                            */
            res = MCP2515_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	73bb      	strb	r3, [r7, #14]
            return res;                                                 /* ! function exit              */
 80021ca:	7bbb      	ldrb	r3, [r7, #14]
 80021cc:	e004      	b.n	80021d8 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x78>
    for (i=0; i<MCP_N_TXBUFFERS; i++) {
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
 80021d0:	3301      	adds	r3, #1
 80021d2:	73fb      	strb	r3, [r7, #15]
 80021d4:	e7d9      	b.n	800218a <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh+0x2a>
        }
    }
    return res;
 80021d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	080086b8 	.word	0x080086b8

080021e4 <_ZN7MCP_CANC1Eh>:

/*********************************************************************************************************
** Function name:           set CS
** Descriptions:            init CS pin and set UNSELECTED
*********************************************************************************************************/
MCP_CAN::MCP_CAN(INT8U _CS)
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70fb      	strb	r3, [r7, #3]
{
    SPICS = _CS;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	74da      	strb	r2, [r3, #19]
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 80021f6:	2201      	movs	r2, #1
 80021f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021fc:	4806      	ldr	r0, [pc, #24]	; (8002218 <_ZN7MCP_CANC1Eh+0x34>)
 80021fe:	f001 f9fd 	bl	80035fc <HAL_GPIO_WritePin>
    MCP2515_UNSELECT();
 8002202:	2200      	movs	r2, #0
 8002204:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002208:	4803      	ldr	r0, [pc, #12]	; (8002218 <_ZN7MCP_CANC1Eh+0x34>)
 800220a:	f001 f9f7 	bl	80035fc <HAL_GPIO_WritePin>
}
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40020400 	.word	0x40020400

0800221c <_ZN7MCP_CAN6setMsgEmhhPh>:
/*********************************************************************************************************
** Function name:           setMsg
** Descriptions:            set can message, such as dlc, id, dta[] and so on
*********************************************************************************************************/
INT8U MCP_CAN::setMsg(INT32U id, INT8U ext, INT8U len, INT8U *pData)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	4611      	mov	r1, r2
 8002228:	461a      	mov	r2, r3
 800222a:	460b      	mov	r3, r1
 800222c:	71fb      	strb	r3, [r7, #7]
 800222e:	4613      	mov	r3, r2
 8002230:	71bb      	strb	r3, [r7, #6]
    int i = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
    m_nExtFlg = ext;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	79fa      	ldrb	r2, [r7, #7]
 800223a:	701a      	strb	r2, [r3, #0]
    m_nID     = id;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	605a      	str	r2, [r3, #4]
    m_nDlc    = len;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	79ba      	ldrb	r2, [r7, #6]
 8002246:	721a      	strb	r2, [r3, #8]
    for(i = 0; i<MAX_CHAR_IN_MESSAGE; i++)
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	2b07      	cmp	r3, #7
 8002250:	dc0d      	bgt.n	800226e <_ZN7MCP_CAN6setMsgEmhhPh+0x52>
    {
        m_nDta[i] = *(pData+i);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	6a3a      	ldr	r2, [r7, #32]
 8002256:	4413      	add	r3, r2
 8002258:	7819      	ldrb	r1, [r3, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	4413      	add	r3, r2
 8002260:	3309      	adds	r3, #9
 8002262:	460a      	mov	r2, r1
 8002264:	701a      	strb	r2, [r3, #0]
    for(i = 0; i<MAX_CHAR_IN_MESSAGE; i++)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3301      	adds	r3, #1
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	e7ee      	b.n	800224c <_ZN7MCP_CAN6setMsgEmhhPh+0x30>
    }
    return MCP2515_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <_ZN7MCP_CAN7sendMsgEv>:
/*********************************************************************************************************
** Function name:           sendMsg
** Descriptions:            send message
*********************************************************************************************************/
INT8U MCP_CAN::sendMsg()
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    INT8U res, res1, txbuf_n;
    uint16_t uiTimeOut = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	81fb      	strh	r3, [r7, #14]

    do {
        res = mcp2515_getNextFreeTXBuf(&txbuf_n);                       /* info = addr.                 */
 8002288:	f107 030b 	add.w	r3, r7, #11
 800228c:	4619      	mov	r1, r3
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff66 	bl	8002160 <_ZN7MCP_CAN24mcp2515_getNextFreeTXBufEPh>
 8002294:	4603      	mov	r3, r0
 8002296:	737b      	strb	r3, [r7, #13]
        uiTimeOut++;
 8002298:	89fb      	ldrh	r3, [r7, #14]
 800229a:	3301      	adds	r3, #1
 800229c:	81fb      	strh	r3, [r7, #14]
    } while (res == MCP_ALLTXBUSY && (uiTimeOut < TIMEOUTVALUE));
 800229e:	7b7b      	ldrb	r3, [r7, #13]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d103      	bne.n	80022ac <_ZN7MCP_CAN7sendMsgEv+0x30>
 80022a4:	89fb      	ldrh	r3, [r7, #14]
 80022a6:	2b31      	cmp	r3, #49	; 0x31
 80022a8:	d800      	bhi.n	80022ac <_ZN7MCP_CAN7sendMsgEv+0x30>
    do {
 80022aa:	e7ed      	b.n	8002288 <_ZN7MCP_CAN7sendMsgEv+0xc>

    if(uiTimeOut == TIMEOUTVALUE) 
 80022ac:	89fb      	ldrh	r3, [r7, #14]
 80022ae:	2b32      	cmp	r3, #50	; 0x32
 80022b0:	d101      	bne.n	80022b6 <_ZN7MCP_CAN7sendMsgEv+0x3a>
    {   
        return CAN_GETTXBFTIMEOUT;                                      /* get tx buff time out         */
 80022b2:	2306      	movs	r3, #6
 80022b4:	e026      	b.n	8002304 <_ZN7MCP_CAN7sendMsgEv+0x88>
    }
    uiTimeOut = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	81fb      	strh	r3, [r7, #14]
    mcp2515_write_canMsg( txbuf_n);
 80022ba:	7afb      	ldrb	r3, [r7, #11]
 80022bc:	4619      	mov	r1, r3
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7ff fec3 	bl	800204a <_ZN7MCP_CAN20mcp2515_write_canMsgEh>
    mcp2515_start_transmit( txbuf_n );
 80022c4:	7afb      	ldrb	r3, [r7, #11]
 80022c6:	4619      	mov	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7ff ff36 	bl	800213a <_ZN7MCP_CAN22mcp2515_start_transmitEh>
    do
    {
        uiTimeOut++;        
 80022ce:	89fb      	ldrh	r3, [r7, #14]
 80022d0:	3301      	adds	r3, #1
 80022d2:	81fb      	strh	r3, [r7, #14]
        res1= mcp2515_readRegister(txbuf_n);  			                /* read send buff ctrl reg 	*/
 80022d4:	7afb      	ldrb	r3, [r7, #11]
 80022d6:	4619      	mov	r1, r3
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff fcb5 	bl	8001c48 <_ZN7MCP_CAN20mcp2515_readRegisterEh>
 80022de:	4603      	mov	r3, r0
 80022e0:	733b      	strb	r3, [r7, #12]
        res1 = res1 & 0x08;                               		
 80022e2:	7b3b      	ldrb	r3, [r7, #12]
 80022e4:	f003 0308 	and.w	r3, r3, #8
 80022e8:	733b      	strb	r3, [r7, #12]
    }while(res1 && (uiTimeOut < TIMEOUTVALUE));   
 80022ea:	7b3b      	ldrb	r3, [r7, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <_ZN7MCP_CAN7sendMsgEv+0x7c>
 80022f0:	89fb      	ldrh	r3, [r7, #14]
 80022f2:	2b31      	cmp	r3, #49	; 0x31
 80022f4:	d800      	bhi.n	80022f8 <_ZN7MCP_CAN7sendMsgEv+0x7c>
    do
 80022f6:	e7ea      	b.n	80022ce <_ZN7MCP_CAN7sendMsgEv+0x52>
    if(uiTimeOut == TIMEOUTVALUE)                                       /* send msg timeout             */	
 80022f8:	89fb      	ldrh	r3, [r7, #14]
 80022fa:	2b32      	cmp	r3, #50	; 0x32
 80022fc:	d101      	bne.n	8002302 <_ZN7MCP_CAN7sendMsgEv+0x86>
    {
        return CAN_SENDMSGTIMEOUT;
 80022fe:	2307      	movs	r3, #7
 8002300:	e000      	b.n	8002304 <_ZN7MCP_CAN7sendMsgEv+0x88>
    }
    return CAN_OK;
 8002302:	2300      	movs	r3, #0

}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <_ZN7MCP_CAN10sendMsgBufEmhhPh>:
/*********************************************************************************************************
** Function name:           sendMsgBuf
** Descriptions:            send buf
*********************************************************************************************************/
INT8U MCP_CAN::sendMsgBuf(INT32U id, INT8U ext, INT8U len, INT8U *buf)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af02      	add	r7, sp, #8
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	4611      	mov	r1, r2
 8002318:	461a      	mov	r2, r3
 800231a:	460b      	mov	r3, r1
 800231c:	71fb      	strb	r3, [r7, #7]
 800231e:	4613      	mov	r3, r2
 8002320:	71bb      	strb	r3, [r7, #6]
    setMsg(id, ext, len, buf);
 8002322:	79b9      	ldrb	r1, [r7, #6]
 8002324:	79fa      	ldrb	r2, [r7, #7]
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	460b      	mov	r3, r1
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f7ff ff74 	bl	800221c <_ZN7MCP_CAN6setMsgEmhhPh>
    sendMsg();
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f7ff ffa1 	bl	800227c <_ZN7MCP_CAN7sendMsgEv>
}
 800233a:	bf00      	nop
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <_ZN7MCP_CAN7readMsgEv>:
/*********************************************************************************************************
** Function name:           readMsg
** Descriptions:            read message
*********************************************************************************************************/
INT8U MCP_CAN::readMsg()
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
    INT8U stat, res;

    stat = mcp2515_readStatus();
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff fdc3 	bl	8001ed8 <_ZN7MCP_CAN18mcp2515_readStatusEv>
 8002352:	4603      	mov	r3, r0
 8002354:	73bb      	strb	r3, [r7, #14]

    if ( stat & MCP_STAT_RX0IF )                                        /* Msg in Buffer 0              */
 8002356:	7bbb      	ldrb	r3, [r7, #14]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00c      	beq.n	800237a <_ZN7MCP_CAN7readMsgEv+0x36>
    {
        mcp2515_read_canMsg( MCP_RXBUF_0);
 8002360:	2161      	movs	r1, #97	; 0x61
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff fea4 	bl	80020b0 <_ZN7MCP_CAN19mcp2515_read_canMsgEh>
        mcp2515_modifyRegister(MCP_CANINTF, MCP_RX0IF, 0);
 8002368:	2300      	movs	r3, #0
 800236a:	2201      	movs	r2, #1
 800236c:	212c      	movs	r1, #44	; 0x2c
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff fd6c 	bl	8001e4c <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
        res = CAN_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]
 8002378:	e013      	b.n	80023a2 <_ZN7MCP_CAN7readMsgEv+0x5e>
    }
    else if ( stat & MCP_STAT_RX1IF )                                   /* Msg in Buffer 1              */
 800237a:	7bbb      	ldrb	r3, [r7, #14]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00c      	beq.n	800239e <_ZN7MCP_CAN7readMsgEv+0x5a>
    {
        mcp2515_read_canMsg( MCP_RXBUF_1);
 8002384:	2171      	movs	r1, #113	; 0x71
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff fe92 	bl	80020b0 <_ZN7MCP_CAN19mcp2515_read_canMsgEh>
        mcp2515_modifyRegister(MCP_CANINTF, MCP_RX1IF, 0);
 800238c:	2300      	movs	r3, #0
 800238e:	2202      	movs	r2, #2
 8002390:	212c      	movs	r1, #44	; 0x2c
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff fd5a 	bl	8001e4c <_ZN7MCP_CAN22mcp2515_modifyRegisterEhhh>
        res = CAN_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	e001      	b.n	80023a2 <_ZN7MCP_CAN7readMsgEv+0x5e>
    }
    else 
    {
        res = CAN_NOMSG;
 800239e:	2304      	movs	r3, #4
 80023a0:	73fb      	strb	r3, [r7, #15]
    }
    return res;
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <_ZN7MCP_CAN10readMsgBufEPhS0_>:
/*********************************************************************************************************
** Function name:           readMsgBuf
** Descriptions:            read message buf
*********************************************************************************************************/
INT8U MCP_CAN::readMsgBuf(INT8U *len, INT8U buf[])
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
    INT8U  rc;
    
    rc = readMsg();
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f7ff ffc3 	bl	8002344 <_ZN7MCP_CAN7readMsgEv>
 80023be:	4603      	mov	r3, r0
 80023c0:	74fb      	strb	r3, [r7, #19]
    
    if (rc == CAN_OK) {
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d118      	bne.n	80023fa <_ZN7MCP_CAN10readMsgBufEPhS0_+0x4e>
       *len = m_nDlc;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	7a1a      	ldrb	r2, [r3, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	701a      	strb	r2, [r3, #0]
       for(int i = 0; i<m_nDlc; i++) {
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	7a1b      	ldrb	r3, [r3, #8]
 80023d8:	461a      	mov	r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	4293      	cmp	r3, r2
 80023de:	da0f      	bge.n	8002400 <_ZN7MCP_CAN10readMsgBufEPhS0_+0x54>
         buf[i] = m_nDta[i];
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	68f9      	ldr	r1, [r7, #12]
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	440a      	add	r2, r1
 80023ec:	3209      	adds	r2, #9
 80023ee:	7812      	ldrb	r2, [r2, #0]
 80023f0:	701a      	strb	r2, [r3, #0]
       for(int i = 0; i<m_nDlc; i++) {
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3301      	adds	r3, #1
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	e7ec      	b.n	80023d4 <_ZN7MCP_CAN10readMsgBufEPhS0_+0x28>
       } 
    } else {
       	 *len = 0;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
    }
    return rc;
 8002400:	7cfb      	ldrb	r3, [r7, #19]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <_ZN7MCP_CAN12checkReceiveEv>:
/*********************************************************************************************************
** Function name:           checkReceive
** Descriptions:            check if got something
*********************************************************************************************************/
INT8U MCP_CAN::checkReceive(void)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b084      	sub	sp, #16
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
    INT8U res;
    res = mcp2515_readStatus();                                         /* RXnIF in Bit 1 and 0         */
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff fd60 	bl	8001ed8 <_ZN7MCP_CAN18mcp2515_readStatusEv>
 8002418:	4603      	mov	r3, r0
 800241a:	73fb      	strb	r3, [r7, #15]
    if ( res & MCP_STAT_RXIF_MASK ) 
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <_ZN7MCP_CAN12checkReceiveEv+0x20>
    {
        return CAN_MSGAVAIL;
 8002426:	2303      	movs	r3, #3
 8002428:	e000      	b.n	800242c <_ZN7MCP_CAN12checkReceiveEv+0x22>
    }
    else 
    {
        return CAN_NOMSG;
 800242a:	2304      	movs	r3, #4
    }
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <_ZN7MCP_CAN8getCanIdEv>:
/*********************************************************************************************************
** Function name:           getCanId
** Descriptions:            when receive something ,u can get the can id!!
*********************************************************************************************************/
INT32U MCP_CAN::getCanId(void)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
    return m_nID;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
} 
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002452:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <MX_SPI2_Init+0x68>)
 8002454:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002458:	f44f 7282 	mov.w	r2, #260	; 0x104
 800245c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800245e:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002460:	2200      	movs	r2, #0
 8002462:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800246a:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <MX_SPI2_Init+0x64>)
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002470:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002472:	2200      	movs	r2, #0
 8002474:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002476:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800247c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002480:	2218      	movs	r2, #24
 8002482:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002484:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002486:	2200      	movs	r2, #0
 8002488:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <MX_SPI2_Init+0x64>)
 800248c:	2200      	movs	r2, #0
 800248e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002492:	2200      	movs	r2, #0
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <MX_SPI2_Init+0x64>)
 8002498:	220a      	movs	r2, #10
 800249a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800249c:	4804      	ldr	r0, [pc, #16]	; (80024b0 <MX_SPI2_Init+0x64>)
 800249e:	f001 ff13 	bl	80042c8 <HAL_SPI_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80024a8:	f7ff fba8 	bl	8001bfc <Error_Handler>
  }

}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000224 	.word	0x20000224
 80024b4:	40003800 	.word	0x40003800

080024b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a1d      	ldr	r2, [pc, #116]	; (800254c <HAL_SPI_MspInit+0x94>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d134      	bne.n	8002544 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <HAL_SPI_MspInit+0x98>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	4a1b      	ldr	r2, [pc, #108]	; (8002550 <HAL_SPI_MspInit+0x98>)
 80024e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ea:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_SPI_MspInit+0x98>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <HAL_SPI_MspInit+0x98>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a14      	ldr	r2, [pc, #80]	; (8002550 <HAL_SPI_MspInit+0x98>)
 8002500:	f043 0302 	orr.w	r3, r3, #2
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_SPI_MspInit+0x98>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002512:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002520:	2303      	movs	r3, #3
 8002522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002524:	2305      	movs	r3, #5
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	4619      	mov	r1, r3
 800252e:	4809      	ldr	r0, [pc, #36]	; (8002554 <HAL_SPI_MspInit+0x9c>)
 8002530:	f000 fed2 	bl	80032d8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002534:	2200      	movs	r2, #0
 8002536:	2100      	movs	r1, #0
 8002538:	2024      	movs	r0, #36	; 0x24
 800253a:	f000 fe74 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800253e:	2024      	movs	r0, #36	; 0x24
 8002540:	f000 fe8d 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002544:	bf00      	nop
 8002546:	3728      	adds	r7, #40	; 0x28
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40003800 	.word	0x40003800
 8002550:	40023800 	.word	0x40023800
 8002554:	40020400 	.word	0x40020400

08002558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <HAL_MspInit+0x4c>)
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	4a0f      	ldr	r2, [pc, #60]	; (80025a4 <HAL_MspInit+0x4c>)
 8002568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800256c:	6453      	str	r3, [r2, #68]	; 0x44
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <HAL_MspInit+0x4c>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002576:	607b      	str	r3, [r7, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	603b      	str	r3, [r7, #0]
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_MspInit+0x4c>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <HAL_MspInit+0x4c>)
 8002584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_MspInit+0x4c>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002596:	2007      	movs	r0, #7
 8002598:	f000 fe3a 	bl	8003210 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40023800 	.word	0x40023800

080025a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ba:	e7fe      	b.n	80025ba <HardFault_Handler+0x4>

080025bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <MemManage_Handler+0x4>

080025c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025c6:	e7fe      	b.n	80025c6 <BusFault_Handler+0x4>

080025c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <UsageFault_Handler+0x4>

080025ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025fc:	f000 f9c8 	bl	8002990 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}

08002604 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <CAN1_RX0_IRQHandler+0x10>)
 800260a:	f000 fafe 	bl	8002c0a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	200002a8 	.word	0x200002a8

08002618 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800261c:	4802      	ldr	r0, [pc, #8]	; (8002628 <SPI2_IRQHandler+0x10>)
 800261e:	f002 fa97 	bl	8004b50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000224 	.word	0x20000224

0800262c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002630:	4802      	ldr	r0, [pc, #8]	; (800263c <USART2_IRQHandler+0x10>)
 8002632:	f002 fdb1 	bl	8005198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000324 	.word	0x20000324

08002640 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	e00a      	b.n	8002668 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002652:	f3af 8000 	nop.w
 8002656:	4601      	mov	r1, r0
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	60ba      	str	r2, [r7, #8]
 800265e:	b2ca      	uxtb	r2, r1
 8002660:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	3301      	adds	r3, #1
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	429a      	cmp	r2, r3
 800266e:	dbf0      	blt.n	8002652 <_read+0x12>
	}

return len;
 8002670:	687b      	ldr	r3, [r7, #4]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <_close>:
	}
	return len;
}

int _close(int file)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
	return -1;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026a2:	605a      	str	r2, [r3, #4]
	return 0;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <_isatty>:

int _isatty(int file)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
	return 1;
 80026ba:	2301      	movs	r3, #1
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
	return 0;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026ec:	4a14      	ldr	r2, [pc, #80]	; (8002740 <_sbrk+0x5c>)
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <_sbrk+0x60>)
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026f8:	4b13      	ldr	r3, [pc, #76]	; (8002748 <_sbrk+0x64>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d102      	bne.n	8002706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <_sbrk+0x64>)
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <_sbrk+0x68>)
 8002704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <_sbrk+0x64>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	429a      	cmp	r2, r3
 8002712:	d207      	bcs.n	8002724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002714:	f003 fb46 	bl	8005da4 <__errno>
 8002718:	4602      	mov	r2, r0
 800271a:	230c      	movs	r3, #12
 800271c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800271e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002722:	e009      	b.n	8002738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <_sbrk+0x64>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800272a:	4b07      	ldr	r3, [pc, #28]	; (8002748 <_sbrk+0x64>)
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	4a05      	ldr	r2, [pc, #20]	; (8002748 <_sbrk+0x64>)
 8002734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	20020000 	.word	0x20020000
 8002744:	00000400 	.word	0x00000400
 8002748:	2000029c 	.word	0x2000029c
 800274c:	20000370 	.word	0x20000370

08002750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <SystemInit+0x28>)
 8002756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275a:	4a07      	ldr	r2, [pc, #28]	; (8002778 <SystemInit+0x28>)
 800275c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <SystemInit+0x28>)
 8002766:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800276a:	609a      	str	r2, [r3, #8]
#endif
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <MX_USART2_UART_Init+0x4c>)
 8002782:	4a12      	ldr	r2, [pc, #72]	; (80027cc <MX_USART2_UART_Init+0x50>)
 8002784:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <MX_USART2_UART_Init+0x4c>)
 8002788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800278c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <MX_USART2_UART_Init+0x4c>)
 8002790:	2200      	movs	r2, #0
 8002792:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002794:	4b0c      	ldr	r3, [pc, #48]	; (80027c8 <MX_USART2_UART_Init+0x4c>)
 8002796:	2200      	movs	r2, #0
 8002798:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800279a:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <MX_USART2_UART_Init+0x4c>)
 800279c:	2200      	movs	r2, #0
 800279e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027a0:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <MX_USART2_UART_Init+0x4c>)
 80027a2:	220c      	movs	r2, #12
 80027a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027a6:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <MX_USART2_UART_Init+0x4c>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <MX_USART2_UART_Init+0x4c>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80027b2:	4805      	ldr	r0, [pc, #20]	; (80027c8 <MX_USART2_UART_Init+0x4c>)
 80027b4:	f002 fc0a 	bl	8004fcc <HAL_UART_Init>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80027be:	f7ff fa1d 	bl	8001bfc <Error_Handler>
  }

}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000324 	.word	0x20000324
 80027cc:	40004400 	.word	0x40004400

080027d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08a      	sub	sp, #40	; 0x28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1d      	ldr	r2, [pc, #116]	; (8002864 <HAL_UART_MspInit+0x94>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d133      	bne.n	800285a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	4b1c      	ldr	r3, [pc, #112]	; (8002868 <HAL_UART_MspInit+0x98>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	4a1b      	ldr	r2, [pc, #108]	; (8002868 <HAL_UART_MspInit+0x98>)
 80027fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002800:	6413      	str	r3, [r2, #64]	; 0x40
 8002802:	4b19      	ldr	r3, [pc, #100]	; (8002868 <HAL_UART_MspInit+0x98>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_UART_MspInit+0x98>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a14      	ldr	r2, [pc, #80]	; (8002868 <HAL_UART_MspInit+0x98>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_UART_MspInit+0x98>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800282a:	230c      	movs	r3, #12
 800282c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282e:	2302      	movs	r3, #2
 8002830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002836:	2303      	movs	r3, #3
 8002838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800283a:	2307      	movs	r3, #7
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	4619      	mov	r1, r3
 8002844:	4809      	ldr	r0, [pc, #36]	; (800286c <HAL_UART_MspInit+0x9c>)
 8002846:	f000 fd47 	bl	80032d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	2100      	movs	r1, #0
 800284e:	2026      	movs	r0, #38	; 0x26
 8002850:	f000 fce9 	bl	8003226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002854:	2026      	movs	r0, #38	; 0x26
 8002856:	f000 fd02 	bl	800325e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800285a:	bf00      	nop
 800285c:	3728      	adds	r7, #40	; 0x28
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40004400 	.word	0x40004400
 8002868:	40023800 	.word	0x40023800
 800286c:	40020000 	.word	0x40020000

08002870 <_write>:
  }
}

/* USER CODE BEGIN 1 */
void _write(int file, char *ptr, int len)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)ptr,len,500);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	b29a      	uxth	r2, r3
 8002880:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002884:	68b9      	ldr	r1, [r7, #8]
 8002886:	4803      	ldr	r0, [pc, #12]	; (8002894 <_write+0x24>)
 8002888:	f002 fbed 	bl	8005066 <HAL_UART_Transmit>

}
 800288c:	bf00      	nop
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000324 	.word	0x20000324

08002898 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002898:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800289c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800289e:	e003      	b.n	80028a8 <LoopCopyDataInit>

080028a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80028a0:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80028a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80028a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80028a6:	3104      	adds	r1, #4

080028a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80028a8:	480b      	ldr	r0, [pc, #44]	; (80028d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80028aa:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80028ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80028ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80028b0:	d3f6      	bcc.n	80028a0 <CopyDataInit>
  ldr  r2, =_sbss
 80028b2:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80028b4:	e002      	b.n	80028bc <LoopFillZerobss>

080028b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80028b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80028b8:	f842 3b04 	str.w	r3, [r2], #4

080028bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80028be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80028c0:	d3f9      	bcc.n	80028b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028c2:	f7ff ff45 	bl	8002750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028c6:	f003 fa73 	bl	8005db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028ca:	f7ff f8eb 	bl	8001aa4 <main>
  bx  lr    
 80028ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80028d4:	080089b4 	.word	0x080089b4
  ldr  r0, =_sdata
 80028d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80028dc:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80028e0:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80028e4:	2000036c 	.word	0x2000036c

080028e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028e8:	e7fe      	b.n	80028e8 <ADC_IRQHandler>
	...

080028ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028f0:	4b0e      	ldr	r3, [pc, #56]	; (800292c <HAL_Init+0x40>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0d      	ldr	r2, [pc, #52]	; (800292c <HAL_Init+0x40>)
 80028f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <HAL_Init+0x40>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a0a      	ldr	r2, [pc, #40]	; (800292c <HAL_Init+0x40>)
 8002902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002906:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <HAL_Init+0x40>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a07      	ldr	r2, [pc, #28]	; (800292c <HAL_Init+0x40>)
 800290e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002912:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002914:	2003      	movs	r0, #3
 8002916:	f000 fc7b 	bl	8003210 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800291a:	2000      	movs	r0, #0
 800291c:	f000 f808 	bl	8002930 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002920:	f7ff fe1a 	bl	8002558 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40023c00 	.word	0x40023c00

08002930 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002938:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_InitTick+0x54>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_InitTick+0x58>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	4619      	mov	r1, r3
 8002942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002946:	fbb3 f3f1 	udiv	r3, r3, r1
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fc93 	bl	800327a <HAL_SYSTICK_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e00e      	b.n	800297c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b0f      	cmp	r3, #15
 8002962:	d80a      	bhi.n	800297a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002964:	2200      	movs	r2, #0
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800296c:	f000 fc5b 	bl	8003226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002970:	4a06      	ldr	r2, [pc, #24]	; (800298c <HAL_InitTick+0x5c>)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20000000 	.word	0x20000000
 8002988:	20000008 	.word	0x20000008
 800298c:	20000004 	.word	0x20000004

08002990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <HAL_IncTick+0x20>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_IncTick+0x24>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4413      	add	r3, r2
 80029a0:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <HAL_IncTick+0x24>)
 80029a2:	6013      	str	r3, [r2, #0]
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	20000008 	.word	0x20000008
 80029b4:	20000364 	.word	0x20000364

080029b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return uwTick;
 80029bc:	4b03      	ldr	r3, [pc, #12]	; (80029cc <HAL_GetTick+0x14>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000364 	.word	0x20000364

080029d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d8:	f7ff ffee 	bl	80029b8 <HAL_GetTick>
 80029dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029e8:	d005      	beq.n	80029f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_Delay+0x40>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4413      	add	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029f6:	bf00      	nop
 80029f8:	f7ff ffde 	bl	80029b8 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d8f7      	bhi.n	80029f8 <HAL_Delay+0x28>
  {
  }
}
 8002a08:	bf00      	nop
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	20000008 	.word	0x20000008

08002a14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e0ed      	b.n	8002c02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d102      	bne.n	8002a38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fe fefe 	bl	8001834 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0202 	bic.w	r2, r2, #2
 8002a46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a48:	f7ff ffb6 	bl	80029b8 <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a4e:	e012      	b.n	8002a76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a50:	f7ff ffb2 	bl	80029b8 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b0a      	cmp	r3, #10
 8002a5c:	d90b      	bls.n	8002a76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2205      	movs	r2, #5
 8002a6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0c5      	b.n	8002c02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e5      	bne.n	8002a50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a94:	f7ff ff90 	bl	80029b8 <HAL_GetTick>
 8002a98:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a9a:	e012      	b.n	8002ac2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a9c:	f7ff ff8c 	bl	80029b8 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b0a      	cmp	r3, #10
 8002aa8:	d90b      	bls.n	8002ac2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2205      	movs	r2, #5
 8002aba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e09f      	b.n	8002c02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0e5      	beq.n	8002a9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	7e1b      	ldrb	r3, [r3, #24]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d108      	bne.n	8002aea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	e007      	b.n	8002afa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002af8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	7e5b      	ldrb	r3, [r3, #25]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d108      	bne.n	8002b14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e007      	b.n	8002b24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	7e9b      	ldrb	r3, [r3, #26]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d108      	bne.n	8002b3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0220 	orr.w	r2, r2, #32
 8002b3a:	601a      	str	r2, [r3, #0]
 8002b3c:	e007      	b.n	8002b4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0220 	bic.w	r2, r2, #32
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	7edb      	ldrb	r3, [r3, #27]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d108      	bne.n	8002b68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0210 	bic.w	r2, r2, #16
 8002b64:	601a      	str	r2, [r3, #0]
 8002b66:	e007      	b.n	8002b78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0210 	orr.w	r2, r2, #16
 8002b76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	7f1b      	ldrb	r3, [r3, #28]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d108      	bne.n	8002b92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0208 	orr.w	r2, r2, #8
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	e007      	b.n	8002ba2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0208 	bic.w	r2, r2, #8
 8002ba0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	7f5b      	ldrb	r3, [r3, #29]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d108      	bne.n	8002bbc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0204 	orr.w	r2, r2, #4
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	e007      	b.n	8002bcc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0204 	bic.w	r2, r2, #4
 8002bca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	ea42 0103 	orr.w	r1, r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	1e5a      	subs	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b08a      	sub	sp, #40	; 0x28
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d07c      	beq.n	8002d4a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d023      	beq.n	8002ca2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 f97d 	bl	8002f6c <HAL_CAN_TxMailbox0CompleteCallback>
 8002c72:	e016      	b.n	8002ca2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	f003 0304 	and.w	r3, r3, #4
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
 8002c86:	e00c      	b.n	8002ca2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d004      	beq.n	8002c9c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9a:	e002      	b.n	8002ca2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f983 	bl	8002fa8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d024      	beq.n	8002cf6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cb4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f95d 	bl	8002f80 <HAL_CAN_TxMailbox1CompleteCallback>
 8002cc6:	e016      	b.n	8002cf6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d004      	beq.n	8002cdc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cda:	e00c      	b.n	8002cf6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d004      	beq.n	8002cf0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cec:	627b      	str	r3, [r7, #36]	; 0x24
 8002cee:	e002      	b.n	8002cf6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f963 	bl	8002fbc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d024      	beq.n	8002d4a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 f93d 	bl	8002f94 <HAL_CAN_TxMailbox2CompleteCallback>
 8002d1a:	e016      	b.n	8002d4a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d004      	beq.n	8002d30 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2e:	e00c      	b.n	8002d4a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d004      	beq.n	8002d44 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
 8002d42:	e002      	b.n	8002d4a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f943 	bl	8002fd0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00c      	beq.n	8002d6e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d007      	beq.n	8002d6e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2210      	movs	r2, #16
 8002d6c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00b      	beq.n	8002d90 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f003 0308 	and.w	r3, r3, #8
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2208      	movs	r2, #8
 8002d88:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f934 	bl	8002ff8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d009      	beq.n	8002dae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d002      	beq.n	8002dae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f91b 	bl	8002fe4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00c      	beq.n	8002dd2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d007      	beq.n	8002dd2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dc8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2210      	movs	r2, #16
 8002dd0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00b      	beq.n	8002df4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d006      	beq.n	8002df4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2208      	movs	r2, #8
 8002dec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f916 	bl	8003020 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f8fd 	bl	800300c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00b      	beq.n	8002e34 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d006      	beq.n	8002e34 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2210      	movs	r2, #16
 8002e2c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f900 	bl	8003034 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00b      	beq.n	8002e56 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d006      	beq.n	8002e56 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f8f9 	bl	8003048 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d075      	beq.n	8002f4c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d06c      	beq.n	8002f44 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	f043 0301 	orr.w	r3, r3, #1
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	f043 0302 	orr.w	r3, r3, #2
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	f043 0304 	orr.w	r3, r3, #4
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d03d      	beq.n	8002f44 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d038      	beq.n	8002f44 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ed8:	2b30      	cmp	r3, #48	; 0x30
 8002eda:	d017      	beq.n	8002f0c <HAL_CAN_IRQHandler+0x302>
 8002edc:	2b30      	cmp	r3, #48	; 0x30
 8002ede:	d804      	bhi.n	8002eea <HAL_CAN_IRQHandler+0x2e0>
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d009      	beq.n	8002ef8 <HAL_CAN_IRQHandler+0x2ee>
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	d00c      	beq.n	8002f02 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ee8:	e024      	b.n	8002f34 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002eea:	2b50      	cmp	r3, #80	; 0x50
 8002eec:	d018      	beq.n	8002f20 <HAL_CAN_IRQHandler+0x316>
 8002eee:	2b60      	cmp	r3, #96	; 0x60
 8002ef0:	d01b      	beq.n	8002f2a <HAL_CAN_IRQHandler+0x320>
 8002ef2:	2b40      	cmp	r3, #64	; 0x40
 8002ef4:	d00f      	beq.n	8002f16 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002ef6:	e01d      	b.n	8002f34 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	f043 0308 	orr.w	r3, r3, #8
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f00:	e018      	b.n	8002f34 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	f043 0310 	orr.w	r3, r3, #16
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f0a:	e013      	b.n	8002f34 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0e:	f043 0320 	orr.w	r3, r3, #32
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f14:	e00e      	b.n	8002f34 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f1e:	e009      	b.n	8002f34 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f28:	e004      	b.n	8002f34 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f32:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f42:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2204      	movs	r2, #4
 8002f4a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f87c 	bl	800305c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f64:	bf00      	nop
 8002f66:	3728      	adds	r7, #40	; 0x28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f88:	bf00      	nop
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003080:	4b0c      	ldr	r3, [pc, #48]	; (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800308c:	4013      	ands	r3, r2
 800308e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800309c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030a2:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <__NVIC_SetPriorityGrouping+0x44>)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	60d3      	str	r3, [r2, #12]
}
 80030a8:	bf00      	nop
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000ed00 	.word	0xe000ed00

080030b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030bc:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <__NVIC_GetPriorityGrouping+0x18>)
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	0a1b      	lsrs	r3, r3, #8
 80030c2:	f003 0307 	and.w	r3, r3, #7
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	db0b      	blt.n	80030fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	4907      	ldr	r1, [pc, #28]	; (800310c <__NVIC_EnableIRQ+0x38>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2001      	movs	r0, #1
 80030f6:	fa00 f202 	lsl.w	r2, r0, r2
 80030fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000e100 	.word	0xe000e100

08003110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	6039      	str	r1, [r7, #0]
 800311a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800311c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003120:	2b00      	cmp	r3, #0
 8003122:	db0a      	blt.n	800313a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	b2da      	uxtb	r2, r3
 8003128:	490c      	ldr	r1, [pc, #48]	; (800315c <__NVIC_SetPriority+0x4c>)
 800312a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312e:	0112      	lsls	r2, r2, #4
 8003130:	b2d2      	uxtb	r2, r2
 8003132:	440b      	add	r3, r1
 8003134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003138:	e00a      	b.n	8003150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4908      	ldr	r1, [pc, #32]	; (8003160 <__NVIC_SetPriority+0x50>)
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	3b04      	subs	r3, #4
 8003148:	0112      	lsls	r2, r2, #4
 800314a:	b2d2      	uxtb	r2, r2
 800314c:	440b      	add	r3, r1
 800314e:	761a      	strb	r2, [r3, #24]
}
 8003150:	bf00      	nop
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000e100 	.word	0xe000e100
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f1c3 0307 	rsb	r3, r3, #7
 800317e:	2b04      	cmp	r3, #4
 8003180:	bf28      	it	cs
 8003182:	2304      	movcs	r3, #4
 8003184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3304      	adds	r3, #4
 800318a:	2b06      	cmp	r3, #6
 800318c:	d902      	bls.n	8003194 <NVIC_EncodePriority+0x30>
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3b03      	subs	r3, #3
 8003192:	e000      	b.n	8003196 <NVIC_EncodePriority+0x32>
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	401a      	ands	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	43d9      	mvns	r1, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	4313      	orrs	r3, r2
         );
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3724      	adds	r7, #36	; 0x24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031dc:	d301      	bcc.n	80031e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031de:	2301      	movs	r3, #1
 80031e0:	e00f      	b.n	8003202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031e2:	4a0a      	ldr	r2, [pc, #40]	; (800320c <SysTick_Config+0x40>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3b01      	subs	r3, #1
 80031e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ea:	210f      	movs	r1, #15
 80031ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031f0:	f7ff ff8e 	bl	8003110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031f4:	4b05      	ldr	r3, [pc, #20]	; (800320c <SysTick_Config+0x40>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031fa:	4b04      	ldr	r3, [pc, #16]	; (800320c <SysTick_Config+0x40>)
 80031fc:	2207      	movs	r2, #7
 80031fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	e000e010 	.word	0xe000e010

08003210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff ff29 	bl	8003070 <__NVIC_SetPriorityGrouping>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003226:	b580      	push	{r7, lr}
 8003228:	b086      	sub	sp, #24
 800322a:	af00      	add	r7, sp, #0
 800322c:	4603      	mov	r3, r0
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003238:	f7ff ff3e 	bl	80030b8 <__NVIC_GetPriorityGrouping>
 800323c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	6978      	ldr	r0, [r7, #20]
 8003244:	f7ff ff8e 	bl	8003164 <NVIC_EncodePriority>
 8003248:	4602      	mov	r2, r0
 800324a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ff5d 	bl	8003110 <__NVIC_SetPriority>
}
 8003256:	bf00      	nop
 8003258:	3718      	adds	r7, #24
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	4603      	mov	r3, r0
 8003266:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326c:	4618      	mov	r0, r3
 800326e:	f7ff ff31 	bl	80030d4 <__NVIC_EnableIRQ>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b082      	sub	sp, #8
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff ffa2 	bl	80031cc <SysTick_Config>
 8003288:	4603      	mov	r3, r0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d004      	beq.n	80032b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2280      	movs	r2, #128	; 0x80
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e00c      	b.n	80032ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2205      	movs	r2, #5
 80032b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0201 	bic.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
	...

080032d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	; 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	e165      	b.n	80035c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032f4:	2201      	movs	r2, #1
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	429a      	cmp	r2, r3
 800330e:	f040 8154 	bne.w	80035ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d00b      	beq.n	8003332 <HAL_GPIO_Init+0x5a>
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d007      	beq.n	8003332 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003326:	2b11      	cmp	r3, #17
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b12      	cmp	r3, #18
 8003330:	d130      	bne.n	8003394 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	2203      	movs	r2, #3
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	43db      	mvns	r3, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4013      	ands	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003368:	2201      	movs	r2, #1
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 0201 	and.w	r2, r3, #1
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4313      	orrs	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	2203      	movs	r2, #3
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43db      	mvns	r3, r3
 80033a6:	69ba      	ldr	r2, [r7, #24]
 80033a8:	4013      	ands	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d003      	beq.n	80033d4 <HAL_GPIO_Init+0xfc>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b12      	cmp	r3, #18
 80033d2:	d123      	bne.n	800341c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	08da      	lsrs	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3208      	adds	r2, #8
 80033dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	220f      	movs	r2, #15
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	08da      	lsrs	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3208      	adds	r2, #8
 8003416:	69b9      	ldr	r1, [r7, #24]
 8003418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2203      	movs	r2, #3
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0203 	and.w	r2, r3, #3
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80ae 	beq.w	80035ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	4b5c      	ldr	r3, [pc, #368]	; (80035d4 <HAL_GPIO_Init+0x2fc>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	4a5b      	ldr	r2, [pc, #364]	; (80035d4 <HAL_GPIO_Init+0x2fc>)
 8003468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800346c:	6453      	str	r3, [r2, #68]	; 0x44
 800346e:	4b59      	ldr	r3, [pc, #356]	; (80035d4 <HAL_GPIO_Init+0x2fc>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800347a:	4a57      	ldr	r2, [pc, #348]	; (80035d8 <HAL_GPIO_Init+0x300>)
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	3302      	adds	r3, #2
 8003482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	220f      	movs	r2, #15
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a4e      	ldr	r2, [pc, #312]	; (80035dc <HAL_GPIO_Init+0x304>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d025      	beq.n	80034f2 <HAL_GPIO_Init+0x21a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a4d      	ldr	r2, [pc, #308]	; (80035e0 <HAL_GPIO_Init+0x308>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01f      	beq.n	80034ee <HAL_GPIO_Init+0x216>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a4c      	ldr	r2, [pc, #304]	; (80035e4 <HAL_GPIO_Init+0x30c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d019      	beq.n	80034ea <HAL_GPIO_Init+0x212>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a4b      	ldr	r2, [pc, #300]	; (80035e8 <HAL_GPIO_Init+0x310>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d013      	beq.n	80034e6 <HAL_GPIO_Init+0x20e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a4a      	ldr	r2, [pc, #296]	; (80035ec <HAL_GPIO_Init+0x314>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00d      	beq.n	80034e2 <HAL_GPIO_Init+0x20a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a49      	ldr	r2, [pc, #292]	; (80035f0 <HAL_GPIO_Init+0x318>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d007      	beq.n	80034de <HAL_GPIO_Init+0x206>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a48      	ldr	r2, [pc, #288]	; (80035f4 <HAL_GPIO_Init+0x31c>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d101      	bne.n	80034da <HAL_GPIO_Init+0x202>
 80034d6:	2306      	movs	r3, #6
 80034d8:	e00c      	b.n	80034f4 <HAL_GPIO_Init+0x21c>
 80034da:	2307      	movs	r3, #7
 80034dc:	e00a      	b.n	80034f4 <HAL_GPIO_Init+0x21c>
 80034de:	2305      	movs	r3, #5
 80034e0:	e008      	b.n	80034f4 <HAL_GPIO_Init+0x21c>
 80034e2:	2304      	movs	r3, #4
 80034e4:	e006      	b.n	80034f4 <HAL_GPIO_Init+0x21c>
 80034e6:	2303      	movs	r3, #3
 80034e8:	e004      	b.n	80034f4 <HAL_GPIO_Init+0x21c>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e002      	b.n	80034f4 <HAL_GPIO_Init+0x21c>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_GPIO_Init+0x21c>
 80034f2:	2300      	movs	r3, #0
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	f002 0203 	and.w	r2, r2, #3
 80034fa:	0092      	lsls	r2, r2, #2
 80034fc:	4093      	lsls	r3, r2
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003504:	4934      	ldr	r1, [pc, #208]	; (80035d8 <HAL_GPIO_Init+0x300>)
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	089b      	lsrs	r3, r3, #2
 800350a:	3302      	adds	r3, #2
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003512:	4b39      	ldr	r3, [pc, #228]	; (80035f8 <HAL_GPIO_Init+0x320>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	43db      	mvns	r3, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4013      	ands	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003536:	4a30      	ldr	r2, [pc, #192]	; (80035f8 <HAL_GPIO_Init+0x320>)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800353c:	4b2e      	ldr	r3, [pc, #184]	; (80035f8 <HAL_GPIO_Init+0x320>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003560:	4a25      	ldr	r2, [pc, #148]	; (80035f8 <HAL_GPIO_Init+0x320>)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003566:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <HAL_GPIO_Init+0x320>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	43db      	mvns	r3, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4013      	ands	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800358a:	4a1b      	ldr	r2, [pc, #108]	; (80035f8 <HAL_GPIO_Init+0x320>)
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003590:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <HAL_GPIO_Init+0x320>)
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035b4:	4a10      	ldr	r2, [pc, #64]	; (80035f8 <HAL_GPIO_Init+0x320>)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3301      	adds	r3, #1
 80035be:	61fb      	str	r3, [r7, #28]
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	2b0f      	cmp	r3, #15
 80035c4:	f67f ae96 	bls.w	80032f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035c8:	bf00      	nop
 80035ca:	3724      	adds	r7, #36	; 0x24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40013800 	.word	0x40013800
 80035dc:	40020000 	.word	0x40020000
 80035e0:	40020400 	.word	0x40020400
 80035e4:	40020800 	.word	0x40020800
 80035e8:	40020c00 	.word	0x40020c00
 80035ec:	40021000 	.word	0x40021000
 80035f0:	40021400 	.word	0x40021400
 80035f4:	40021800 	.word	0x40021800
 80035f8:	40013c00 	.word	0x40013c00

080035fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
 8003608:	4613      	mov	r3, r2
 800360a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800360c:	787b      	ldrb	r3, [r7, #1]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003612:	887a      	ldrh	r2, [r7, #2]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003618:	e003      	b.n	8003622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800361a:	887b      	ldrh	r3, [r7, #2]
 800361c:	041a      	lsls	r2, r3, #16
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	619a      	str	r2, [r3, #24]
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e11f      	b.n	8003882 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d106      	bne.n	800365c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7fe f9dc 	bl	8001a14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2224      	movs	r2, #36	; 0x24
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003682:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003692:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003694:	f000 f9f6 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 8003698:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	4a7b      	ldr	r2, [pc, #492]	; (800388c <HAL_I2C_Init+0x25c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d807      	bhi.n	80036b4 <HAL_I2C_Init+0x84>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	4a7a      	ldr	r2, [pc, #488]	; (8003890 <HAL_I2C_Init+0x260>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	bf94      	ite	ls
 80036ac:	2301      	movls	r3, #1
 80036ae:	2300      	movhi	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	e006      	b.n	80036c2 <HAL_I2C_Init+0x92>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4a77      	ldr	r2, [pc, #476]	; (8003894 <HAL_I2C_Init+0x264>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	bf94      	ite	ls
 80036bc:	2301      	movls	r3, #1
 80036be:	2300      	movhi	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e0db      	b.n	8003882 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4a72      	ldr	r2, [pc, #456]	; (8003898 <HAL_I2C_Init+0x268>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	0c9b      	lsrs	r3, r3, #18
 80036d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4a64      	ldr	r2, [pc, #400]	; (800388c <HAL_I2C_Init+0x25c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d802      	bhi.n	8003704 <HAL_I2C_Init+0xd4>
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	3301      	adds	r3, #1
 8003702:	e009      	b.n	8003718 <HAL_I2C_Init+0xe8>
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	4a63      	ldr	r2, [pc, #396]	; (800389c <HAL_I2C_Init+0x26c>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	099b      	lsrs	r3, r3, #6
 8003716:	3301      	adds	r3, #1
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	6812      	ldr	r2, [r2, #0]
 800371c:	430b      	orrs	r3, r1
 800371e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800372a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4956      	ldr	r1, [pc, #344]	; (800388c <HAL_I2C_Init+0x25c>)
 8003734:	428b      	cmp	r3, r1
 8003736:	d80d      	bhi.n	8003754 <HAL_I2C_Init+0x124>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	1e59      	subs	r1, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	fbb1 f3f3 	udiv	r3, r1, r3
 8003746:	3301      	adds	r3, #1
 8003748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800374c:	2b04      	cmp	r3, #4
 800374e:	bf38      	it	cc
 8003750:	2304      	movcc	r3, #4
 8003752:	e04f      	b.n	80037f4 <HAL_I2C_Init+0x1c4>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d111      	bne.n	8003780 <HAL_I2C_Init+0x150>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1e58      	subs	r0, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6859      	ldr	r1, [r3, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	440b      	add	r3, r1
 800376a:	fbb0 f3f3 	udiv	r3, r0, r3
 800376e:	3301      	adds	r3, #1
 8003770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf0c      	ite	eq
 8003778:	2301      	moveq	r3, #1
 800377a:	2300      	movne	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	e012      	b.n	80037a6 <HAL_I2C_Init+0x176>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	1e58      	subs	r0, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6859      	ldr	r1, [r3, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	0099      	lsls	r1, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	fbb0 f3f3 	udiv	r3, r0, r3
 8003796:	3301      	adds	r3, #1
 8003798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf0c      	ite	eq
 80037a0:	2301      	moveq	r3, #1
 80037a2:	2300      	movne	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_I2C_Init+0x17e>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e022      	b.n	80037f4 <HAL_I2C_Init+0x1c4>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10e      	bne.n	80037d4 <HAL_I2C_Init+0x1a4>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	1e58      	subs	r0, r3, #1
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6859      	ldr	r1, [r3, #4]
 80037be:	460b      	mov	r3, r1
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	440b      	add	r3, r1
 80037c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c8:	3301      	adds	r3, #1
 80037ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037d2:	e00f      	b.n	80037f4 <HAL_I2C_Init+0x1c4>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1e58      	subs	r0, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	0099      	lsls	r1, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ea:	3301      	adds	r3, #1
 80037ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	6809      	ldr	r1, [r1, #0]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69da      	ldr	r2, [r3, #28]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003822:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6911      	ldr	r1, [r2, #16]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68d2      	ldr	r2, [r2, #12]
 800382e:	4311      	orrs	r1, r2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	430b      	orrs	r3, r1
 8003836:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	000186a0 	.word	0x000186a0
 8003890:	001e847f 	.word	0x001e847f
 8003894:	003d08ff 	.word	0x003d08ff
 8003898:	431bde83 	.word	0x431bde83
 800389c:	10624dd3 	.word	0x10624dd3

080038a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0cc      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038b4:	4b68      	ldr	r3, [pc, #416]	; (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 030f 	and.w	r3, r3, #15
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d90c      	bls.n	80038dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c2:	4b65      	ldr	r3, [pc, #404]	; (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ca:	4b63      	ldr	r3, [pc, #396]	; (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d001      	beq.n	80038dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e0b8      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d020      	beq.n	800392a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d005      	beq.n	8003900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f4:	4b59      	ldr	r3, [pc, #356]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	4a58      	ldr	r2, [pc, #352]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800390c:	4b53      	ldr	r3, [pc, #332]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	4a52      	ldr	r2, [pc, #328]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003918:	4b50      	ldr	r3, [pc, #320]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	494d      	ldr	r1, [pc, #308]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003926:	4313      	orrs	r3, r2
 8003928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d044      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d107      	bne.n	800394e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393e:	4b47      	ldr	r3, [pc, #284]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d119      	bne.n	800397e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e07f      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d003      	beq.n	800395e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800395a:	2b03      	cmp	r3, #3
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395e:	4b3f      	ldr	r3, [pc, #252]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e06f      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396e:	4b3b      	ldr	r3, [pc, #236]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e067      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800397e:	4b37      	ldr	r3, [pc, #220]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f023 0203 	bic.w	r2, r3, #3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4934      	ldr	r1, [pc, #208]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	4313      	orrs	r3, r2
 800398e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003990:	f7ff f812 	bl	80029b8 <HAL_GetTick>
 8003994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003996:	e00a      	b.n	80039ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003998:	f7ff f80e 	bl	80029b8 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e04f      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ae:	4b2b      	ldr	r3, [pc, #172]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 020c 	and.w	r2, r3, #12
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	429a      	cmp	r2, r3
 80039be:	d1eb      	bne.n	8003998 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c0:	4b25      	ldr	r3, [pc, #148]	; (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d20c      	bcs.n	80039e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ce:	4b22      	ldr	r3, [pc, #136]	; (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d6:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d001      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e032      	b.n	8003a4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f4:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4916      	ldr	r1, [pc, #88]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d009      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a12:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	490e      	ldr	r1, [pc, #56]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a26:	f000 f855 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8003a2a:	4601      	mov	r1, r0
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	4a0a      	ldr	r2, [pc, #40]	; (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 8003a38:	5cd3      	ldrb	r3, [r2, r3]
 8003a3a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a3e:	4a09      	ldr	r2, [pc, #36]	; (8003a64 <HAL_RCC_ClockConfig+0x1c4>)
 8003a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a42:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <HAL_RCC_ClockConfig+0x1c8>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe ff72 	bl	8002930 <HAL_InitTick>

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40023c00 	.word	0x40023c00
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	080086bc 	.word	0x080086bc
 8003a64:	20000000 	.word	0x20000000
 8003a68:	20000004 	.word	0x20000004

08003a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a70:	4b03      	ldr	r3, [pc, #12]	; (8003a80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a72:	681b      	ldr	r3, [r3, #0]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	20000000 	.word	0x20000000

08003a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a88:	f7ff fff0 	bl	8003a6c <HAL_RCC_GetHCLKFreq>
 8003a8c:	4601      	mov	r1, r0
 8003a8e:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	0a9b      	lsrs	r3, r3, #10
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	4a03      	ldr	r2, [pc, #12]	; (8003aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a9a:	5cd3      	ldrb	r3, [r2, r3]
 8003a9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	080086cc 	.word	0x080086cc

08003aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ab0:	f7ff ffdc 	bl	8003a6c <HAL_RCC_GetHCLKFreq>
 8003ab4:	4601      	mov	r1, r0
 8003ab6:	4b05      	ldr	r3, [pc, #20]	; (8003acc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	0b5b      	lsrs	r3, r3, #13
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	4a03      	ldr	r2, [pc, #12]	; (8003ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ac2:	5cd3      	ldrb	r3, [r2, r3]
 8003ac4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	080086cc 	.word	0x080086cc

08003ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aee:	4bc6      	ldr	r3, [pc, #792]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x334>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b0c      	cmp	r3, #12
 8003af8:	f200 817e 	bhi.w	8003df8 <HAL_RCC_GetSysClockFreq+0x324>
 8003afc:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <HAL_RCC_GetSysClockFreq+0x30>)
 8003afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b02:	bf00      	nop
 8003b04:	08003b39 	.word	0x08003b39
 8003b08:	08003df9 	.word	0x08003df9
 8003b0c:	08003df9 	.word	0x08003df9
 8003b10:	08003df9 	.word	0x08003df9
 8003b14:	08003b3f 	.word	0x08003b3f
 8003b18:	08003df9 	.word	0x08003df9
 8003b1c:	08003df9 	.word	0x08003df9
 8003b20:	08003df9 	.word	0x08003df9
 8003b24:	08003b45 	.word	0x08003b45
 8003b28:	08003df9 	.word	0x08003df9
 8003b2c:	08003df9 	.word	0x08003df9
 8003b30:	08003df9 	.word	0x08003df9
 8003b34:	08003ca1 	.word	0x08003ca1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b38:	4bb4      	ldr	r3, [pc, #720]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x338>)
 8003b3a:	613b      	str	r3, [r7, #16]
       break;
 8003b3c:	e15f      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b3e:	4bb4      	ldr	r3, [pc, #720]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003b40:	613b      	str	r3, [r7, #16]
      break;
 8003b42:	e15c      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b44:	4bb0      	ldr	r3, [pc, #704]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x334>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b4c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b4e:	4bae      	ldr	r3, [pc, #696]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x334>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d04a      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b5a:	4bab      	ldr	r3, [pc, #684]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x334>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	099b      	lsrs	r3, r3, #6
 8003b60:	f04f 0400 	mov.w	r4, #0
 8003b64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	ea03 0501 	and.w	r5, r3, r1
 8003b70:	ea04 0602 	and.w	r6, r4, r2
 8003b74:	4629      	mov	r1, r5
 8003b76:	4632      	mov	r2, r6
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	f04f 0400 	mov.w	r4, #0
 8003b80:	0154      	lsls	r4, r2, #5
 8003b82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b86:	014b      	lsls	r3, r1, #5
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4622      	mov	r2, r4
 8003b8c:	1b49      	subs	r1, r1, r5
 8003b8e:	eb62 0206 	sbc.w	r2, r2, r6
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	f04f 0400 	mov.w	r4, #0
 8003b9a:	0194      	lsls	r4, r2, #6
 8003b9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ba0:	018b      	lsls	r3, r1, #6
 8003ba2:	1a5b      	subs	r3, r3, r1
 8003ba4:	eb64 0402 	sbc.w	r4, r4, r2
 8003ba8:	f04f 0100 	mov.w	r1, #0
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	00e2      	lsls	r2, r4, #3
 8003bb2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003bb6:	00d9      	lsls	r1, r3, #3
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4614      	mov	r4, r2
 8003bbc:	195b      	adds	r3, r3, r5
 8003bbe:	eb44 0406 	adc.w	r4, r4, r6
 8003bc2:	f04f 0100 	mov.w	r1, #0
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	0262      	lsls	r2, r4, #9
 8003bcc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003bd0:	0259      	lsls	r1, r3, #9
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4614      	mov	r4, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	4621      	mov	r1, r4
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f04f 0400 	mov.w	r4, #0
 8003be0:	461a      	mov	r2, r3
 8003be2:	4623      	mov	r3, r4
 8003be4:	f7fd f800 	bl	8000be8 <__aeabi_uldivmod>
 8003be8:	4603      	mov	r3, r0
 8003bea:	460c      	mov	r4, r1
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	e049      	b.n	8003c84 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf0:	4b85      	ldr	r3, [pc, #532]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x334>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	099b      	lsrs	r3, r3, #6
 8003bf6:	f04f 0400 	mov.w	r4, #0
 8003bfa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	ea03 0501 	and.w	r5, r3, r1
 8003c06:	ea04 0602 	and.w	r6, r4, r2
 8003c0a:	4629      	mov	r1, r5
 8003c0c:	4632      	mov	r2, r6
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	f04f 0400 	mov.w	r4, #0
 8003c16:	0154      	lsls	r4, r2, #5
 8003c18:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c1c:	014b      	lsls	r3, r1, #5
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4622      	mov	r2, r4
 8003c22:	1b49      	subs	r1, r1, r5
 8003c24:	eb62 0206 	sbc.w	r2, r2, r6
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	f04f 0400 	mov.w	r4, #0
 8003c30:	0194      	lsls	r4, r2, #6
 8003c32:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c36:	018b      	lsls	r3, r1, #6
 8003c38:	1a5b      	subs	r3, r3, r1
 8003c3a:	eb64 0402 	sbc.w	r4, r4, r2
 8003c3e:	f04f 0100 	mov.w	r1, #0
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	00e2      	lsls	r2, r4, #3
 8003c48:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c4c:	00d9      	lsls	r1, r3, #3
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4614      	mov	r4, r2
 8003c52:	195b      	adds	r3, r3, r5
 8003c54:	eb44 0406 	adc.w	r4, r4, r6
 8003c58:	f04f 0100 	mov.w	r1, #0
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	02a2      	lsls	r2, r4, #10
 8003c62:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003c66:	0299      	lsls	r1, r3, #10
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4614      	mov	r4, r2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	4621      	mov	r1, r4
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f04f 0400 	mov.w	r4, #0
 8003c76:	461a      	mov	r2, r3
 8003c78:	4623      	mov	r3, r4
 8003c7a:	f7fc ffb5 	bl	8000be8 <__aeabi_uldivmod>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	460c      	mov	r4, r1
 8003c82:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c84:	4b60      	ldr	r3, [pc, #384]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x334>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	0c1b      	lsrs	r3, r3, #16
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	3301      	adds	r3, #1
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9c:	613b      	str	r3, [r7, #16]
      break;
 8003c9e:	e0ae      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ca0:	4b59      	ldr	r3, [pc, #356]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x334>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ca8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003caa:	4b57      	ldr	r3, [pc, #348]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x334>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d04a      	beq.n	8003d4c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb6:	4b54      	ldr	r3, [pc, #336]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x334>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	099b      	lsrs	r3, r3, #6
 8003cbc:	f04f 0400 	mov.w	r4, #0
 8003cc0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	ea03 0501 	and.w	r5, r3, r1
 8003ccc:	ea04 0602 	and.w	r6, r4, r2
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	4632      	mov	r2, r6
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	f04f 0400 	mov.w	r4, #0
 8003cdc:	0154      	lsls	r4, r2, #5
 8003cde:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ce2:	014b      	lsls	r3, r1, #5
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	4622      	mov	r2, r4
 8003ce8:	1b49      	subs	r1, r1, r5
 8003cea:	eb62 0206 	sbc.w	r2, r2, r6
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	f04f 0400 	mov.w	r4, #0
 8003cf6:	0194      	lsls	r4, r2, #6
 8003cf8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cfc:	018b      	lsls	r3, r1, #6
 8003cfe:	1a5b      	subs	r3, r3, r1
 8003d00:	eb64 0402 	sbc.w	r4, r4, r2
 8003d04:	f04f 0100 	mov.w	r1, #0
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	00e2      	lsls	r2, r4, #3
 8003d0e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d12:	00d9      	lsls	r1, r3, #3
 8003d14:	460b      	mov	r3, r1
 8003d16:	4614      	mov	r4, r2
 8003d18:	195b      	adds	r3, r3, r5
 8003d1a:	eb44 0406 	adc.w	r4, r4, r6
 8003d1e:	f04f 0100 	mov.w	r1, #0
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	0262      	lsls	r2, r4, #9
 8003d28:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003d2c:	0259      	lsls	r1, r3, #9
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4614      	mov	r4, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	4621      	mov	r1, r4
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f04f 0400 	mov.w	r4, #0
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4623      	mov	r3, r4
 8003d40:	f7fc ff52 	bl	8000be8 <__aeabi_uldivmod>
 8003d44:	4603      	mov	r3, r0
 8003d46:	460c      	mov	r4, r1
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	e049      	b.n	8003de0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d4c:	4b2e      	ldr	r3, [pc, #184]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x334>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	099b      	lsrs	r3, r3, #6
 8003d52:	f04f 0400 	mov.w	r4, #0
 8003d56:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	ea03 0501 	and.w	r5, r3, r1
 8003d62:	ea04 0602 	and.w	r6, r4, r2
 8003d66:	4629      	mov	r1, r5
 8003d68:	4632      	mov	r2, r6
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	f04f 0400 	mov.w	r4, #0
 8003d72:	0154      	lsls	r4, r2, #5
 8003d74:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d78:	014b      	lsls	r3, r1, #5
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4622      	mov	r2, r4
 8003d7e:	1b49      	subs	r1, r1, r5
 8003d80:	eb62 0206 	sbc.w	r2, r2, r6
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	f04f 0400 	mov.w	r4, #0
 8003d8c:	0194      	lsls	r4, r2, #6
 8003d8e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d92:	018b      	lsls	r3, r1, #6
 8003d94:	1a5b      	subs	r3, r3, r1
 8003d96:	eb64 0402 	sbc.w	r4, r4, r2
 8003d9a:	f04f 0100 	mov.w	r1, #0
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	00e2      	lsls	r2, r4, #3
 8003da4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003da8:	00d9      	lsls	r1, r3, #3
 8003daa:	460b      	mov	r3, r1
 8003dac:	4614      	mov	r4, r2
 8003dae:	195b      	adds	r3, r3, r5
 8003db0:	eb44 0406 	adc.w	r4, r4, r6
 8003db4:	f04f 0100 	mov.w	r1, #0
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	02a2      	lsls	r2, r4, #10
 8003dbe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003dc2:	0299      	lsls	r1, r3, #10
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4614      	mov	r4, r2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	4621      	mov	r1, r4
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f04f 0400 	mov.w	r4, #0
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	4623      	mov	r3, r4
 8003dd6:	f7fc ff07 	bl	8000be8 <__aeabi_uldivmod>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	460c      	mov	r4, r1
 8003dde:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003de0:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x334>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	0f1b      	lsrs	r3, r3, #28
 8003de6:	f003 0307 	and.w	r3, r3, #7
 8003dea:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	613b      	str	r3, [r7, #16]
      break;
 8003df6:	e002      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003df8:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x338>)
 8003dfa:	613b      	str	r3, [r7, #16]
      break;
 8003dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dfe:	693b      	ldr	r3, [r7, #16]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	00f42400 	.word	0x00f42400
 8003e10:	007a1200 	.word	0x007a1200

08003e14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8083 	beq.w	8003f34 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e2e:	4b95      	ldr	r3, [pc, #596]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d019      	beq.n	8003e6e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e3a:	4b92      	ldr	r3, [pc, #584]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d106      	bne.n	8003e54 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e46:	4b8f      	ldr	r3, [pc, #572]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e52:	d00c      	beq.n	8003e6e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e54:	4b8b      	ldr	r3, [pc, #556]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e5c:	2b0c      	cmp	r3, #12
 8003e5e:	d112      	bne.n	8003e86 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e60:	4b88      	ldr	r3, [pc, #544]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e6c:	d10b      	bne.n	8003e86 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6e:	4b85      	ldr	r3, [pc, #532]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d05b      	beq.n	8003f32 <HAL_RCC_OscConfig+0x11e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d157      	bne.n	8003f32 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e216      	b.n	80042b4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e8e:	d106      	bne.n	8003e9e <HAL_RCC_OscConfig+0x8a>
 8003e90:	4b7c      	ldr	r3, [pc, #496]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a7b      	ldr	r2, [pc, #492]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	e01d      	b.n	8003eda <HAL_RCC_OscConfig+0xc6>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ea6:	d10c      	bne.n	8003ec2 <HAL_RCC_OscConfig+0xae>
 8003ea8:	4b76      	ldr	r3, [pc, #472]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a75      	ldr	r2, [pc, #468]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003eae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eb2:	6013      	str	r3, [r2, #0]
 8003eb4:	4b73      	ldr	r3, [pc, #460]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a72      	ldr	r2, [pc, #456]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ebe:	6013      	str	r3, [r2, #0]
 8003ec0:	e00b      	b.n	8003eda <HAL_RCC_OscConfig+0xc6>
 8003ec2:	4b70      	ldr	r3, [pc, #448]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a6f      	ldr	r2, [pc, #444]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	4b6d      	ldr	r3, [pc, #436]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a6c      	ldr	r2, [pc, #432]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d013      	beq.n	8003f0a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee2:	f7fe fd69 	bl	80029b8 <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee8:	e008      	b.n	8003efc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eea:	f7fe fd65 	bl	80029b8 <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b64      	cmp	r3, #100	; 0x64
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e1db      	b.n	80042b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efc:	4b61      	ldr	r3, [pc, #388]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d0f0      	beq.n	8003eea <HAL_RCC_OscConfig+0xd6>
 8003f08:	e014      	b.n	8003f34 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0a:	f7fe fd55 	bl	80029b8 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f12:	f7fe fd51 	bl	80029b8 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b64      	cmp	r3, #100	; 0x64
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e1c7      	b.n	80042b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f24:	4b57      	ldr	r3, [pc, #348]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f0      	bne.n	8003f12 <HAL_RCC_OscConfig+0xfe>
 8003f30:	e000      	b.n	8003f34 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f32:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d06f      	beq.n	8004020 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f40:	4b50      	ldr	r3, [pc, #320]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 030c 	and.w	r3, r3, #12
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d017      	beq.n	8003f7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f4c:	4b4d      	ldr	r3, [pc, #308]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d105      	bne.n	8003f64 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f58:	4b4a      	ldr	r3, [pc, #296]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00b      	beq.n	8003f7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f64:	4b47      	ldr	r3, [pc, #284]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f6c:	2b0c      	cmp	r3, #12
 8003f6e:	d11c      	bne.n	8003faa <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f70:	4b44      	ldr	r3, [pc, #272]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d116      	bne.n	8003faa <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7c:	4b41      	ldr	r3, [pc, #260]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_RCC_OscConfig+0x180>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e18f      	b.n	80042b4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f94:	4b3b      	ldr	r3, [pc, #236]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4938      	ldr	r1, [pc, #224]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fa8:	e03a      	b.n	8004020 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d020      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fb2:	4b35      	ldr	r3, [pc, #212]	; (8004088 <HAL_RCC_OscConfig+0x274>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb8:	f7fe fcfe 	bl	80029b8 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fc0:	f7fe fcfa 	bl	80029b8 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e170      	b.n	80042b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd2:	4b2c      	ldr	r3, [pc, #176]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fde:	4b29      	ldr	r3, [pc, #164]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4925      	ldr	r1, [pc, #148]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]
 8003ff2:	e015      	b.n	8004020 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ff4:	4b24      	ldr	r3, [pc, #144]	; (8004088 <HAL_RCC_OscConfig+0x274>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffa:	f7fe fcdd 	bl	80029b8 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004000:	e008      	b.n	8004014 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004002:	f7fe fcd9 	bl	80029b8 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e14f      	b.n	80042b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004014:	4b1b      	ldr	r3, [pc, #108]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0302 	and.w	r3, r3, #2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1f0      	bne.n	8004002 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d037      	beq.n	800409c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d016      	beq.n	8004062 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004034:	4b15      	ldr	r3, [pc, #84]	; (800408c <HAL_RCC_OscConfig+0x278>)
 8004036:	2201      	movs	r2, #1
 8004038:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800403a:	f7fe fcbd 	bl	80029b8 <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004042:	f7fe fcb9 	bl	80029b8 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e12f      	b.n	80042b4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_RCC_OscConfig+0x270>)
 8004056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x22e>
 8004060:	e01c      	b.n	800409c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004062:	4b0a      	ldr	r3, [pc, #40]	; (800408c <HAL_RCC_OscConfig+0x278>)
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004068:	f7fe fca6 	bl	80029b8 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800406e:	e00f      	b.n	8004090 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004070:	f7fe fca2 	bl	80029b8 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d908      	bls.n	8004090 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e118      	b.n	80042b4 <HAL_RCC_OscConfig+0x4a0>
 8004082:	bf00      	nop
 8004084:	40023800 	.word	0x40023800
 8004088:	42470000 	.word	0x42470000
 800408c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004090:	4b8a      	ldr	r3, [pc, #552]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 8004092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1e9      	bne.n	8004070 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8097 	beq.w	80041d8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040aa:	2300      	movs	r3, #0
 80040ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ae:	4b83      	ldr	r3, [pc, #524]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10f      	bne.n	80040da <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	4b7f      	ldr	r3, [pc, #508]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	4a7e      	ldr	r2, [pc, #504]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 80040c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ca:	4b7c      	ldr	r3, [pc, #496]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d2:	60fb      	str	r3, [r7, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80040d6:	2301      	movs	r3, #1
 80040d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040da:	4b79      	ldr	r3, [pc, #484]	; (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d118      	bne.n	8004118 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040e6:	4b76      	ldr	r3, [pc, #472]	; (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a75      	ldr	r2, [pc, #468]	; (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 80040ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040f2:	f7fe fc61 	bl	80029b8 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040fa:	f7fe fc5d 	bl	80029b8 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e0d3      	b.n	80042b4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410c:	4b6c      	ldr	r3, [pc, #432]	; (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0f0      	beq.n	80040fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d106      	bne.n	800412e <HAL_RCC_OscConfig+0x31a>
 8004120:	4b66      	ldr	r3, [pc, #408]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004124:	4a65      	ldr	r2, [pc, #404]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	6713      	str	r3, [r2, #112]	; 0x70
 800412c:	e01c      	b.n	8004168 <HAL_RCC_OscConfig+0x354>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	2b05      	cmp	r3, #5
 8004134:	d10c      	bne.n	8004150 <HAL_RCC_OscConfig+0x33c>
 8004136:	4b61      	ldr	r3, [pc, #388]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 8004138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413a:	4a60      	ldr	r2, [pc, #384]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 800413c:	f043 0304 	orr.w	r3, r3, #4
 8004140:	6713      	str	r3, [r2, #112]	; 0x70
 8004142:	4b5e      	ldr	r3, [pc, #376]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 8004144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004146:	4a5d      	ldr	r2, [pc, #372]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 8004148:	f043 0301 	orr.w	r3, r3, #1
 800414c:	6713      	str	r3, [r2, #112]	; 0x70
 800414e:	e00b      	b.n	8004168 <HAL_RCC_OscConfig+0x354>
 8004150:	4b5a      	ldr	r3, [pc, #360]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	4a59      	ldr	r2, [pc, #356]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 8004156:	f023 0301 	bic.w	r3, r3, #1
 800415a:	6713      	str	r3, [r2, #112]	; 0x70
 800415c:	4b57      	ldr	r3, [pc, #348]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	4a56      	ldr	r2, [pc, #344]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 8004162:	f023 0304 	bic.w	r3, r3, #4
 8004166:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d015      	beq.n	800419c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004170:	f7fe fc22 	bl	80029b8 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004176:	e00a      	b.n	800418e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004178:	f7fe fc1e 	bl	80029b8 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	; 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e092      	b.n	80042b4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418e:	4b4b      	ldr	r3, [pc, #300]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 8004190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0ee      	beq.n	8004178 <HAL_RCC_OscConfig+0x364>
 800419a:	e014      	b.n	80041c6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419c:	f7fe fc0c 	bl	80029b8 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a2:	e00a      	b.n	80041ba <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041a4:	f7fe fc08 	bl	80029b8 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e07c      	b.n	80042b4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ba:	4b40      	ldr	r3, [pc, #256]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1ee      	bne.n	80041a4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041c6:	7dfb      	ldrb	r3, [r7, #23]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d105      	bne.n	80041d8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041cc:	4b3b      	ldr	r3, [pc, #236]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 80041ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d0:	4a3a      	ldr	r2, [pc, #232]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 80041d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d068      	beq.n	80042b2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041e0:	4b36      	ldr	r3, [pc, #216]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 030c 	and.w	r3, r3, #12
 80041e8:	2b08      	cmp	r3, #8
 80041ea:	d060      	beq.n	80042ae <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d145      	bne.n	8004280 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f4:	4b33      	ldr	r3, [pc, #204]	; (80042c4 <HAL_RCC_OscConfig+0x4b0>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fa:	f7fe fbdd 	bl	80029b8 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004202:	f7fe fbd9 	bl	80029b8 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e04f      	b.n	80042b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004214:	4b29      	ldr	r3, [pc, #164]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1f0      	bne.n	8004202 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69da      	ldr	r2, [r3, #28]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	019b      	lsls	r3, r3, #6
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	085b      	lsrs	r3, r3, #1
 8004238:	3b01      	subs	r3, #1
 800423a:	041b      	lsls	r3, r3, #16
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	061b      	lsls	r3, r3, #24
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	071b      	lsls	r3, r3, #28
 800424c:	491b      	ldr	r1, [pc, #108]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 800424e:	4313      	orrs	r3, r2
 8004250:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004252:	4b1c      	ldr	r3, [pc, #112]	; (80042c4 <HAL_RCC_OscConfig+0x4b0>)
 8004254:	2201      	movs	r2, #1
 8004256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fe fbae 	bl	80029b8 <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004260:	f7fe fbaa 	bl	80029b8 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e020      	b.n	80042b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004272:	4b12      	ldr	r3, [pc, #72]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0f0      	beq.n	8004260 <HAL_RCC_OscConfig+0x44c>
 800427e:	e018      	b.n	80042b2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004280:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <HAL_RCC_OscConfig+0x4b0>)
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004286:	f7fe fb97 	bl	80029b8 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800428e:	f7fe fb93 	bl	80029b8 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e009      	b.n	80042b4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <HAL_RCC_OscConfig+0x4a8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f0      	bne.n	800428e <HAL_RCC_OscConfig+0x47a>
 80042ac:	e001      	b.n	80042b2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3718      	adds	r7, #24
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	40023800 	.word	0x40023800
 80042c0:	40007000 	.word	0x40007000
 80042c4:	42470060 	.word	0x42470060

080042c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e056      	b.n	8004388 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d106      	bne.n	80042fa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7fe f8df 	bl	80024b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2202      	movs	r2, #2
 80042fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004310:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	431a      	orrs	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	431a      	orrs	r2, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	ea42 0103 	orr.w	r1, r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	0c1b      	lsrs	r3, r3, #16
 8004358:	f003 0104 	and.w	r1, r3, #4
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	69da      	ldr	r2, [r3, #28]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004376:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3708      	adds	r7, #8
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	4613      	mov	r3, r2
 800439e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d101      	bne.n	80043b2 <HAL_SPI_Transmit+0x22>
 80043ae:	2302      	movs	r3, #2
 80043b0:	e11e      	b.n	80045f0 <HAL_SPI_Transmit+0x260>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043ba:	f7fe fafd 	bl	80029b8 <HAL_GetTick>
 80043be:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d002      	beq.n	80043d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80043d0:	2302      	movs	r3, #2
 80043d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043d4:	e103      	b.n	80045de <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_SPI_Transmit+0x52>
 80043dc:	88fb      	ldrh	r3, [r7, #6]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d102      	bne.n	80043e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80043e6:	e0fa      	b.n	80045de <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2203      	movs	r2, #3
 80043ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	88fa      	ldrh	r2, [r7, #6]
 8004400:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	88fa      	ldrh	r2, [r7, #6]
 8004406:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800442e:	d107      	bne.n	8004440 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800443e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444a:	2b40      	cmp	r3, #64	; 0x40
 800444c:	d007      	beq.n	800445e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800445c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004466:	d14b      	bne.n	8004500 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_SPI_Transmit+0xe6>
 8004470:	8afb      	ldrh	r3, [r7, #22]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d13e      	bne.n	80044f4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	881a      	ldrh	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	1c9a      	adds	r2, r3, #2
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800449a:	e02b      	b.n	80044f4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d112      	bne.n	80044d0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	881a      	ldrh	r2, [r3, #0]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	1c9a      	adds	r2, r3, #2
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	3b01      	subs	r3, #1
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	86da      	strh	r2, [r3, #54]	; 0x36
 80044ce:	e011      	b.n	80044f4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044d0:	f7fe fa72 	bl	80029b8 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d803      	bhi.n	80044e8 <HAL_SPI_Transmit+0x158>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044e6:	d102      	bne.n	80044ee <HAL_SPI_Transmit+0x15e>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d102      	bne.n	80044f4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80044f2:	e074      	b.n	80045de <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1ce      	bne.n	800449c <HAL_SPI_Transmit+0x10c>
 80044fe:	e04c      	b.n	800459a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <HAL_SPI_Transmit+0x17e>
 8004508:	8afb      	ldrh	r3, [r7, #22]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d140      	bne.n	8004590 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	330c      	adds	r3, #12
 8004518:	7812      	ldrb	r2, [r2, #0]
 800451a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004534:	e02c      	b.n	8004590 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b02      	cmp	r3, #2
 8004542:	d113      	bne.n	800456c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	330c      	adds	r3, #12
 800454e:	7812      	ldrb	r2, [r2, #0]
 8004550:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004560:	b29b      	uxth	r3, r3
 8004562:	3b01      	subs	r3, #1
 8004564:	b29a      	uxth	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	86da      	strh	r2, [r3, #54]	; 0x36
 800456a:	e011      	b.n	8004590 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800456c:	f7fe fa24 	bl	80029b8 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d803      	bhi.n	8004584 <HAL_SPI_Transmit+0x1f4>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004582:	d102      	bne.n	800458a <HAL_SPI_Transmit+0x1fa>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d102      	bne.n	8004590 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800458e:	e026      	b.n	80045de <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1cd      	bne.n	8004536 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	6839      	ldr	r1, [r7, #0]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 fcd2 	bl	8004f48 <SPI_EndRxTxTransaction>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2220      	movs	r2, #32
 80045ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10a      	bne.n	80045ce <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	77fb      	strb	r3, [r7, #31]
 80045da:	e000      	b.n	80045de <HAL_SPI_Transmit+0x24e>
  }

error:
 80045dc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80045ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3720      	adds	r7, #32
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	4613      	mov	r3, r2
 8004606:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004614:	d112      	bne.n	800463c <HAL_SPI_Receive+0x44>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10e      	bne.n	800463c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2204      	movs	r2, #4
 8004622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004626:	88fa      	ldrh	r2, [r7, #6]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	4613      	mov	r3, r2
 800462e:	68ba      	ldr	r2, [r7, #8]
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 f8e9 	bl	800480a <HAL_SPI_TransmitReceive>
 8004638:	4603      	mov	r3, r0
 800463a:	e0e2      	b.n	8004802 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_SPI_Receive+0x52>
 8004646:	2302      	movs	r3, #2
 8004648:	e0db      	b.n	8004802 <HAL_SPI_Receive+0x20a>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004652:	f7fe f9b1 	bl	80029b8 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	d002      	beq.n	800466a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004664:	2302      	movs	r3, #2
 8004666:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004668:	e0c2      	b.n	80047f0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <HAL_SPI_Receive+0x7e>
 8004670:	88fb      	ldrh	r3, [r7, #6]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d102      	bne.n	800467c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	75fb      	strb	r3, [r7, #23]
    goto error;
 800467a:	e0b9      	b.n	80047f0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2204      	movs	r2, #4
 8004680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	88fa      	ldrh	r2, [r7, #6]
 8004694:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	88fa      	ldrh	r2, [r7, #6]
 800469a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c2:	d107      	bne.n	80046d4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046d2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046de:	2b40      	cmp	r3, #64	; 0x40
 80046e0:	d007      	beq.n	80046f2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046f0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d162      	bne.n	80047c0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80046fa:	e02e      	b.n	800475a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b01      	cmp	r3, #1
 8004708:	d115      	bne.n	8004736 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f103 020c 	add.w	r2, r3, #12
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	7812      	ldrb	r2, [r2, #0]
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004734:	e011      	b.n	800475a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004736:	f7fe f93f 	bl	80029b8 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d803      	bhi.n	800474e <HAL_SPI_Receive+0x156>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800474c:	d102      	bne.n	8004754 <HAL_SPI_Receive+0x15c>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d102      	bne.n	800475a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004758:	e04a      	b.n	80047f0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800475e:	b29b      	uxth	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1cb      	bne.n	80046fc <HAL_SPI_Receive+0x104>
 8004764:	e031      	b.n	80047ca <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b01      	cmp	r3, #1
 8004772:	d113      	bne.n	800479c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	b292      	uxth	r2, r2
 8004780:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004786:	1c9a      	adds	r2, r3, #2
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004790:	b29b      	uxth	r3, r3
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	87da      	strh	r2, [r3, #62]	; 0x3e
 800479a:	e011      	b.n	80047c0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800479c:	f7fe f90c 	bl	80029b8 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d803      	bhi.n	80047b4 <HAL_SPI_Receive+0x1bc>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b2:	d102      	bne.n	80047ba <HAL_SPI_Receive+0x1c2>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d102      	bne.n	80047c0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80047be:	e017      	b.n	80047f0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1cd      	bne.n	8004766 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	6839      	ldr	r1, [r7, #0]
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f000 fb54 	bl	8004e7c <SPI_EndRxTransaction>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	75fb      	strb	r3, [r7, #23]
 80047ec:	e000      	b.n	80047f0 <HAL_SPI_Receive+0x1f8>
  }

error :
 80047ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004800:	7dfb      	ldrb	r3, [r7, #23]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b08c      	sub	sp, #48	; 0x30
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	607a      	str	r2, [r7, #4]
 8004816:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004818:	2301      	movs	r3, #1
 800481a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_SPI_TransmitReceive+0x26>
 800482c:	2302      	movs	r3, #2
 800482e:	e18a      	b.n	8004b46 <HAL_SPI_TransmitReceive+0x33c>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004838:	f7fe f8be 	bl	80029b8 <HAL_GetTick>
 800483c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004844:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800484e:	887b      	ldrh	r3, [r7, #2]
 8004850:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004852:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004856:	2b01      	cmp	r3, #1
 8004858:	d00f      	beq.n	800487a <HAL_SPI_TransmitReceive+0x70>
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004860:	d107      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d103      	bne.n	8004872 <HAL_SPI_TransmitReceive+0x68>
 800486a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800486e:	2b04      	cmp	r3, #4
 8004870:	d003      	beq.n	800487a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004872:	2302      	movs	r3, #2
 8004874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004878:	e15b      	b.n	8004b32 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_SPI_TransmitReceive+0x82>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_SPI_TransmitReceive+0x82>
 8004886:	887b      	ldrh	r3, [r7, #2]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d103      	bne.n	8004894 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004892:	e14e      	b.n	8004b32 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b04      	cmp	r3, #4
 800489e:	d003      	beq.n	80048a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2205      	movs	r2, #5
 80048a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	887a      	ldrh	r2, [r7, #2]
 80048b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	887a      	ldrh	r2, [r7, #2]
 80048be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	887a      	ldrh	r2, [r7, #2]
 80048ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	887a      	ldrh	r2, [r7, #2]
 80048d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e8:	2b40      	cmp	r3, #64	; 0x40
 80048ea:	d007      	beq.n	80048fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004904:	d178      	bne.n	80049f8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_SPI_TransmitReceive+0x10a>
 800490e:	8b7b      	ldrh	r3, [r7, #26]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d166      	bne.n	80049e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	881a      	ldrh	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	1c9a      	adds	r2, r3, #2
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004938:	e053      	b.n	80049e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b02      	cmp	r3, #2
 8004946:	d11b      	bne.n	8004980 <HAL_SPI_TransmitReceive+0x176>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800494c:	b29b      	uxth	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d016      	beq.n	8004980 <HAL_SPI_TransmitReceive+0x176>
 8004952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004954:	2b01      	cmp	r3, #1
 8004956:	d113      	bne.n	8004980 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495c:	881a      	ldrh	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	1c9a      	adds	r2, r3, #2
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004972:	b29b      	uxth	r3, r3
 8004974:	3b01      	subs	r3, #1
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b01      	cmp	r3, #1
 800498c:	d119      	bne.n	80049c2 <HAL_SPI_TransmitReceive+0x1b8>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d014      	beq.n	80049c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	b292      	uxth	r2, r2
 80049a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	1c9a      	adds	r2, r3, #2
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	3b01      	subs	r3, #1
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049be:	2301      	movs	r3, #1
 80049c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049c2:	f7fd fff9 	bl	80029b8 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d807      	bhi.n	80049e2 <HAL_SPI_TransmitReceive+0x1d8>
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049d8:	d003      	beq.n	80049e2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80049e0:	e0a7      	b.n	8004b32 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1a6      	bne.n	800493a <HAL_SPI_TransmitReceive+0x130>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1a1      	bne.n	800493a <HAL_SPI_TransmitReceive+0x130>
 80049f6:	e07c      	b.n	8004af2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <HAL_SPI_TransmitReceive+0x1fc>
 8004a00:	8b7b      	ldrh	r3, [r7, #26]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d16b      	bne.n	8004ade <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	330c      	adds	r3, #12
 8004a10:	7812      	ldrb	r2, [r2, #0]
 8004a12:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a2c:	e057      	b.n	8004ade <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d11c      	bne.n	8004a76 <HAL_SPI_TransmitReceive+0x26c>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d017      	beq.n	8004a76 <HAL_SPI_TransmitReceive+0x26c>
 8004a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d114      	bne.n	8004a76 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	330c      	adds	r3, #12
 8004a56:	7812      	ldrb	r2, [r2, #0]
 8004a58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d119      	bne.n	8004ab8 <HAL_SPI_TransmitReceive+0x2ae>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d014      	beq.n	8004ab8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ab8:	f7fd ff7e 	bl	80029b8 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d803      	bhi.n	8004ad0 <HAL_SPI_TransmitReceive+0x2c6>
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ace:	d102      	bne.n	8004ad6 <HAL_SPI_TransmitReceive+0x2cc>
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d103      	bne.n	8004ade <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004adc:	e029      	b.n	8004b32 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1a2      	bne.n	8004a2e <HAL_SPI_TransmitReceive+0x224>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d19d      	bne.n	8004a2e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 fa26 	bl	8004f48 <SPI_EndRxTxTransaction>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d006      	beq.n	8004b10 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004b0e:	e010      	b.n	8004b32 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10b      	bne.n	8004b30 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	617b      	str	r3, [r7, #20]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	e000      	b.n	8004b32 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004b30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3730      	adds	r7, #48	; 0x30
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	099b      	lsrs	r3, r3, #6
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10f      	bne.n	8004b94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	099b      	lsrs	r3, r3, #6
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d004      	beq.n	8004b94 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	4798      	blx	r3
    return;
 8004b92:	e0d8      	b.n	8004d46 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	085b      	lsrs	r3, r3, #1
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <HAL_SPI_IRQHandler+0x66>
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	09db      	lsrs	r3, r3, #7
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d004      	beq.n	8004bb6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	4798      	blx	r3
    return;
 8004bb4:	e0c7      	b.n	8004d46 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10c      	bne.n	8004bdc <HAL_SPI_IRQHandler+0x8c>
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	099b      	lsrs	r3, r3, #6
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	0a1b      	lsrs	r3, r3, #8
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 80b5 	beq.w	8004d46 <HAL_SPI_IRQHandler+0x1f6>
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80ae 	beq.w	8004d46 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	099b      	lsrs	r3, r3, #6
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d023      	beq.n	8004c3e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b03      	cmp	r3, #3
 8004c00:	d011      	beq.n	8004c26 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	f043 0204 	orr.w	r2, r3, #4
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	e00b      	b.n	8004c3e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c26:	2300      	movs	r3, #0
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	613b      	str	r3, [r7, #16]
 8004c3a:	693b      	ldr	r3, [r7, #16]
        return;
 8004c3c:	e083      	b.n	8004d46 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	095b      	lsrs	r3, r3, #5
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d014      	beq.n	8004c74 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4e:	f043 0201 	orr.w	r2, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	0a1b      	lsrs	r3, r3, #8
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00c      	beq.n	8004c9a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c84:	f043 0208 	orr.w	r2, r3, #8
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60bb      	str	r3, [r7, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	60bb      	str	r3, [r7, #8]
 8004c98:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d050      	beq.n	8004d44 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cb0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <HAL_SPI_IRQHandler+0x17e>
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d034      	beq.n	8004d38 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 0203 	bic.w	r2, r2, #3
 8004cdc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d011      	beq.n	8004d0a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cea:	4a18      	ldr	r2, [pc, #96]	; (8004d4c <HAL_SPI_IRQHandler+0x1fc>)
 8004cec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fe facd 	bl	8003292 <HAL_DMA_Abort_IT>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d005      	beq.n	8004d0a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d016      	beq.n	8004d40 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d16:	4a0d      	ldr	r2, [pc, #52]	; (8004d4c <HAL_SPI_IRQHandler+0x1fc>)
 8004d18:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fe fab7 	bl	8003292 <HAL_DMA_Abort_IT>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d00a      	beq.n	8004d40 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004d36:	e003      	b.n	8004d40 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f809 	bl	8004d50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004d3e:	e000      	b.n	8004d42 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004d40:	bf00      	nop
    return;
 8004d42:	bf00      	nop
 8004d44:	bf00      	nop
  }
}
 8004d46:	3720      	adds	r7, #32
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	08004d81 	.word	0x08004d81

08004d50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d72:	b2db      	uxtb	r3, r3
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff ffd8 	bl	8004d50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004db8:	e04c      	b.n	8004e54 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dc0:	d048      	beq.n	8004e54 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004dc2:	f7fd fdf9 	bl	80029b8 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d902      	bls.n	8004dd8 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d13d      	bne.n	8004e54 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004de6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004df0:	d111      	bne.n	8004e16 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dfa:	d004      	beq.n	8004e06 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e04:	d107      	bne.n	8004e16 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1e:	d10f      	bne.n	8004e40 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e2e:	601a      	str	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e00f      	b.n	8004e74 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689a      	ldr	r2, [r3, #8]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	bf0c      	ite	eq
 8004e64:	2301      	moveq	r3, #1
 8004e66:	2300      	movne	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d1a3      	bne.n	8004dba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e90:	d111      	bne.n	8004eb6 <SPI_EndRxTransaction+0x3a>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9a:	d004      	beq.n	8004ea6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea4:	d107      	bne.n	8004eb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eb4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ebe:	d12a      	bne.n	8004f16 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec8:	d012      	beq.n	8004ef0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	9300      	str	r3, [sp, #0]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2180      	movs	r1, #128	; 0x80
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7ff ff67 	bl	8004da8 <SPI_WaitFlagStateUntilTimeout>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d02d      	beq.n	8004f3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee4:	f043 0220 	orr.w	r2, r3, #32
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e026      	b.n	8004f3e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2101      	movs	r1, #1
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f7ff ff54 	bl	8004da8 <SPI_WaitFlagStateUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d01a      	beq.n	8004f3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0a:	f043 0220 	orr.w	r2, r3, #32
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e013      	b.n	8004f3e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2101      	movs	r1, #1
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f7ff ff41 	bl	8004da8 <SPI_WaitFlagStateUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f30:	f043 0220 	orr.w	r2, r3, #32
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e000      	b.n	8004f3e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f54:	4b1b      	ldr	r3, [pc, #108]	; (8004fc4 <SPI_EndRxTxTransaction+0x7c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a1b      	ldr	r2, [pc, #108]	; (8004fc8 <SPI_EndRxTxTransaction+0x80>)
 8004f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5e:	0d5b      	lsrs	r3, r3, #21
 8004f60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f64:	fb02 f303 	mul.w	r3, r2, r3
 8004f68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f72:	d112      	bne.n	8004f9a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	2180      	movs	r1, #128	; 0x80
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f7ff ff12 	bl	8004da8 <SPI_WaitFlagStateUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d016      	beq.n	8004fb8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8e:	f043 0220 	orr.w	r2, r3, #32
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e00f      	b.n	8004fba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb0:	2b80      	cmp	r3, #128	; 0x80
 8004fb2:	d0f2      	beq.n	8004f9a <SPI_EndRxTxTransaction+0x52>
 8004fb4:	e000      	b.n	8004fb8 <SPI_EndRxTxTransaction+0x70>
        break;
 8004fb6:	bf00      	nop
  }

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	20000000 	.word	0x20000000
 8004fc8:	165e9f81 	.word	0x165e9f81

08004fcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e03f      	b.n	800505e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fd fbec 	bl	80027d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2224      	movs	r2, #36	; 0x24
 8004ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800500e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 fb4b 	bl	80056ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005024:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	695a      	ldr	r2, [r3, #20]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005034:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005044:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b088      	sub	sp, #32
 800506a:	af02      	add	r7, sp, #8
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	4613      	mov	r3, r2
 8005074:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005076:	2300      	movs	r3, #0
 8005078:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b20      	cmp	r3, #32
 8005084:	f040 8083 	bne.w	800518e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_UART_Transmit+0x2e>
 800508e:	88fb      	ldrh	r3, [r7, #6]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e07b      	b.n	8005190 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_UART_Transmit+0x40>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e074      	b.n	8005190 <HAL_UART_Transmit+0x12a>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2221      	movs	r2, #33	; 0x21
 80050b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80050bc:	f7fd fc7c 	bl	80029b8 <HAL_GetTick>
 80050c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	88fa      	ldrh	r2, [r7, #6]
 80050c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	88fa      	ldrh	r2, [r7, #6]
 80050cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80050d6:	e042      	b.n	800515e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ee:	d122      	bne.n	8005136 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2200      	movs	r2, #0
 80050f8:	2180      	movs	r1, #128	; 0x80
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 f96a 	bl	80053d4 <UART_WaitOnFlagUntilTimeout>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e042      	b.n	8005190 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	881b      	ldrh	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800511c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d103      	bne.n	800512e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	3302      	adds	r3, #2
 800512a:	60bb      	str	r3, [r7, #8]
 800512c:	e017      	b.n	800515e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	3301      	adds	r3, #1
 8005132:	60bb      	str	r3, [r7, #8]
 8005134:	e013      	b.n	800515e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2200      	movs	r2, #0
 800513e:	2180      	movs	r1, #128	; 0x80
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f947 	bl	80053d4 <UART_WaitOnFlagUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e01f      	b.n	8005190 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	60ba      	str	r2, [r7, #8]
 8005156:	781a      	ldrb	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005162:	b29b      	uxth	r3, r3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1b7      	bne.n	80050d8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	2200      	movs	r2, #0
 8005170:	2140      	movs	r1, #64	; 0x40
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 f92e 	bl	80053d4 <UART_WaitOnFlagUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e006      	b.n	8005190 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2220      	movs	r2, #32
 8005186:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	e000      	b.n	8005190 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800518e:	2302      	movs	r3, #2
  }
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80051bc:	2300      	movs	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10d      	bne.n	80051ea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d008      	beq.n	80051ea <HAL_UART_IRQHandler+0x52>
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	f003 0320 	and.w	r3, r3, #32
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f9e0 	bl	80055a8 <UART_Receive_IT>
      return;
 80051e8:	e0d1      	b.n	800538e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80b0 	beq.w	8005352 <HAL_UART_IRQHandler+0x1ba>
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d105      	bne.n	8005208 <HAL_UART_IRQHandler+0x70>
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 80a5 	beq.w	8005352 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00a      	beq.n	8005228 <HAL_UART_IRQHandler+0x90>
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005220:	f043 0201 	orr.w	r2, r3, #1
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_UART_IRQHandler+0xb0>
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d005      	beq.n	8005248 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005240:	f043 0202 	orr.w	r2, r3, #2
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <HAL_UART_IRQHandler+0xd0>
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d005      	beq.n	8005268 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005260:	f043 0204 	orr.w	r2, r3, #4
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00f      	beq.n	8005292 <HAL_UART_IRQHandler+0xfa>
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b00      	cmp	r3, #0
 800527a:	d104      	bne.n	8005286 <HAL_UART_IRQHandler+0xee>
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528a:	f043 0208 	orr.w	r2, r3, #8
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005296:	2b00      	cmp	r3, #0
 8005298:	d078      	beq.n	800538c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f003 0320 	and.w	r3, r3, #32
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d007      	beq.n	80052b4 <HAL_UART_IRQHandler+0x11c>
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	f003 0320 	and.w	r3, r3, #32
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f97a 	bl	80055a8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052be:	2b40      	cmp	r3, #64	; 0x40
 80052c0:	bf0c      	ite	eq
 80052c2:	2301      	moveq	r3, #1
 80052c4:	2300      	movne	r3, #0
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d102      	bne.n	80052dc <HAL_UART_IRQHandler+0x144>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d031      	beq.n	8005340 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f000 f8c3 	bl	8005468 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	d123      	bne.n	8005338 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695a      	ldr	r2, [r3, #20]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052fe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005304:	2b00      	cmp	r3, #0
 8005306:	d013      	beq.n	8005330 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530c:	4a21      	ldr	r2, [pc, #132]	; (8005394 <HAL_UART_IRQHandler+0x1fc>)
 800530e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005314:	4618      	mov	r0, r3
 8005316:	f7fd ffbc 	bl	8003292 <HAL_DMA_Abort_IT>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d016      	beq.n	800534e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800532a:	4610      	mov	r0, r2
 800532c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800532e:	e00e      	b.n	800534e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f845 	bl	80053c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005336:	e00a      	b.n	800534e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f841 	bl	80053c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800533e:	e006      	b.n	800534e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f83d 	bl	80053c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800534c:	e01e      	b.n	800538c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800534e:	bf00      	nop
    return;
 8005350:	e01c      	b.n	800538c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005358:	2b00      	cmp	r3, #0
 800535a:	d008      	beq.n	800536e <HAL_UART_IRQHandler+0x1d6>
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f8b0 	bl	80054cc <UART_Transmit_IT>
    return;
 800536c:	e00f      	b.n	800538e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <HAL_UART_IRQHandler+0x1f6>
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f8f8 	bl	8005578 <UART_EndTransmit_IT>
    return;
 8005388:	bf00      	nop
 800538a:	e000      	b.n	800538e <HAL_UART_IRQHandler+0x1f6>
    return;
 800538c:	bf00      	nop
  }
}
 800538e:	3720      	adds	r7, #32
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	080054a5 	.word	0x080054a5

08005398 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	603b      	str	r3, [r7, #0]
 80053e0:	4613      	mov	r3, r2
 80053e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e4:	e02c      	b.n	8005440 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053ec:	d028      	beq.n	8005440 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d007      	beq.n	8005404 <UART_WaitOnFlagUntilTimeout+0x30>
 80053f4:	f7fd fae0 	bl	80029b8 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	429a      	cmp	r2, r3
 8005402:	d21d      	bcs.n	8005440 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005412:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695a      	ldr	r2, [r3, #20]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0201 	bic.w	r2, r2, #1
 8005422:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e00f      	b.n	8005460 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4013      	ands	r3, r2
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	bf0c      	ite	eq
 8005450:	2301      	moveq	r3, #1
 8005452:	2300      	movne	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	429a      	cmp	r2, r3
 800545c:	d0c3      	beq.n	80053e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800547e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0201 	bic.w	r2, r2, #1
 800548e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f7ff ff7e 	bl	80053c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054c4:	bf00      	nop
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b21      	cmp	r3, #33	; 0x21
 80054de:	d144      	bne.n	800556a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e8:	d11a      	bne.n	8005520 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054fe:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d105      	bne.n	8005514 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	1c9a      	adds	r2, r3, #2
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	621a      	str	r2, [r3, #32]
 8005512:	e00e      	b.n	8005532 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	1c5a      	adds	r2, r3, #1
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	621a      	str	r2, [r3, #32]
 800551e:	e008      	b.n	8005532 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	1c59      	adds	r1, r3, #1
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6211      	str	r1, [r2, #32]
 800552a:	781a      	ldrb	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005536:	b29b      	uxth	r3, r3
 8005538:	3b01      	subs	r3, #1
 800553a:	b29b      	uxth	r3, r3
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	4619      	mov	r1, r3
 8005540:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10f      	bne.n	8005566 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005554:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68da      	ldr	r2, [r3, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005564:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	e000      	b.n	800556c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800556a:	2302      	movs	r3, #2
  }
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800558e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff fefd 	bl	8005398 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b22      	cmp	r3, #34	; 0x22
 80055ba:	d171      	bne.n	80056a0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c4:	d123      	bne.n	800560e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10e      	bne.n	80055f2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	b29b      	uxth	r3, r3
 80055dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	1c9a      	adds	r2, r3, #2
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	629a      	str	r2, [r3, #40]	; 0x28
 80055f0:	e029      	b.n	8005646 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005606:	1c5a      	adds	r2, r3, #1
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	629a      	str	r2, [r3, #40]	; 0x28
 800560c:	e01b      	b.n	8005646 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10a      	bne.n	800562c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6858      	ldr	r0, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005620:	1c59      	adds	r1, r3, #1
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6291      	str	r1, [r2, #40]	; 0x28
 8005626:	b2c2      	uxtb	r2, r0
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	e00c      	b.n	8005646 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	b2da      	uxtb	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005638:	1c58      	adds	r0, r3, #1
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	6288      	str	r0, [r1, #40]	; 0x28
 800563e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800564a:	b29b      	uxth	r3, r3
 800564c:	3b01      	subs	r3, #1
 800564e:	b29b      	uxth	r3, r3
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	4619      	mov	r1, r3
 8005654:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005656:	2b00      	cmp	r3, #0
 8005658:	d120      	bne.n	800569c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68da      	ldr	r2, [r3, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f022 0220 	bic.w	r2, r2, #32
 8005668:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68da      	ldr	r2, [r3, #12]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005678:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	695a      	ldr	r2, [r3, #20]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0201 	bic.w	r2, r2, #1
 8005688:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7ff fe8a 	bl	80053ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005698:	2300      	movs	r3, #0
 800569a:	e002      	b.n	80056a2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800569c:	2300      	movs	r3, #0
 800569e:	e000      	b.n	80056a2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80056a0:	2302      	movs	r3, #2
  }
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b0:	b085      	sub	sp, #20
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	431a      	orrs	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80056ee:	f023 030c 	bic.w	r3, r3, #12
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6812      	ldr	r2, [r2, #0]
 80056f6:	68f9      	ldr	r1, [r7, #12]
 80056f8:	430b      	orrs	r3, r1
 80056fa:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800571a:	f040 818b 	bne.w	8005a34 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4ac1      	ldr	r2, [pc, #772]	; (8005a28 <UART_SetConfig+0x37c>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d005      	beq.n	8005734 <UART_SetConfig+0x88>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4abf      	ldr	r2, [pc, #764]	; (8005a2c <UART_SetConfig+0x380>)
 800572e:	4293      	cmp	r3, r2
 8005730:	f040 80bd 	bne.w	80058ae <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005734:	f7fe f9ba 	bl	8003aac <HAL_RCC_GetPCLK2Freq>
 8005738:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	461d      	mov	r5, r3
 800573e:	f04f 0600 	mov.w	r6, #0
 8005742:	46a8      	mov	r8, r5
 8005744:	46b1      	mov	r9, r6
 8005746:	eb18 0308 	adds.w	r3, r8, r8
 800574a:	eb49 0409 	adc.w	r4, r9, r9
 800574e:	4698      	mov	r8, r3
 8005750:	46a1      	mov	r9, r4
 8005752:	eb18 0805 	adds.w	r8, r8, r5
 8005756:	eb49 0906 	adc.w	r9, r9, r6
 800575a:	f04f 0100 	mov.w	r1, #0
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005766:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800576a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800576e:	4688      	mov	r8, r1
 8005770:	4691      	mov	r9, r2
 8005772:	eb18 0005 	adds.w	r0, r8, r5
 8005776:	eb49 0106 	adc.w	r1, r9, r6
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	461d      	mov	r5, r3
 8005780:	f04f 0600 	mov.w	r6, #0
 8005784:	196b      	adds	r3, r5, r5
 8005786:	eb46 0406 	adc.w	r4, r6, r6
 800578a:	461a      	mov	r2, r3
 800578c:	4623      	mov	r3, r4
 800578e:	f7fb fa2b 	bl	8000be8 <__aeabi_uldivmod>
 8005792:	4603      	mov	r3, r0
 8005794:	460c      	mov	r4, r1
 8005796:	461a      	mov	r2, r3
 8005798:	4ba5      	ldr	r3, [pc, #660]	; (8005a30 <UART_SetConfig+0x384>)
 800579a:	fba3 2302 	umull	r2, r3, r3, r2
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	461d      	mov	r5, r3
 80057a8:	f04f 0600 	mov.w	r6, #0
 80057ac:	46a9      	mov	r9, r5
 80057ae:	46b2      	mov	sl, r6
 80057b0:	eb19 0309 	adds.w	r3, r9, r9
 80057b4:	eb4a 040a 	adc.w	r4, sl, sl
 80057b8:	4699      	mov	r9, r3
 80057ba:	46a2      	mov	sl, r4
 80057bc:	eb19 0905 	adds.w	r9, r9, r5
 80057c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80057c4:	f04f 0100 	mov.w	r1, #0
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057d8:	4689      	mov	r9, r1
 80057da:	4692      	mov	sl, r2
 80057dc:	eb19 0005 	adds.w	r0, r9, r5
 80057e0:	eb4a 0106 	adc.w	r1, sl, r6
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	461d      	mov	r5, r3
 80057ea:	f04f 0600 	mov.w	r6, #0
 80057ee:	196b      	adds	r3, r5, r5
 80057f0:	eb46 0406 	adc.w	r4, r6, r6
 80057f4:	461a      	mov	r2, r3
 80057f6:	4623      	mov	r3, r4
 80057f8:	f7fb f9f6 	bl	8000be8 <__aeabi_uldivmod>
 80057fc:	4603      	mov	r3, r0
 80057fe:	460c      	mov	r4, r1
 8005800:	461a      	mov	r2, r3
 8005802:	4b8b      	ldr	r3, [pc, #556]	; (8005a30 <UART_SetConfig+0x384>)
 8005804:	fba3 1302 	umull	r1, r3, r3, r2
 8005808:	095b      	lsrs	r3, r3, #5
 800580a:	2164      	movs	r1, #100	; 0x64
 800580c:	fb01 f303 	mul.w	r3, r1, r3
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	3332      	adds	r3, #50	; 0x32
 8005816:	4a86      	ldr	r2, [pc, #536]	; (8005a30 <UART_SetConfig+0x384>)
 8005818:	fba2 2303 	umull	r2, r3, r2, r3
 800581c:	095b      	lsrs	r3, r3, #5
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005824:	4498      	add	r8, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	461d      	mov	r5, r3
 800582a:	f04f 0600 	mov.w	r6, #0
 800582e:	46a9      	mov	r9, r5
 8005830:	46b2      	mov	sl, r6
 8005832:	eb19 0309 	adds.w	r3, r9, r9
 8005836:	eb4a 040a 	adc.w	r4, sl, sl
 800583a:	4699      	mov	r9, r3
 800583c:	46a2      	mov	sl, r4
 800583e:	eb19 0905 	adds.w	r9, r9, r5
 8005842:	eb4a 0a06 	adc.w	sl, sl, r6
 8005846:	f04f 0100 	mov.w	r1, #0
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005852:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005856:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800585a:	4689      	mov	r9, r1
 800585c:	4692      	mov	sl, r2
 800585e:	eb19 0005 	adds.w	r0, r9, r5
 8005862:	eb4a 0106 	adc.w	r1, sl, r6
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	461d      	mov	r5, r3
 800586c:	f04f 0600 	mov.w	r6, #0
 8005870:	196b      	adds	r3, r5, r5
 8005872:	eb46 0406 	adc.w	r4, r6, r6
 8005876:	461a      	mov	r2, r3
 8005878:	4623      	mov	r3, r4
 800587a:	f7fb f9b5 	bl	8000be8 <__aeabi_uldivmod>
 800587e:	4603      	mov	r3, r0
 8005880:	460c      	mov	r4, r1
 8005882:	461a      	mov	r2, r3
 8005884:	4b6a      	ldr	r3, [pc, #424]	; (8005a30 <UART_SetConfig+0x384>)
 8005886:	fba3 1302 	umull	r1, r3, r3, r2
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	2164      	movs	r1, #100	; 0x64
 800588e:	fb01 f303 	mul.w	r3, r1, r3
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	3332      	adds	r3, #50	; 0x32
 8005898:	4a65      	ldr	r2, [pc, #404]	; (8005a30 <UART_SetConfig+0x384>)
 800589a:	fba2 2303 	umull	r2, r3, r2, r3
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	f003 0207 	and.w	r2, r3, #7
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4442      	add	r2, r8
 80058aa:	609a      	str	r2, [r3, #8]
 80058ac:	e26f      	b.n	8005d8e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058ae:	f7fe f8e9 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 80058b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	461d      	mov	r5, r3
 80058b8:	f04f 0600 	mov.w	r6, #0
 80058bc:	46a8      	mov	r8, r5
 80058be:	46b1      	mov	r9, r6
 80058c0:	eb18 0308 	adds.w	r3, r8, r8
 80058c4:	eb49 0409 	adc.w	r4, r9, r9
 80058c8:	4698      	mov	r8, r3
 80058ca:	46a1      	mov	r9, r4
 80058cc:	eb18 0805 	adds.w	r8, r8, r5
 80058d0:	eb49 0906 	adc.w	r9, r9, r6
 80058d4:	f04f 0100 	mov.w	r1, #0
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80058e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80058e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80058e8:	4688      	mov	r8, r1
 80058ea:	4691      	mov	r9, r2
 80058ec:	eb18 0005 	adds.w	r0, r8, r5
 80058f0:	eb49 0106 	adc.w	r1, r9, r6
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	461d      	mov	r5, r3
 80058fa:	f04f 0600 	mov.w	r6, #0
 80058fe:	196b      	adds	r3, r5, r5
 8005900:	eb46 0406 	adc.w	r4, r6, r6
 8005904:	461a      	mov	r2, r3
 8005906:	4623      	mov	r3, r4
 8005908:	f7fb f96e 	bl	8000be8 <__aeabi_uldivmod>
 800590c:	4603      	mov	r3, r0
 800590e:	460c      	mov	r4, r1
 8005910:	461a      	mov	r2, r3
 8005912:	4b47      	ldr	r3, [pc, #284]	; (8005a30 <UART_SetConfig+0x384>)
 8005914:	fba3 2302 	umull	r2, r3, r3, r2
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	461d      	mov	r5, r3
 8005922:	f04f 0600 	mov.w	r6, #0
 8005926:	46a9      	mov	r9, r5
 8005928:	46b2      	mov	sl, r6
 800592a:	eb19 0309 	adds.w	r3, r9, r9
 800592e:	eb4a 040a 	adc.w	r4, sl, sl
 8005932:	4699      	mov	r9, r3
 8005934:	46a2      	mov	sl, r4
 8005936:	eb19 0905 	adds.w	r9, r9, r5
 800593a:	eb4a 0a06 	adc.w	sl, sl, r6
 800593e:	f04f 0100 	mov.w	r1, #0
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800594a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800594e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005952:	4689      	mov	r9, r1
 8005954:	4692      	mov	sl, r2
 8005956:	eb19 0005 	adds.w	r0, r9, r5
 800595a:	eb4a 0106 	adc.w	r1, sl, r6
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	461d      	mov	r5, r3
 8005964:	f04f 0600 	mov.w	r6, #0
 8005968:	196b      	adds	r3, r5, r5
 800596a:	eb46 0406 	adc.w	r4, r6, r6
 800596e:	461a      	mov	r2, r3
 8005970:	4623      	mov	r3, r4
 8005972:	f7fb f939 	bl	8000be8 <__aeabi_uldivmod>
 8005976:	4603      	mov	r3, r0
 8005978:	460c      	mov	r4, r1
 800597a:	461a      	mov	r2, r3
 800597c:	4b2c      	ldr	r3, [pc, #176]	; (8005a30 <UART_SetConfig+0x384>)
 800597e:	fba3 1302 	umull	r1, r3, r3, r2
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	2164      	movs	r1, #100	; 0x64
 8005986:	fb01 f303 	mul.w	r3, r1, r3
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	3332      	adds	r3, #50	; 0x32
 8005990:	4a27      	ldr	r2, [pc, #156]	; (8005a30 <UART_SetConfig+0x384>)
 8005992:	fba2 2303 	umull	r2, r3, r2, r3
 8005996:	095b      	lsrs	r3, r3, #5
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800599e:	4498      	add	r8, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	461d      	mov	r5, r3
 80059a4:	f04f 0600 	mov.w	r6, #0
 80059a8:	46a9      	mov	r9, r5
 80059aa:	46b2      	mov	sl, r6
 80059ac:	eb19 0309 	adds.w	r3, r9, r9
 80059b0:	eb4a 040a 	adc.w	r4, sl, sl
 80059b4:	4699      	mov	r9, r3
 80059b6:	46a2      	mov	sl, r4
 80059b8:	eb19 0905 	adds.w	r9, r9, r5
 80059bc:	eb4a 0a06 	adc.w	sl, sl, r6
 80059c0:	f04f 0100 	mov.w	r1, #0
 80059c4:	f04f 0200 	mov.w	r2, #0
 80059c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059cc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059d4:	4689      	mov	r9, r1
 80059d6:	4692      	mov	sl, r2
 80059d8:	eb19 0005 	adds.w	r0, r9, r5
 80059dc:	eb4a 0106 	adc.w	r1, sl, r6
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	461d      	mov	r5, r3
 80059e6:	f04f 0600 	mov.w	r6, #0
 80059ea:	196b      	adds	r3, r5, r5
 80059ec:	eb46 0406 	adc.w	r4, r6, r6
 80059f0:	461a      	mov	r2, r3
 80059f2:	4623      	mov	r3, r4
 80059f4:	f7fb f8f8 	bl	8000be8 <__aeabi_uldivmod>
 80059f8:	4603      	mov	r3, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	461a      	mov	r2, r3
 80059fe:	4b0c      	ldr	r3, [pc, #48]	; (8005a30 <UART_SetConfig+0x384>)
 8005a00:	fba3 1302 	umull	r1, r3, r3, r2
 8005a04:	095b      	lsrs	r3, r3, #5
 8005a06:	2164      	movs	r1, #100	; 0x64
 8005a08:	fb01 f303 	mul.w	r3, r1, r3
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	3332      	adds	r3, #50	; 0x32
 8005a12:	4a07      	ldr	r2, [pc, #28]	; (8005a30 <UART_SetConfig+0x384>)
 8005a14:	fba2 2303 	umull	r2, r3, r2, r3
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	f003 0207 	and.w	r2, r3, #7
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4442      	add	r2, r8
 8005a24:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005a26:	e1b2      	b.n	8005d8e <UART_SetConfig+0x6e2>
 8005a28:	40011000 	.word	0x40011000
 8005a2c:	40011400 	.word	0x40011400
 8005a30:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4ad7      	ldr	r2, [pc, #860]	; (8005d98 <UART_SetConfig+0x6ec>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d005      	beq.n	8005a4a <UART_SetConfig+0x39e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4ad6      	ldr	r2, [pc, #856]	; (8005d9c <UART_SetConfig+0x6f0>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	f040 80d1 	bne.w	8005bec <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a4a:	f7fe f82f 	bl	8003aac <HAL_RCC_GetPCLK2Freq>
 8005a4e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	469a      	mov	sl, r3
 8005a54:	f04f 0b00 	mov.w	fp, #0
 8005a58:	46d0      	mov	r8, sl
 8005a5a:	46d9      	mov	r9, fp
 8005a5c:	eb18 0308 	adds.w	r3, r8, r8
 8005a60:	eb49 0409 	adc.w	r4, r9, r9
 8005a64:	4698      	mov	r8, r3
 8005a66:	46a1      	mov	r9, r4
 8005a68:	eb18 080a 	adds.w	r8, r8, sl
 8005a6c:	eb49 090b 	adc.w	r9, r9, fp
 8005a70:	f04f 0100 	mov.w	r1, #0
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a7c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a80:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a84:	4688      	mov	r8, r1
 8005a86:	4691      	mov	r9, r2
 8005a88:	eb1a 0508 	adds.w	r5, sl, r8
 8005a8c:	eb4b 0609 	adc.w	r6, fp, r9
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	4619      	mov	r1, r3
 8005a96:	f04f 0200 	mov.w	r2, #0
 8005a9a:	f04f 0300 	mov.w	r3, #0
 8005a9e:	f04f 0400 	mov.w	r4, #0
 8005aa2:	0094      	lsls	r4, r2, #2
 8005aa4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005aa8:	008b      	lsls	r3, r1, #2
 8005aaa:	461a      	mov	r2, r3
 8005aac:	4623      	mov	r3, r4
 8005aae:	4628      	mov	r0, r5
 8005ab0:	4631      	mov	r1, r6
 8005ab2:	f7fb f899 	bl	8000be8 <__aeabi_uldivmod>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	460c      	mov	r4, r1
 8005aba:	461a      	mov	r2, r3
 8005abc:	4bb8      	ldr	r3, [pc, #736]	; (8005da0 <UART_SetConfig+0x6f4>)
 8005abe:	fba3 2302 	umull	r2, r3, r3, r2
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	469b      	mov	fp, r3
 8005acc:	f04f 0c00 	mov.w	ip, #0
 8005ad0:	46d9      	mov	r9, fp
 8005ad2:	46e2      	mov	sl, ip
 8005ad4:	eb19 0309 	adds.w	r3, r9, r9
 8005ad8:	eb4a 040a 	adc.w	r4, sl, sl
 8005adc:	4699      	mov	r9, r3
 8005ade:	46a2      	mov	sl, r4
 8005ae0:	eb19 090b 	adds.w	r9, r9, fp
 8005ae4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ae8:	f04f 0100 	mov.w	r1, #0
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005af4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005af8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005afc:	4689      	mov	r9, r1
 8005afe:	4692      	mov	sl, r2
 8005b00:	eb1b 0509 	adds.w	r5, fp, r9
 8005b04:	eb4c 060a 	adc.w	r6, ip, sl
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	f04f 0400 	mov.w	r4, #0
 8005b1a:	0094      	lsls	r4, r2, #2
 8005b1c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b20:	008b      	lsls	r3, r1, #2
 8005b22:	461a      	mov	r2, r3
 8005b24:	4623      	mov	r3, r4
 8005b26:	4628      	mov	r0, r5
 8005b28:	4631      	mov	r1, r6
 8005b2a:	f7fb f85d 	bl	8000be8 <__aeabi_uldivmod>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	460c      	mov	r4, r1
 8005b32:	461a      	mov	r2, r3
 8005b34:	4b9a      	ldr	r3, [pc, #616]	; (8005da0 <UART_SetConfig+0x6f4>)
 8005b36:	fba3 1302 	umull	r1, r3, r3, r2
 8005b3a:	095b      	lsrs	r3, r3, #5
 8005b3c:	2164      	movs	r1, #100	; 0x64
 8005b3e:	fb01 f303 	mul.w	r3, r1, r3
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	3332      	adds	r3, #50	; 0x32
 8005b48:	4a95      	ldr	r2, [pc, #596]	; (8005da0 <UART_SetConfig+0x6f4>)
 8005b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b54:	4498      	add	r8, r3
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	469b      	mov	fp, r3
 8005b5a:	f04f 0c00 	mov.w	ip, #0
 8005b5e:	46d9      	mov	r9, fp
 8005b60:	46e2      	mov	sl, ip
 8005b62:	eb19 0309 	adds.w	r3, r9, r9
 8005b66:	eb4a 040a 	adc.w	r4, sl, sl
 8005b6a:	4699      	mov	r9, r3
 8005b6c:	46a2      	mov	sl, r4
 8005b6e:	eb19 090b 	adds.w	r9, r9, fp
 8005b72:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b76:	f04f 0100 	mov.w	r1, #0
 8005b7a:	f04f 0200 	mov.w	r2, #0
 8005b7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b8a:	4689      	mov	r9, r1
 8005b8c:	4692      	mov	sl, r2
 8005b8e:	eb1b 0509 	adds.w	r5, fp, r9
 8005b92:	eb4c 060a 	adc.w	r6, ip, sl
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	f04f 0400 	mov.w	r4, #0
 8005ba8:	0094      	lsls	r4, r2, #2
 8005baa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bae:	008b      	lsls	r3, r1, #2
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4623      	mov	r3, r4
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	f7fb f816 	bl	8000be8 <__aeabi_uldivmod>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4b77      	ldr	r3, [pc, #476]	; (8005da0 <UART_SetConfig+0x6f4>)
 8005bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005bc8:	095b      	lsrs	r3, r3, #5
 8005bca:	2164      	movs	r1, #100	; 0x64
 8005bcc:	fb01 f303 	mul.w	r3, r1, r3
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	3332      	adds	r3, #50	; 0x32
 8005bd6:	4a72      	ldr	r2, [pc, #456]	; (8005da0 <UART_SetConfig+0x6f4>)
 8005bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bdc:	095b      	lsrs	r3, r3, #5
 8005bde:	f003 020f 	and.w	r2, r3, #15
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4442      	add	r2, r8
 8005be8:	609a      	str	r2, [r3, #8]
 8005bea:	e0d0      	b.n	8005d8e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bec:	f7fd ff4a 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 8005bf0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	469a      	mov	sl, r3
 8005bf6:	f04f 0b00 	mov.w	fp, #0
 8005bfa:	46d0      	mov	r8, sl
 8005bfc:	46d9      	mov	r9, fp
 8005bfe:	eb18 0308 	adds.w	r3, r8, r8
 8005c02:	eb49 0409 	adc.w	r4, r9, r9
 8005c06:	4698      	mov	r8, r3
 8005c08:	46a1      	mov	r9, r4
 8005c0a:	eb18 080a 	adds.w	r8, r8, sl
 8005c0e:	eb49 090b 	adc.w	r9, r9, fp
 8005c12:	f04f 0100 	mov.w	r1, #0
 8005c16:	f04f 0200 	mov.w	r2, #0
 8005c1a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c1e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c22:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c26:	4688      	mov	r8, r1
 8005c28:	4691      	mov	r9, r2
 8005c2a:	eb1a 0508 	adds.w	r5, sl, r8
 8005c2e:	eb4b 0609 	adc.w	r6, fp, r9
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	4619      	mov	r1, r3
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	f04f 0400 	mov.w	r4, #0
 8005c44:	0094      	lsls	r4, r2, #2
 8005c46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c4a:	008b      	lsls	r3, r1, #2
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	4623      	mov	r3, r4
 8005c50:	4628      	mov	r0, r5
 8005c52:	4631      	mov	r1, r6
 8005c54:	f7fa ffc8 	bl	8000be8 <__aeabi_uldivmod>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	460c      	mov	r4, r1
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	4b50      	ldr	r3, [pc, #320]	; (8005da0 <UART_SetConfig+0x6f4>)
 8005c60:	fba3 2302 	umull	r2, r3, r3, r2
 8005c64:	095b      	lsrs	r3, r3, #5
 8005c66:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	469b      	mov	fp, r3
 8005c6e:	f04f 0c00 	mov.w	ip, #0
 8005c72:	46d9      	mov	r9, fp
 8005c74:	46e2      	mov	sl, ip
 8005c76:	eb19 0309 	adds.w	r3, r9, r9
 8005c7a:	eb4a 040a 	adc.w	r4, sl, sl
 8005c7e:	4699      	mov	r9, r3
 8005c80:	46a2      	mov	sl, r4
 8005c82:	eb19 090b 	adds.w	r9, r9, fp
 8005c86:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c8a:	f04f 0100 	mov.w	r1, #0
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c9e:	4689      	mov	r9, r1
 8005ca0:	4692      	mov	sl, r2
 8005ca2:	eb1b 0509 	adds.w	r5, fp, r9
 8005ca6:	eb4c 060a 	adc.w	r6, ip, sl
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	f04f 0400 	mov.w	r4, #0
 8005cbc:	0094      	lsls	r4, r2, #2
 8005cbe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cc2:	008b      	lsls	r3, r1, #2
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	4623      	mov	r3, r4
 8005cc8:	4628      	mov	r0, r5
 8005cca:	4631      	mov	r1, r6
 8005ccc:	f7fa ff8c 	bl	8000be8 <__aeabi_uldivmod>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	460c      	mov	r4, r1
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	4b32      	ldr	r3, [pc, #200]	; (8005da0 <UART_SetConfig+0x6f4>)
 8005cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	2164      	movs	r1, #100	; 0x64
 8005ce0:	fb01 f303 	mul.w	r3, r1, r3
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	3332      	adds	r3, #50	; 0x32
 8005cea:	4a2d      	ldr	r2, [pc, #180]	; (8005da0 <UART_SetConfig+0x6f4>)
 8005cec:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cf6:	4498      	add	r8, r3
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	469b      	mov	fp, r3
 8005cfc:	f04f 0c00 	mov.w	ip, #0
 8005d00:	46d9      	mov	r9, fp
 8005d02:	46e2      	mov	sl, ip
 8005d04:	eb19 0309 	adds.w	r3, r9, r9
 8005d08:	eb4a 040a 	adc.w	r4, sl, sl
 8005d0c:	4699      	mov	r9, r3
 8005d0e:	46a2      	mov	sl, r4
 8005d10:	eb19 090b 	adds.w	r9, r9, fp
 8005d14:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d18:	f04f 0100 	mov.w	r1, #0
 8005d1c:	f04f 0200 	mov.w	r2, #0
 8005d20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d2c:	4689      	mov	r9, r1
 8005d2e:	4692      	mov	sl, r2
 8005d30:	eb1b 0509 	adds.w	r5, fp, r9
 8005d34:	eb4c 060a 	adc.w	r6, ip, sl
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	f04f 0300 	mov.w	r3, #0
 8005d46:	f04f 0400 	mov.w	r4, #0
 8005d4a:	0094      	lsls	r4, r2, #2
 8005d4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d50:	008b      	lsls	r3, r1, #2
 8005d52:	461a      	mov	r2, r3
 8005d54:	4623      	mov	r3, r4
 8005d56:	4628      	mov	r0, r5
 8005d58:	4631      	mov	r1, r6
 8005d5a:	f7fa ff45 	bl	8000be8 <__aeabi_uldivmod>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	460c      	mov	r4, r1
 8005d62:	461a      	mov	r2, r3
 8005d64:	4b0e      	ldr	r3, [pc, #56]	; (8005da0 <UART_SetConfig+0x6f4>)
 8005d66:	fba3 1302 	umull	r1, r3, r3, r2
 8005d6a:	095b      	lsrs	r3, r3, #5
 8005d6c:	2164      	movs	r1, #100	; 0x64
 8005d6e:	fb01 f303 	mul.w	r3, r1, r3
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	3332      	adds	r3, #50	; 0x32
 8005d78:	4a09      	ldr	r2, [pc, #36]	; (8005da0 <UART_SetConfig+0x6f4>)
 8005d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7e:	095b      	lsrs	r3, r3, #5
 8005d80:	f003 020f 	and.w	r2, r3, #15
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4442      	add	r2, r8
 8005d8a:	609a      	str	r2, [r3, #8]
}
 8005d8c:	e7ff      	b.n	8005d8e <UART_SetConfig+0x6e2>
 8005d8e:	bf00      	nop
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d98:	40011000 	.word	0x40011000
 8005d9c:	40011400 	.word	0x40011400
 8005da0:	51eb851f 	.word	0x51eb851f

08005da4 <__errno>:
 8005da4:	4b01      	ldr	r3, [pc, #4]	; (8005dac <__errno+0x8>)
 8005da6:	6818      	ldr	r0, [r3, #0]
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	2000000c 	.word	0x2000000c

08005db0 <__libc_init_array>:
 8005db0:	b570      	push	{r4, r5, r6, lr}
 8005db2:	4e0d      	ldr	r6, [pc, #52]	; (8005de8 <__libc_init_array+0x38>)
 8005db4:	4c0d      	ldr	r4, [pc, #52]	; (8005dec <__libc_init_array+0x3c>)
 8005db6:	1ba4      	subs	r4, r4, r6
 8005db8:	10a4      	asrs	r4, r4, #2
 8005dba:	2500      	movs	r5, #0
 8005dbc:	42a5      	cmp	r5, r4
 8005dbe:	d109      	bne.n	8005dd4 <__libc_init_array+0x24>
 8005dc0:	4e0b      	ldr	r6, [pc, #44]	; (8005df0 <__libc_init_array+0x40>)
 8005dc2:	4c0c      	ldr	r4, [pc, #48]	; (8005df4 <__libc_init_array+0x44>)
 8005dc4:	f002 fbf6 	bl	80085b4 <_init>
 8005dc8:	1ba4      	subs	r4, r4, r6
 8005dca:	10a4      	asrs	r4, r4, #2
 8005dcc:	2500      	movs	r5, #0
 8005dce:	42a5      	cmp	r5, r4
 8005dd0:	d105      	bne.n	8005dde <__libc_init_array+0x2e>
 8005dd2:	bd70      	pop	{r4, r5, r6, pc}
 8005dd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dd8:	4798      	blx	r3
 8005dda:	3501      	adds	r5, #1
 8005ddc:	e7ee      	b.n	8005dbc <__libc_init_array+0xc>
 8005dde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005de2:	4798      	blx	r3
 8005de4:	3501      	adds	r5, #1
 8005de6:	e7f2      	b.n	8005dce <__libc_init_array+0x1e>
 8005de8:	080089a0 	.word	0x080089a0
 8005dec:	080089a0 	.word	0x080089a0
 8005df0:	080089a0 	.word	0x080089a0
 8005df4:	080089b0 	.word	0x080089b0

08005df8 <memcpy>:
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	1e43      	subs	r3, r0, #1
 8005dfc:	440a      	add	r2, r1
 8005dfe:	4291      	cmp	r1, r2
 8005e00:	d100      	bne.n	8005e04 <memcpy+0xc>
 8005e02:	bd10      	pop	{r4, pc}
 8005e04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e0c:	e7f7      	b.n	8005dfe <memcpy+0x6>

08005e0e <memset>:
 8005e0e:	4402      	add	r2, r0
 8005e10:	4603      	mov	r3, r0
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d100      	bne.n	8005e18 <memset+0xa>
 8005e16:	4770      	bx	lr
 8005e18:	f803 1b01 	strb.w	r1, [r3], #1
 8005e1c:	e7f9      	b.n	8005e12 <memset+0x4>

08005e1e <__cvt>:
 8005e1e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e22:	ec55 4b10 	vmov	r4, r5, d0
 8005e26:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005e28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e2c:	2d00      	cmp	r5, #0
 8005e2e:	460e      	mov	r6, r1
 8005e30:	4691      	mov	r9, r2
 8005e32:	4619      	mov	r1, r3
 8005e34:	bfb8      	it	lt
 8005e36:	4622      	movlt	r2, r4
 8005e38:	462b      	mov	r3, r5
 8005e3a:	f027 0720 	bic.w	r7, r7, #32
 8005e3e:	bfbb      	ittet	lt
 8005e40:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e44:	461d      	movlt	r5, r3
 8005e46:	2300      	movge	r3, #0
 8005e48:	232d      	movlt	r3, #45	; 0x2d
 8005e4a:	bfb8      	it	lt
 8005e4c:	4614      	movlt	r4, r2
 8005e4e:	2f46      	cmp	r7, #70	; 0x46
 8005e50:	700b      	strb	r3, [r1, #0]
 8005e52:	d004      	beq.n	8005e5e <__cvt+0x40>
 8005e54:	2f45      	cmp	r7, #69	; 0x45
 8005e56:	d100      	bne.n	8005e5a <__cvt+0x3c>
 8005e58:	3601      	adds	r6, #1
 8005e5a:	2102      	movs	r1, #2
 8005e5c:	e000      	b.n	8005e60 <__cvt+0x42>
 8005e5e:	2103      	movs	r1, #3
 8005e60:	ab03      	add	r3, sp, #12
 8005e62:	9301      	str	r3, [sp, #4]
 8005e64:	ab02      	add	r3, sp, #8
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	4632      	mov	r2, r6
 8005e6a:	4653      	mov	r3, sl
 8005e6c:	ec45 4b10 	vmov	d0, r4, r5
 8005e70:	f000 fe0e 	bl	8006a90 <_dtoa_r>
 8005e74:	2f47      	cmp	r7, #71	; 0x47
 8005e76:	4680      	mov	r8, r0
 8005e78:	d102      	bne.n	8005e80 <__cvt+0x62>
 8005e7a:	f019 0f01 	tst.w	r9, #1
 8005e7e:	d026      	beq.n	8005ece <__cvt+0xb0>
 8005e80:	2f46      	cmp	r7, #70	; 0x46
 8005e82:	eb08 0906 	add.w	r9, r8, r6
 8005e86:	d111      	bne.n	8005eac <__cvt+0x8e>
 8005e88:	f898 3000 	ldrb.w	r3, [r8]
 8005e8c:	2b30      	cmp	r3, #48	; 0x30
 8005e8e:	d10a      	bne.n	8005ea6 <__cvt+0x88>
 8005e90:	2200      	movs	r2, #0
 8005e92:	2300      	movs	r3, #0
 8005e94:	4620      	mov	r0, r4
 8005e96:	4629      	mov	r1, r5
 8005e98:	f7fa fe36 	bl	8000b08 <__aeabi_dcmpeq>
 8005e9c:	b918      	cbnz	r0, 8005ea6 <__cvt+0x88>
 8005e9e:	f1c6 0601 	rsb	r6, r6, #1
 8005ea2:	f8ca 6000 	str.w	r6, [sl]
 8005ea6:	f8da 3000 	ldr.w	r3, [sl]
 8005eaa:	4499      	add	r9, r3
 8005eac:	2200      	movs	r2, #0
 8005eae:	2300      	movs	r3, #0
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	f7fa fe28 	bl	8000b08 <__aeabi_dcmpeq>
 8005eb8:	b938      	cbnz	r0, 8005eca <__cvt+0xac>
 8005eba:	2230      	movs	r2, #48	; 0x30
 8005ebc:	9b03      	ldr	r3, [sp, #12]
 8005ebe:	454b      	cmp	r3, r9
 8005ec0:	d205      	bcs.n	8005ece <__cvt+0xb0>
 8005ec2:	1c59      	adds	r1, r3, #1
 8005ec4:	9103      	str	r1, [sp, #12]
 8005ec6:	701a      	strb	r2, [r3, #0]
 8005ec8:	e7f8      	b.n	8005ebc <__cvt+0x9e>
 8005eca:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ece:	9b03      	ldr	r3, [sp, #12]
 8005ed0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ed2:	eba3 0308 	sub.w	r3, r3, r8
 8005ed6:	4640      	mov	r0, r8
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	b004      	add	sp, #16
 8005edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005ee0 <__exponent>:
 8005ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ee2:	2900      	cmp	r1, #0
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	bfba      	itte	lt
 8005ee8:	4249      	neglt	r1, r1
 8005eea:	232d      	movlt	r3, #45	; 0x2d
 8005eec:	232b      	movge	r3, #43	; 0x2b
 8005eee:	2909      	cmp	r1, #9
 8005ef0:	f804 2b02 	strb.w	r2, [r4], #2
 8005ef4:	7043      	strb	r3, [r0, #1]
 8005ef6:	dd20      	ble.n	8005f3a <__exponent+0x5a>
 8005ef8:	f10d 0307 	add.w	r3, sp, #7
 8005efc:	461f      	mov	r7, r3
 8005efe:	260a      	movs	r6, #10
 8005f00:	fb91 f5f6 	sdiv	r5, r1, r6
 8005f04:	fb06 1115 	mls	r1, r6, r5, r1
 8005f08:	3130      	adds	r1, #48	; 0x30
 8005f0a:	2d09      	cmp	r5, #9
 8005f0c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f10:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005f14:	4629      	mov	r1, r5
 8005f16:	dc09      	bgt.n	8005f2c <__exponent+0x4c>
 8005f18:	3130      	adds	r1, #48	; 0x30
 8005f1a:	3b02      	subs	r3, #2
 8005f1c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005f20:	42bb      	cmp	r3, r7
 8005f22:	4622      	mov	r2, r4
 8005f24:	d304      	bcc.n	8005f30 <__exponent+0x50>
 8005f26:	1a10      	subs	r0, r2, r0
 8005f28:	b003      	add	sp, #12
 8005f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	e7e7      	b.n	8005f00 <__exponent+0x20>
 8005f30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f34:	f804 2b01 	strb.w	r2, [r4], #1
 8005f38:	e7f2      	b.n	8005f20 <__exponent+0x40>
 8005f3a:	2330      	movs	r3, #48	; 0x30
 8005f3c:	4419      	add	r1, r3
 8005f3e:	7083      	strb	r3, [r0, #2]
 8005f40:	1d02      	adds	r2, r0, #4
 8005f42:	70c1      	strb	r1, [r0, #3]
 8005f44:	e7ef      	b.n	8005f26 <__exponent+0x46>
	...

08005f48 <_printf_float>:
 8005f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4c:	b08d      	sub	sp, #52	; 0x34
 8005f4e:	460c      	mov	r4, r1
 8005f50:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005f54:	4616      	mov	r6, r2
 8005f56:	461f      	mov	r7, r3
 8005f58:	4605      	mov	r5, r0
 8005f5a:	f001 fccb 	bl	80078f4 <_localeconv_r>
 8005f5e:	6803      	ldr	r3, [r0, #0]
 8005f60:	9304      	str	r3, [sp, #16]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fa f954 	bl	8000210 <strlen>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8005f6c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f70:	9005      	str	r0, [sp, #20]
 8005f72:	3307      	adds	r3, #7
 8005f74:	f023 0307 	bic.w	r3, r3, #7
 8005f78:	f103 0208 	add.w	r2, r3, #8
 8005f7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f80:	f8d4 b000 	ldr.w	fp, [r4]
 8005f84:	f8c8 2000 	str.w	r2, [r8]
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f90:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005f94:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f98:	9307      	str	r3, [sp, #28]
 8005f9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fa2:	4ba7      	ldr	r3, [pc, #668]	; (8006240 <_printf_float+0x2f8>)
 8005fa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fa8:	f7fa fde0 	bl	8000b6c <__aeabi_dcmpun>
 8005fac:	bb70      	cbnz	r0, 800600c <_printf_float+0xc4>
 8005fae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fb2:	4ba3      	ldr	r3, [pc, #652]	; (8006240 <_printf_float+0x2f8>)
 8005fb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fb8:	f7fa fdba 	bl	8000b30 <__aeabi_dcmple>
 8005fbc:	bb30      	cbnz	r0, 800600c <_printf_float+0xc4>
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	4649      	mov	r1, r9
 8005fc6:	f7fa fda9 	bl	8000b1c <__aeabi_dcmplt>
 8005fca:	b110      	cbz	r0, 8005fd2 <_printf_float+0x8a>
 8005fcc:	232d      	movs	r3, #45	; 0x2d
 8005fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fd2:	4a9c      	ldr	r2, [pc, #624]	; (8006244 <_printf_float+0x2fc>)
 8005fd4:	4b9c      	ldr	r3, [pc, #624]	; (8006248 <_printf_float+0x300>)
 8005fd6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005fda:	bf8c      	ite	hi
 8005fdc:	4690      	movhi	r8, r2
 8005fde:	4698      	movls	r8, r3
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	f02b 0204 	bic.w	r2, fp, #4
 8005fe6:	6123      	str	r3, [r4, #16]
 8005fe8:	6022      	str	r2, [r4, #0]
 8005fea:	f04f 0900 	mov.w	r9, #0
 8005fee:	9700      	str	r7, [sp, #0]
 8005ff0:	4633      	mov	r3, r6
 8005ff2:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f000 f9e6 	bl	80063c8 <_printf_common>
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	f040 808d 	bne.w	800611c <_printf_float+0x1d4>
 8006002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006006:	b00d      	add	sp, #52	; 0x34
 8006008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600c:	4642      	mov	r2, r8
 800600e:	464b      	mov	r3, r9
 8006010:	4640      	mov	r0, r8
 8006012:	4649      	mov	r1, r9
 8006014:	f7fa fdaa 	bl	8000b6c <__aeabi_dcmpun>
 8006018:	b110      	cbz	r0, 8006020 <_printf_float+0xd8>
 800601a:	4a8c      	ldr	r2, [pc, #560]	; (800624c <_printf_float+0x304>)
 800601c:	4b8c      	ldr	r3, [pc, #560]	; (8006250 <_printf_float+0x308>)
 800601e:	e7da      	b.n	8005fd6 <_printf_float+0x8e>
 8006020:	6861      	ldr	r1, [r4, #4]
 8006022:	1c4b      	adds	r3, r1, #1
 8006024:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006028:	a80a      	add	r0, sp, #40	; 0x28
 800602a:	d13e      	bne.n	80060aa <_printf_float+0x162>
 800602c:	2306      	movs	r3, #6
 800602e:	6063      	str	r3, [r4, #4]
 8006030:	2300      	movs	r3, #0
 8006032:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006036:	ab09      	add	r3, sp, #36	; 0x24
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	ec49 8b10 	vmov	d0, r8, r9
 800603e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006042:	6022      	str	r2, [r4, #0]
 8006044:	f8cd a004 	str.w	sl, [sp, #4]
 8006048:	6861      	ldr	r1, [r4, #4]
 800604a:	4628      	mov	r0, r5
 800604c:	f7ff fee7 	bl	8005e1e <__cvt>
 8006050:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006054:	2b47      	cmp	r3, #71	; 0x47
 8006056:	4680      	mov	r8, r0
 8006058:	d109      	bne.n	800606e <_printf_float+0x126>
 800605a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800605c:	1cd8      	adds	r0, r3, #3
 800605e:	db02      	blt.n	8006066 <_printf_float+0x11e>
 8006060:	6862      	ldr	r2, [r4, #4]
 8006062:	4293      	cmp	r3, r2
 8006064:	dd47      	ble.n	80060f6 <_printf_float+0x1ae>
 8006066:	f1aa 0a02 	sub.w	sl, sl, #2
 800606a:	fa5f fa8a 	uxtb.w	sl, sl
 800606e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006072:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006074:	d824      	bhi.n	80060c0 <_printf_float+0x178>
 8006076:	3901      	subs	r1, #1
 8006078:	4652      	mov	r2, sl
 800607a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800607e:	9109      	str	r1, [sp, #36]	; 0x24
 8006080:	f7ff ff2e 	bl	8005ee0 <__exponent>
 8006084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006086:	1813      	adds	r3, r2, r0
 8006088:	2a01      	cmp	r2, #1
 800608a:	4681      	mov	r9, r0
 800608c:	6123      	str	r3, [r4, #16]
 800608e:	dc02      	bgt.n	8006096 <_printf_float+0x14e>
 8006090:	6822      	ldr	r2, [r4, #0]
 8006092:	07d1      	lsls	r1, r2, #31
 8006094:	d501      	bpl.n	800609a <_printf_float+0x152>
 8006096:	3301      	adds	r3, #1
 8006098:	6123      	str	r3, [r4, #16]
 800609a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0a5      	beq.n	8005fee <_printf_float+0xa6>
 80060a2:	232d      	movs	r3, #45	; 0x2d
 80060a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060a8:	e7a1      	b.n	8005fee <_printf_float+0xa6>
 80060aa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80060ae:	f000 8177 	beq.w	80063a0 <_printf_float+0x458>
 80060b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80060b6:	d1bb      	bne.n	8006030 <_printf_float+0xe8>
 80060b8:	2900      	cmp	r1, #0
 80060ba:	d1b9      	bne.n	8006030 <_printf_float+0xe8>
 80060bc:	2301      	movs	r3, #1
 80060be:	e7b6      	b.n	800602e <_printf_float+0xe6>
 80060c0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80060c4:	d119      	bne.n	80060fa <_printf_float+0x1b2>
 80060c6:	2900      	cmp	r1, #0
 80060c8:	6863      	ldr	r3, [r4, #4]
 80060ca:	dd0c      	ble.n	80060e6 <_printf_float+0x19e>
 80060cc:	6121      	str	r1, [r4, #16]
 80060ce:	b913      	cbnz	r3, 80060d6 <_printf_float+0x18e>
 80060d0:	6822      	ldr	r2, [r4, #0]
 80060d2:	07d2      	lsls	r2, r2, #31
 80060d4:	d502      	bpl.n	80060dc <_printf_float+0x194>
 80060d6:	3301      	adds	r3, #1
 80060d8:	440b      	add	r3, r1
 80060da:	6123      	str	r3, [r4, #16]
 80060dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060de:	65a3      	str	r3, [r4, #88]	; 0x58
 80060e0:	f04f 0900 	mov.w	r9, #0
 80060e4:	e7d9      	b.n	800609a <_printf_float+0x152>
 80060e6:	b913      	cbnz	r3, 80060ee <_printf_float+0x1a6>
 80060e8:	6822      	ldr	r2, [r4, #0]
 80060ea:	07d0      	lsls	r0, r2, #31
 80060ec:	d501      	bpl.n	80060f2 <_printf_float+0x1aa>
 80060ee:	3302      	adds	r3, #2
 80060f0:	e7f3      	b.n	80060da <_printf_float+0x192>
 80060f2:	2301      	movs	r3, #1
 80060f4:	e7f1      	b.n	80060da <_printf_float+0x192>
 80060f6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80060fa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80060fe:	4293      	cmp	r3, r2
 8006100:	db05      	blt.n	800610e <_printf_float+0x1c6>
 8006102:	6822      	ldr	r2, [r4, #0]
 8006104:	6123      	str	r3, [r4, #16]
 8006106:	07d1      	lsls	r1, r2, #31
 8006108:	d5e8      	bpl.n	80060dc <_printf_float+0x194>
 800610a:	3301      	adds	r3, #1
 800610c:	e7e5      	b.n	80060da <_printf_float+0x192>
 800610e:	2b00      	cmp	r3, #0
 8006110:	bfd4      	ite	le
 8006112:	f1c3 0302 	rsble	r3, r3, #2
 8006116:	2301      	movgt	r3, #1
 8006118:	4413      	add	r3, r2
 800611a:	e7de      	b.n	80060da <_printf_float+0x192>
 800611c:	6823      	ldr	r3, [r4, #0]
 800611e:	055a      	lsls	r2, r3, #21
 8006120:	d407      	bmi.n	8006132 <_printf_float+0x1ea>
 8006122:	6923      	ldr	r3, [r4, #16]
 8006124:	4642      	mov	r2, r8
 8006126:	4631      	mov	r1, r6
 8006128:	4628      	mov	r0, r5
 800612a:	47b8      	blx	r7
 800612c:	3001      	adds	r0, #1
 800612e:	d12b      	bne.n	8006188 <_printf_float+0x240>
 8006130:	e767      	b.n	8006002 <_printf_float+0xba>
 8006132:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006136:	f240 80dc 	bls.w	80062f2 <_printf_float+0x3aa>
 800613a:	2200      	movs	r2, #0
 800613c:	2300      	movs	r3, #0
 800613e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006142:	f7fa fce1 	bl	8000b08 <__aeabi_dcmpeq>
 8006146:	2800      	cmp	r0, #0
 8006148:	d033      	beq.n	80061b2 <_printf_float+0x26a>
 800614a:	2301      	movs	r3, #1
 800614c:	4a41      	ldr	r2, [pc, #260]	; (8006254 <_printf_float+0x30c>)
 800614e:	4631      	mov	r1, r6
 8006150:	4628      	mov	r0, r5
 8006152:	47b8      	blx	r7
 8006154:	3001      	adds	r0, #1
 8006156:	f43f af54 	beq.w	8006002 <_printf_float+0xba>
 800615a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800615e:	429a      	cmp	r2, r3
 8006160:	db02      	blt.n	8006168 <_printf_float+0x220>
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	07d8      	lsls	r0, r3, #31
 8006166:	d50f      	bpl.n	8006188 <_printf_float+0x240>
 8006168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800616c:	4631      	mov	r1, r6
 800616e:	4628      	mov	r0, r5
 8006170:	47b8      	blx	r7
 8006172:	3001      	adds	r0, #1
 8006174:	f43f af45 	beq.w	8006002 <_printf_float+0xba>
 8006178:	f04f 0800 	mov.w	r8, #0
 800617c:	f104 091a 	add.w	r9, r4, #26
 8006180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006182:	3b01      	subs	r3, #1
 8006184:	4543      	cmp	r3, r8
 8006186:	dc09      	bgt.n	800619c <_printf_float+0x254>
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	079b      	lsls	r3, r3, #30
 800618c:	f100 8103 	bmi.w	8006396 <_printf_float+0x44e>
 8006190:	68e0      	ldr	r0, [r4, #12]
 8006192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006194:	4298      	cmp	r0, r3
 8006196:	bfb8      	it	lt
 8006198:	4618      	movlt	r0, r3
 800619a:	e734      	b.n	8006006 <_printf_float+0xbe>
 800619c:	2301      	movs	r3, #1
 800619e:	464a      	mov	r2, r9
 80061a0:	4631      	mov	r1, r6
 80061a2:	4628      	mov	r0, r5
 80061a4:	47b8      	blx	r7
 80061a6:	3001      	adds	r0, #1
 80061a8:	f43f af2b 	beq.w	8006002 <_printf_float+0xba>
 80061ac:	f108 0801 	add.w	r8, r8, #1
 80061b0:	e7e6      	b.n	8006180 <_printf_float+0x238>
 80061b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	dc2b      	bgt.n	8006210 <_printf_float+0x2c8>
 80061b8:	2301      	movs	r3, #1
 80061ba:	4a26      	ldr	r2, [pc, #152]	; (8006254 <_printf_float+0x30c>)
 80061bc:	4631      	mov	r1, r6
 80061be:	4628      	mov	r0, r5
 80061c0:	47b8      	blx	r7
 80061c2:	3001      	adds	r0, #1
 80061c4:	f43f af1d 	beq.w	8006002 <_printf_float+0xba>
 80061c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ca:	b923      	cbnz	r3, 80061d6 <_printf_float+0x28e>
 80061cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ce:	b913      	cbnz	r3, 80061d6 <_printf_float+0x28e>
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	07d9      	lsls	r1, r3, #31
 80061d4:	d5d8      	bpl.n	8006188 <_printf_float+0x240>
 80061d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061da:	4631      	mov	r1, r6
 80061dc:	4628      	mov	r0, r5
 80061de:	47b8      	blx	r7
 80061e0:	3001      	adds	r0, #1
 80061e2:	f43f af0e 	beq.w	8006002 <_printf_float+0xba>
 80061e6:	f04f 0900 	mov.w	r9, #0
 80061ea:	f104 0a1a 	add.w	sl, r4, #26
 80061ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f0:	425b      	negs	r3, r3
 80061f2:	454b      	cmp	r3, r9
 80061f4:	dc01      	bgt.n	80061fa <_printf_float+0x2b2>
 80061f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061f8:	e794      	b.n	8006124 <_printf_float+0x1dc>
 80061fa:	2301      	movs	r3, #1
 80061fc:	4652      	mov	r2, sl
 80061fe:	4631      	mov	r1, r6
 8006200:	4628      	mov	r0, r5
 8006202:	47b8      	blx	r7
 8006204:	3001      	adds	r0, #1
 8006206:	f43f aefc 	beq.w	8006002 <_printf_float+0xba>
 800620a:	f109 0901 	add.w	r9, r9, #1
 800620e:	e7ee      	b.n	80061ee <_printf_float+0x2a6>
 8006210:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006212:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006214:	429a      	cmp	r2, r3
 8006216:	bfa8      	it	ge
 8006218:	461a      	movge	r2, r3
 800621a:	2a00      	cmp	r2, #0
 800621c:	4691      	mov	r9, r2
 800621e:	dd07      	ble.n	8006230 <_printf_float+0x2e8>
 8006220:	4613      	mov	r3, r2
 8006222:	4631      	mov	r1, r6
 8006224:	4642      	mov	r2, r8
 8006226:	4628      	mov	r0, r5
 8006228:	47b8      	blx	r7
 800622a:	3001      	adds	r0, #1
 800622c:	f43f aee9 	beq.w	8006002 <_printf_float+0xba>
 8006230:	f104 031a 	add.w	r3, r4, #26
 8006234:	f04f 0b00 	mov.w	fp, #0
 8006238:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800623c:	9306      	str	r3, [sp, #24]
 800623e:	e015      	b.n	800626c <_printf_float+0x324>
 8006240:	7fefffff 	.word	0x7fefffff
 8006244:	080086dc 	.word	0x080086dc
 8006248:	080086d8 	.word	0x080086d8
 800624c:	080086e4 	.word	0x080086e4
 8006250:	080086e0 	.word	0x080086e0
 8006254:	080086e8 	.word	0x080086e8
 8006258:	2301      	movs	r3, #1
 800625a:	9a06      	ldr	r2, [sp, #24]
 800625c:	4631      	mov	r1, r6
 800625e:	4628      	mov	r0, r5
 8006260:	47b8      	blx	r7
 8006262:	3001      	adds	r0, #1
 8006264:	f43f aecd 	beq.w	8006002 <_printf_float+0xba>
 8006268:	f10b 0b01 	add.w	fp, fp, #1
 800626c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006270:	ebaa 0309 	sub.w	r3, sl, r9
 8006274:	455b      	cmp	r3, fp
 8006276:	dcef      	bgt.n	8006258 <_printf_float+0x310>
 8006278:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800627c:	429a      	cmp	r2, r3
 800627e:	44d0      	add	r8, sl
 8006280:	db15      	blt.n	80062ae <_printf_float+0x366>
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	07da      	lsls	r2, r3, #31
 8006286:	d412      	bmi.n	80062ae <_printf_float+0x366>
 8006288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800628a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800628c:	eba3 020a 	sub.w	r2, r3, sl
 8006290:	eba3 0a01 	sub.w	sl, r3, r1
 8006294:	4592      	cmp	sl, r2
 8006296:	bfa8      	it	ge
 8006298:	4692      	movge	sl, r2
 800629a:	f1ba 0f00 	cmp.w	sl, #0
 800629e:	dc0e      	bgt.n	80062be <_printf_float+0x376>
 80062a0:	f04f 0800 	mov.w	r8, #0
 80062a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062a8:	f104 091a 	add.w	r9, r4, #26
 80062ac:	e019      	b.n	80062e2 <_printf_float+0x39a>
 80062ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062b2:	4631      	mov	r1, r6
 80062b4:	4628      	mov	r0, r5
 80062b6:	47b8      	blx	r7
 80062b8:	3001      	adds	r0, #1
 80062ba:	d1e5      	bne.n	8006288 <_printf_float+0x340>
 80062bc:	e6a1      	b.n	8006002 <_printf_float+0xba>
 80062be:	4653      	mov	r3, sl
 80062c0:	4642      	mov	r2, r8
 80062c2:	4631      	mov	r1, r6
 80062c4:	4628      	mov	r0, r5
 80062c6:	47b8      	blx	r7
 80062c8:	3001      	adds	r0, #1
 80062ca:	d1e9      	bne.n	80062a0 <_printf_float+0x358>
 80062cc:	e699      	b.n	8006002 <_printf_float+0xba>
 80062ce:	2301      	movs	r3, #1
 80062d0:	464a      	mov	r2, r9
 80062d2:	4631      	mov	r1, r6
 80062d4:	4628      	mov	r0, r5
 80062d6:	47b8      	blx	r7
 80062d8:	3001      	adds	r0, #1
 80062da:	f43f ae92 	beq.w	8006002 <_printf_float+0xba>
 80062de:	f108 0801 	add.w	r8, r8, #1
 80062e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062e6:	1a9b      	subs	r3, r3, r2
 80062e8:	eba3 030a 	sub.w	r3, r3, sl
 80062ec:	4543      	cmp	r3, r8
 80062ee:	dcee      	bgt.n	80062ce <_printf_float+0x386>
 80062f0:	e74a      	b.n	8006188 <_printf_float+0x240>
 80062f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80062f4:	2a01      	cmp	r2, #1
 80062f6:	dc01      	bgt.n	80062fc <_printf_float+0x3b4>
 80062f8:	07db      	lsls	r3, r3, #31
 80062fa:	d53a      	bpl.n	8006372 <_printf_float+0x42a>
 80062fc:	2301      	movs	r3, #1
 80062fe:	4642      	mov	r2, r8
 8006300:	4631      	mov	r1, r6
 8006302:	4628      	mov	r0, r5
 8006304:	47b8      	blx	r7
 8006306:	3001      	adds	r0, #1
 8006308:	f43f ae7b 	beq.w	8006002 <_printf_float+0xba>
 800630c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006310:	4631      	mov	r1, r6
 8006312:	4628      	mov	r0, r5
 8006314:	47b8      	blx	r7
 8006316:	3001      	adds	r0, #1
 8006318:	f108 0801 	add.w	r8, r8, #1
 800631c:	f43f ae71 	beq.w	8006002 <_printf_float+0xba>
 8006320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006322:	2200      	movs	r2, #0
 8006324:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8006328:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800632c:	2300      	movs	r3, #0
 800632e:	f7fa fbeb 	bl	8000b08 <__aeabi_dcmpeq>
 8006332:	b9c8      	cbnz	r0, 8006368 <_printf_float+0x420>
 8006334:	4653      	mov	r3, sl
 8006336:	4642      	mov	r2, r8
 8006338:	4631      	mov	r1, r6
 800633a:	4628      	mov	r0, r5
 800633c:	47b8      	blx	r7
 800633e:	3001      	adds	r0, #1
 8006340:	d10e      	bne.n	8006360 <_printf_float+0x418>
 8006342:	e65e      	b.n	8006002 <_printf_float+0xba>
 8006344:	2301      	movs	r3, #1
 8006346:	4652      	mov	r2, sl
 8006348:	4631      	mov	r1, r6
 800634a:	4628      	mov	r0, r5
 800634c:	47b8      	blx	r7
 800634e:	3001      	adds	r0, #1
 8006350:	f43f ae57 	beq.w	8006002 <_printf_float+0xba>
 8006354:	f108 0801 	add.w	r8, r8, #1
 8006358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800635a:	3b01      	subs	r3, #1
 800635c:	4543      	cmp	r3, r8
 800635e:	dcf1      	bgt.n	8006344 <_printf_float+0x3fc>
 8006360:	464b      	mov	r3, r9
 8006362:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006366:	e6de      	b.n	8006126 <_printf_float+0x1de>
 8006368:	f04f 0800 	mov.w	r8, #0
 800636c:	f104 0a1a 	add.w	sl, r4, #26
 8006370:	e7f2      	b.n	8006358 <_printf_float+0x410>
 8006372:	2301      	movs	r3, #1
 8006374:	e7df      	b.n	8006336 <_printf_float+0x3ee>
 8006376:	2301      	movs	r3, #1
 8006378:	464a      	mov	r2, r9
 800637a:	4631      	mov	r1, r6
 800637c:	4628      	mov	r0, r5
 800637e:	47b8      	blx	r7
 8006380:	3001      	adds	r0, #1
 8006382:	f43f ae3e 	beq.w	8006002 <_printf_float+0xba>
 8006386:	f108 0801 	add.w	r8, r8, #1
 800638a:	68e3      	ldr	r3, [r4, #12]
 800638c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800638e:	1a9b      	subs	r3, r3, r2
 8006390:	4543      	cmp	r3, r8
 8006392:	dcf0      	bgt.n	8006376 <_printf_float+0x42e>
 8006394:	e6fc      	b.n	8006190 <_printf_float+0x248>
 8006396:	f04f 0800 	mov.w	r8, #0
 800639a:	f104 0919 	add.w	r9, r4, #25
 800639e:	e7f4      	b.n	800638a <_printf_float+0x442>
 80063a0:	2900      	cmp	r1, #0
 80063a2:	f43f ae8b 	beq.w	80060bc <_printf_float+0x174>
 80063a6:	2300      	movs	r3, #0
 80063a8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80063ac:	ab09      	add	r3, sp, #36	; 0x24
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	ec49 8b10 	vmov	d0, r8, r9
 80063b4:	6022      	str	r2, [r4, #0]
 80063b6:	f8cd a004 	str.w	sl, [sp, #4]
 80063ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80063be:	4628      	mov	r0, r5
 80063c0:	f7ff fd2d 	bl	8005e1e <__cvt>
 80063c4:	4680      	mov	r8, r0
 80063c6:	e648      	b.n	800605a <_printf_float+0x112>

080063c8 <_printf_common>:
 80063c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063cc:	4691      	mov	r9, r2
 80063ce:	461f      	mov	r7, r3
 80063d0:	688a      	ldr	r2, [r1, #8]
 80063d2:	690b      	ldr	r3, [r1, #16]
 80063d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80063d8:	4293      	cmp	r3, r2
 80063da:	bfb8      	it	lt
 80063dc:	4613      	movlt	r3, r2
 80063de:	f8c9 3000 	str.w	r3, [r9]
 80063e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063e6:	4606      	mov	r6, r0
 80063e8:	460c      	mov	r4, r1
 80063ea:	b112      	cbz	r2, 80063f2 <_printf_common+0x2a>
 80063ec:	3301      	adds	r3, #1
 80063ee:	f8c9 3000 	str.w	r3, [r9]
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	0699      	lsls	r1, r3, #26
 80063f6:	bf42      	ittt	mi
 80063f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80063fc:	3302      	addmi	r3, #2
 80063fe:	f8c9 3000 	strmi.w	r3, [r9]
 8006402:	6825      	ldr	r5, [r4, #0]
 8006404:	f015 0506 	ands.w	r5, r5, #6
 8006408:	d107      	bne.n	800641a <_printf_common+0x52>
 800640a:	f104 0a19 	add.w	sl, r4, #25
 800640e:	68e3      	ldr	r3, [r4, #12]
 8006410:	f8d9 2000 	ldr.w	r2, [r9]
 8006414:	1a9b      	subs	r3, r3, r2
 8006416:	42ab      	cmp	r3, r5
 8006418:	dc28      	bgt.n	800646c <_printf_common+0xa4>
 800641a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800641e:	6822      	ldr	r2, [r4, #0]
 8006420:	3300      	adds	r3, #0
 8006422:	bf18      	it	ne
 8006424:	2301      	movne	r3, #1
 8006426:	0692      	lsls	r2, r2, #26
 8006428:	d42d      	bmi.n	8006486 <_printf_common+0xbe>
 800642a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800642e:	4639      	mov	r1, r7
 8006430:	4630      	mov	r0, r6
 8006432:	47c0      	blx	r8
 8006434:	3001      	adds	r0, #1
 8006436:	d020      	beq.n	800647a <_printf_common+0xb2>
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	68e5      	ldr	r5, [r4, #12]
 800643c:	f8d9 2000 	ldr.w	r2, [r9]
 8006440:	f003 0306 	and.w	r3, r3, #6
 8006444:	2b04      	cmp	r3, #4
 8006446:	bf08      	it	eq
 8006448:	1aad      	subeq	r5, r5, r2
 800644a:	68a3      	ldr	r3, [r4, #8]
 800644c:	6922      	ldr	r2, [r4, #16]
 800644e:	bf0c      	ite	eq
 8006450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006454:	2500      	movne	r5, #0
 8006456:	4293      	cmp	r3, r2
 8006458:	bfc4      	itt	gt
 800645a:	1a9b      	subgt	r3, r3, r2
 800645c:	18ed      	addgt	r5, r5, r3
 800645e:	f04f 0900 	mov.w	r9, #0
 8006462:	341a      	adds	r4, #26
 8006464:	454d      	cmp	r5, r9
 8006466:	d11a      	bne.n	800649e <_printf_common+0xd6>
 8006468:	2000      	movs	r0, #0
 800646a:	e008      	b.n	800647e <_printf_common+0xb6>
 800646c:	2301      	movs	r3, #1
 800646e:	4652      	mov	r2, sl
 8006470:	4639      	mov	r1, r7
 8006472:	4630      	mov	r0, r6
 8006474:	47c0      	blx	r8
 8006476:	3001      	adds	r0, #1
 8006478:	d103      	bne.n	8006482 <_printf_common+0xba>
 800647a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800647e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006482:	3501      	adds	r5, #1
 8006484:	e7c3      	b.n	800640e <_printf_common+0x46>
 8006486:	18e1      	adds	r1, r4, r3
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	2030      	movs	r0, #48	; 0x30
 800648c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006490:	4422      	add	r2, r4
 8006492:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006496:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800649a:	3302      	adds	r3, #2
 800649c:	e7c5      	b.n	800642a <_printf_common+0x62>
 800649e:	2301      	movs	r3, #1
 80064a0:	4622      	mov	r2, r4
 80064a2:	4639      	mov	r1, r7
 80064a4:	4630      	mov	r0, r6
 80064a6:	47c0      	blx	r8
 80064a8:	3001      	adds	r0, #1
 80064aa:	d0e6      	beq.n	800647a <_printf_common+0xb2>
 80064ac:	f109 0901 	add.w	r9, r9, #1
 80064b0:	e7d8      	b.n	8006464 <_printf_common+0x9c>
	...

080064b4 <_printf_i>:
 80064b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80064bc:	460c      	mov	r4, r1
 80064be:	7e09      	ldrb	r1, [r1, #24]
 80064c0:	b085      	sub	sp, #20
 80064c2:	296e      	cmp	r1, #110	; 0x6e
 80064c4:	4617      	mov	r7, r2
 80064c6:	4606      	mov	r6, r0
 80064c8:	4698      	mov	r8, r3
 80064ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064cc:	f000 80b3 	beq.w	8006636 <_printf_i+0x182>
 80064d0:	d822      	bhi.n	8006518 <_printf_i+0x64>
 80064d2:	2963      	cmp	r1, #99	; 0x63
 80064d4:	d036      	beq.n	8006544 <_printf_i+0x90>
 80064d6:	d80a      	bhi.n	80064ee <_printf_i+0x3a>
 80064d8:	2900      	cmp	r1, #0
 80064da:	f000 80b9 	beq.w	8006650 <_printf_i+0x19c>
 80064de:	2958      	cmp	r1, #88	; 0x58
 80064e0:	f000 8083 	beq.w	80065ea <_printf_i+0x136>
 80064e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80064ec:	e032      	b.n	8006554 <_printf_i+0xa0>
 80064ee:	2964      	cmp	r1, #100	; 0x64
 80064f0:	d001      	beq.n	80064f6 <_printf_i+0x42>
 80064f2:	2969      	cmp	r1, #105	; 0x69
 80064f4:	d1f6      	bne.n	80064e4 <_printf_i+0x30>
 80064f6:	6820      	ldr	r0, [r4, #0]
 80064f8:	6813      	ldr	r3, [r2, #0]
 80064fa:	0605      	lsls	r5, r0, #24
 80064fc:	f103 0104 	add.w	r1, r3, #4
 8006500:	d52a      	bpl.n	8006558 <_printf_i+0xa4>
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6011      	str	r1, [r2, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	da03      	bge.n	8006512 <_printf_i+0x5e>
 800650a:	222d      	movs	r2, #45	; 0x2d
 800650c:	425b      	negs	r3, r3
 800650e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006512:	486f      	ldr	r0, [pc, #444]	; (80066d0 <_printf_i+0x21c>)
 8006514:	220a      	movs	r2, #10
 8006516:	e039      	b.n	800658c <_printf_i+0xd8>
 8006518:	2973      	cmp	r1, #115	; 0x73
 800651a:	f000 809d 	beq.w	8006658 <_printf_i+0x1a4>
 800651e:	d808      	bhi.n	8006532 <_printf_i+0x7e>
 8006520:	296f      	cmp	r1, #111	; 0x6f
 8006522:	d020      	beq.n	8006566 <_printf_i+0xb2>
 8006524:	2970      	cmp	r1, #112	; 0x70
 8006526:	d1dd      	bne.n	80064e4 <_printf_i+0x30>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	f043 0320 	orr.w	r3, r3, #32
 800652e:	6023      	str	r3, [r4, #0]
 8006530:	e003      	b.n	800653a <_printf_i+0x86>
 8006532:	2975      	cmp	r1, #117	; 0x75
 8006534:	d017      	beq.n	8006566 <_printf_i+0xb2>
 8006536:	2978      	cmp	r1, #120	; 0x78
 8006538:	d1d4      	bne.n	80064e4 <_printf_i+0x30>
 800653a:	2378      	movs	r3, #120	; 0x78
 800653c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006540:	4864      	ldr	r0, [pc, #400]	; (80066d4 <_printf_i+0x220>)
 8006542:	e055      	b.n	80065f0 <_printf_i+0x13c>
 8006544:	6813      	ldr	r3, [r2, #0]
 8006546:	1d19      	adds	r1, r3, #4
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6011      	str	r1, [r2, #0]
 800654c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006554:	2301      	movs	r3, #1
 8006556:	e08c      	b.n	8006672 <_printf_i+0x1be>
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6011      	str	r1, [r2, #0]
 800655c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006560:	bf18      	it	ne
 8006562:	b21b      	sxthne	r3, r3
 8006564:	e7cf      	b.n	8006506 <_printf_i+0x52>
 8006566:	6813      	ldr	r3, [r2, #0]
 8006568:	6825      	ldr	r5, [r4, #0]
 800656a:	1d18      	adds	r0, r3, #4
 800656c:	6010      	str	r0, [r2, #0]
 800656e:	0628      	lsls	r0, r5, #24
 8006570:	d501      	bpl.n	8006576 <_printf_i+0xc2>
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	e002      	b.n	800657c <_printf_i+0xc8>
 8006576:	0668      	lsls	r0, r5, #25
 8006578:	d5fb      	bpl.n	8006572 <_printf_i+0xbe>
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	4854      	ldr	r0, [pc, #336]	; (80066d0 <_printf_i+0x21c>)
 800657e:	296f      	cmp	r1, #111	; 0x6f
 8006580:	bf14      	ite	ne
 8006582:	220a      	movne	r2, #10
 8006584:	2208      	moveq	r2, #8
 8006586:	2100      	movs	r1, #0
 8006588:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800658c:	6865      	ldr	r5, [r4, #4]
 800658e:	60a5      	str	r5, [r4, #8]
 8006590:	2d00      	cmp	r5, #0
 8006592:	f2c0 8095 	blt.w	80066c0 <_printf_i+0x20c>
 8006596:	6821      	ldr	r1, [r4, #0]
 8006598:	f021 0104 	bic.w	r1, r1, #4
 800659c:	6021      	str	r1, [r4, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d13d      	bne.n	800661e <_printf_i+0x16a>
 80065a2:	2d00      	cmp	r5, #0
 80065a4:	f040 808e 	bne.w	80066c4 <_printf_i+0x210>
 80065a8:	4665      	mov	r5, ip
 80065aa:	2a08      	cmp	r2, #8
 80065ac:	d10b      	bne.n	80065c6 <_printf_i+0x112>
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	07db      	lsls	r3, r3, #31
 80065b2:	d508      	bpl.n	80065c6 <_printf_i+0x112>
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	6862      	ldr	r2, [r4, #4]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	bfde      	ittt	le
 80065bc:	2330      	movle	r3, #48	; 0x30
 80065be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065c2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80065c6:	ebac 0305 	sub.w	r3, ip, r5
 80065ca:	6123      	str	r3, [r4, #16]
 80065cc:	f8cd 8000 	str.w	r8, [sp]
 80065d0:	463b      	mov	r3, r7
 80065d2:	aa03      	add	r2, sp, #12
 80065d4:	4621      	mov	r1, r4
 80065d6:	4630      	mov	r0, r6
 80065d8:	f7ff fef6 	bl	80063c8 <_printf_common>
 80065dc:	3001      	adds	r0, #1
 80065de:	d14d      	bne.n	800667c <_printf_i+0x1c8>
 80065e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065e4:	b005      	add	sp, #20
 80065e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065ea:	4839      	ldr	r0, [pc, #228]	; (80066d0 <_printf_i+0x21c>)
 80065ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80065f0:	6813      	ldr	r3, [r2, #0]
 80065f2:	6821      	ldr	r1, [r4, #0]
 80065f4:	1d1d      	adds	r5, r3, #4
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6015      	str	r5, [r2, #0]
 80065fa:	060a      	lsls	r2, r1, #24
 80065fc:	d50b      	bpl.n	8006616 <_printf_i+0x162>
 80065fe:	07ca      	lsls	r2, r1, #31
 8006600:	bf44      	itt	mi
 8006602:	f041 0120 	orrmi.w	r1, r1, #32
 8006606:	6021      	strmi	r1, [r4, #0]
 8006608:	b91b      	cbnz	r3, 8006612 <_printf_i+0x15e>
 800660a:	6822      	ldr	r2, [r4, #0]
 800660c:	f022 0220 	bic.w	r2, r2, #32
 8006610:	6022      	str	r2, [r4, #0]
 8006612:	2210      	movs	r2, #16
 8006614:	e7b7      	b.n	8006586 <_printf_i+0xd2>
 8006616:	064d      	lsls	r5, r1, #25
 8006618:	bf48      	it	mi
 800661a:	b29b      	uxthmi	r3, r3
 800661c:	e7ef      	b.n	80065fe <_printf_i+0x14a>
 800661e:	4665      	mov	r5, ip
 8006620:	fbb3 f1f2 	udiv	r1, r3, r2
 8006624:	fb02 3311 	mls	r3, r2, r1, r3
 8006628:	5cc3      	ldrb	r3, [r0, r3]
 800662a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800662e:	460b      	mov	r3, r1
 8006630:	2900      	cmp	r1, #0
 8006632:	d1f5      	bne.n	8006620 <_printf_i+0x16c>
 8006634:	e7b9      	b.n	80065aa <_printf_i+0xf6>
 8006636:	6813      	ldr	r3, [r2, #0]
 8006638:	6825      	ldr	r5, [r4, #0]
 800663a:	6961      	ldr	r1, [r4, #20]
 800663c:	1d18      	adds	r0, r3, #4
 800663e:	6010      	str	r0, [r2, #0]
 8006640:	0628      	lsls	r0, r5, #24
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	d501      	bpl.n	800664a <_printf_i+0x196>
 8006646:	6019      	str	r1, [r3, #0]
 8006648:	e002      	b.n	8006650 <_printf_i+0x19c>
 800664a:	066a      	lsls	r2, r5, #25
 800664c:	d5fb      	bpl.n	8006646 <_printf_i+0x192>
 800664e:	8019      	strh	r1, [r3, #0]
 8006650:	2300      	movs	r3, #0
 8006652:	6123      	str	r3, [r4, #16]
 8006654:	4665      	mov	r5, ip
 8006656:	e7b9      	b.n	80065cc <_printf_i+0x118>
 8006658:	6813      	ldr	r3, [r2, #0]
 800665a:	1d19      	adds	r1, r3, #4
 800665c:	6011      	str	r1, [r2, #0]
 800665e:	681d      	ldr	r5, [r3, #0]
 8006660:	6862      	ldr	r2, [r4, #4]
 8006662:	2100      	movs	r1, #0
 8006664:	4628      	mov	r0, r5
 8006666:	f7f9 fddb 	bl	8000220 <memchr>
 800666a:	b108      	cbz	r0, 8006670 <_printf_i+0x1bc>
 800666c:	1b40      	subs	r0, r0, r5
 800666e:	6060      	str	r0, [r4, #4]
 8006670:	6863      	ldr	r3, [r4, #4]
 8006672:	6123      	str	r3, [r4, #16]
 8006674:	2300      	movs	r3, #0
 8006676:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800667a:	e7a7      	b.n	80065cc <_printf_i+0x118>
 800667c:	6923      	ldr	r3, [r4, #16]
 800667e:	462a      	mov	r2, r5
 8006680:	4639      	mov	r1, r7
 8006682:	4630      	mov	r0, r6
 8006684:	47c0      	blx	r8
 8006686:	3001      	adds	r0, #1
 8006688:	d0aa      	beq.n	80065e0 <_printf_i+0x12c>
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	079b      	lsls	r3, r3, #30
 800668e:	d413      	bmi.n	80066b8 <_printf_i+0x204>
 8006690:	68e0      	ldr	r0, [r4, #12]
 8006692:	9b03      	ldr	r3, [sp, #12]
 8006694:	4298      	cmp	r0, r3
 8006696:	bfb8      	it	lt
 8006698:	4618      	movlt	r0, r3
 800669a:	e7a3      	b.n	80065e4 <_printf_i+0x130>
 800669c:	2301      	movs	r3, #1
 800669e:	464a      	mov	r2, r9
 80066a0:	4639      	mov	r1, r7
 80066a2:	4630      	mov	r0, r6
 80066a4:	47c0      	blx	r8
 80066a6:	3001      	adds	r0, #1
 80066a8:	d09a      	beq.n	80065e0 <_printf_i+0x12c>
 80066aa:	3501      	adds	r5, #1
 80066ac:	68e3      	ldr	r3, [r4, #12]
 80066ae:	9a03      	ldr	r2, [sp, #12]
 80066b0:	1a9b      	subs	r3, r3, r2
 80066b2:	42ab      	cmp	r3, r5
 80066b4:	dcf2      	bgt.n	800669c <_printf_i+0x1e8>
 80066b6:	e7eb      	b.n	8006690 <_printf_i+0x1dc>
 80066b8:	2500      	movs	r5, #0
 80066ba:	f104 0919 	add.w	r9, r4, #25
 80066be:	e7f5      	b.n	80066ac <_printf_i+0x1f8>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1ac      	bne.n	800661e <_printf_i+0x16a>
 80066c4:	7803      	ldrb	r3, [r0, #0]
 80066c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066ce:	e76c      	b.n	80065aa <_printf_i+0xf6>
 80066d0:	080086ea 	.word	0x080086ea
 80066d4:	080086fb 	.word	0x080086fb

080066d8 <iprintf>:
 80066d8:	b40f      	push	{r0, r1, r2, r3}
 80066da:	4b0a      	ldr	r3, [pc, #40]	; (8006704 <iprintf+0x2c>)
 80066dc:	b513      	push	{r0, r1, r4, lr}
 80066de:	681c      	ldr	r4, [r3, #0]
 80066e0:	b124      	cbz	r4, 80066ec <iprintf+0x14>
 80066e2:	69a3      	ldr	r3, [r4, #24]
 80066e4:	b913      	cbnz	r3, 80066ec <iprintf+0x14>
 80066e6:	4620      	mov	r0, r4
 80066e8:	f001 f87a 	bl	80077e0 <__sinit>
 80066ec:	ab05      	add	r3, sp, #20
 80066ee:	9a04      	ldr	r2, [sp, #16]
 80066f0:	68a1      	ldr	r1, [r4, #8]
 80066f2:	9301      	str	r3, [sp, #4]
 80066f4:	4620      	mov	r0, r4
 80066f6:	f001 fd33 	bl	8008160 <_vfiprintf_r>
 80066fa:	b002      	add	sp, #8
 80066fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006700:	b004      	add	sp, #16
 8006702:	4770      	bx	lr
 8006704:	2000000c 	.word	0x2000000c

08006708 <putchar>:
 8006708:	b538      	push	{r3, r4, r5, lr}
 800670a:	4b08      	ldr	r3, [pc, #32]	; (800672c <putchar+0x24>)
 800670c:	681c      	ldr	r4, [r3, #0]
 800670e:	4605      	mov	r5, r0
 8006710:	b124      	cbz	r4, 800671c <putchar+0x14>
 8006712:	69a3      	ldr	r3, [r4, #24]
 8006714:	b913      	cbnz	r3, 800671c <putchar+0x14>
 8006716:	4620      	mov	r0, r4
 8006718:	f001 f862 	bl	80077e0 <__sinit>
 800671c:	68a2      	ldr	r2, [r4, #8]
 800671e:	4629      	mov	r1, r5
 8006720:	4620      	mov	r0, r4
 8006722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006726:	f001 be31 	b.w	800838c <_putc_r>
 800672a:	bf00      	nop
 800672c:	2000000c 	.word	0x2000000c

08006730 <_puts_r>:
 8006730:	b570      	push	{r4, r5, r6, lr}
 8006732:	460e      	mov	r6, r1
 8006734:	4605      	mov	r5, r0
 8006736:	b118      	cbz	r0, 8006740 <_puts_r+0x10>
 8006738:	6983      	ldr	r3, [r0, #24]
 800673a:	b90b      	cbnz	r3, 8006740 <_puts_r+0x10>
 800673c:	f001 f850 	bl	80077e0 <__sinit>
 8006740:	69ab      	ldr	r3, [r5, #24]
 8006742:	68ac      	ldr	r4, [r5, #8]
 8006744:	b913      	cbnz	r3, 800674c <_puts_r+0x1c>
 8006746:	4628      	mov	r0, r5
 8006748:	f001 f84a 	bl	80077e0 <__sinit>
 800674c:	4b23      	ldr	r3, [pc, #140]	; (80067dc <_puts_r+0xac>)
 800674e:	429c      	cmp	r4, r3
 8006750:	d117      	bne.n	8006782 <_puts_r+0x52>
 8006752:	686c      	ldr	r4, [r5, #4]
 8006754:	89a3      	ldrh	r3, [r4, #12]
 8006756:	071b      	lsls	r3, r3, #28
 8006758:	d51d      	bpl.n	8006796 <_puts_r+0x66>
 800675a:	6923      	ldr	r3, [r4, #16]
 800675c:	b1db      	cbz	r3, 8006796 <_puts_r+0x66>
 800675e:	3e01      	subs	r6, #1
 8006760:	68a3      	ldr	r3, [r4, #8]
 8006762:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006766:	3b01      	subs	r3, #1
 8006768:	60a3      	str	r3, [r4, #8]
 800676a:	b9e9      	cbnz	r1, 80067a8 <_puts_r+0x78>
 800676c:	2b00      	cmp	r3, #0
 800676e:	da2e      	bge.n	80067ce <_puts_r+0x9e>
 8006770:	4622      	mov	r2, r4
 8006772:	210a      	movs	r1, #10
 8006774:	4628      	mov	r0, r5
 8006776:	f000 f83f 	bl	80067f8 <__swbuf_r>
 800677a:	3001      	adds	r0, #1
 800677c:	d011      	beq.n	80067a2 <_puts_r+0x72>
 800677e:	200a      	movs	r0, #10
 8006780:	e011      	b.n	80067a6 <_puts_r+0x76>
 8006782:	4b17      	ldr	r3, [pc, #92]	; (80067e0 <_puts_r+0xb0>)
 8006784:	429c      	cmp	r4, r3
 8006786:	d101      	bne.n	800678c <_puts_r+0x5c>
 8006788:	68ac      	ldr	r4, [r5, #8]
 800678a:	e7e3      	b.n	8006754 <_puts_r+0x24>
 800678c:	4b15      	ldr	r3, [pc, #84]	; (80067e4 <_puts_r+0xb4>)
 800678e:	429c      	cmp	r4, r3
 8006790:	bf08      	it	eq
 8006792:	68ec      	ldreq	r4, [r5, #12]
 8006794:	e7de      	b.n	8006754 <_puts_r+0x24>
 8006796:	4621      	mov	r1, r4
 8006798:	4628      	mov	r0, r5
 800679a:	f000 f87f 	bl	800689c <__swsetup_r>
 800679e:	2800      	cmp	r0, #0
 80067a0:	d0dd      	beq.n	800675e <_puts_r+0x2e>
 80067a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067a6:	bd70      	pop	{r4, r5, r6, pc}
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	da04      	bge.n	80067b6 <_puts_r+0x86>
 80067ac:	69a2      	ldr	r2, [r4, #24]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	dc06      	bgt.n	80067c0 <_puts_r+0x90>
 80067b2:	290a      	cmp	r1, #10
 80067b4:	d004      	beq.n	80067c0 <_puts_r+0x90>
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	6022      	str	r2, [r4, #0]
 80067bc:	7019      	strb	r1, [r3, #0]
 80067be:	e7cf      	b.n	8006760 <_puts_r+0x30>
 80067c0:	4622      	mov	r2, r4
 80067c2:	4628      	mov	r0, r5
 80067c4:	f000 f818 	bl	80067f8 <__swbuf_r>
 80067c8:	3001      	adds	r0, #1
 80067ca:	d1c9      	bne.n	8006760 <_puts_r+0x30>
 80067cc:	e7e9      	b.n	80067a2 <_puts_r+0x72>
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	200a      	movs	r0, #10
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	6022      	str	r2, [r4, #0]
 80067d6:	7018      	strb	r0, [r3, #0]
 80067d8:	e7e5      	b.n	80067a6 <_puts_r+0x76>
 80067da:	bf00      	nop
 80067dc:	0800873c 	.word	0x0800873c
 80067e0:	0800875c 	.word	0x0800875c
 80067e4:	0800871c 	.word	0x0800871c

080067e8 <puts>:
 80067e8:	4b02      	ldr	r3, [pc, #8]	; (80067f4 <puts+0xc>)
 80067ea:	4601      	mov	r1, r0
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	f7ff bf9f 	b.w	8006730 <_puts_r>
 80067f2:	bf00      	nop
 80067f4:	2000000c 	.word	0x2000000c

080067f8 <__swbuf_r>:
 80067f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067fa:	460e      	mov	r6, r1
 80067fc:	4614      	mov	r4, r2
 80067fe:	4605      	mov	r5, r0
 8006800:	b118      	cbz	r0, 800680a <__swbuf_r+0x12>
 8006802:	6983      	ldr	r3, [r0, #24]
 8006804:	b90b      	cbnz	r3, 800680a <__swbuf_r+0x12>
 8006806:	f000 ffeb 	bl	80077e0 <__sinit>
 800680a:	4b21      	ldr	r3, [pc, #132]	; (8006890 <__swbuf_r+0x98>)
 800680c:	429c      	cmp	r4, r3
 800680e:	d12a      	bne.n	8006866 <__swbuf_r+0x6e>
 8006810:	686c      	ldr	r4, [r5, #4]
 8006812:	69a3      	ldr	r3, [r4, #24]
 8006814:	60a3      	str	r3, [r4, #8]
 8006816:	89a3      	ldrh	r3, [r4, #12]
 8006818:	071a      	lsls	r2, r3, #28
 800681a:	d52e      	bpl.n	800687a <__swbuf_r+0x82>
 800681c:	6923      	ldr	r3, [r4, #16]
 800681e:	b363      	cbz	r3, 800687a <__swbuf_r+0x82>
 8006820:	6923      	ldr	r3, [r4, #16]
 8006822:	6820      	ldr	r0, [r4, #0]
 8006824:	1ac0      	subs	r0, r0, r3
 8006826:	6963      	ldr	r3, [r4, #20]
 8006828:	b2f6      	uxtb	r6, r6
 800682a:	4283      	cmp	r3, r0
 800682c:	4637      	mov	r7, r6
 800682e:	dc04      	bgt.n	800683a <__swbuf_r+0x42>
 8006830:	4621      	mov	r1, r4
 8006832:	4628      	mov	r0, r5
 8006834:	f000 ff6a 	bl	800770c <_fflush_r>
 8006838:	bb28      	cbnz	r0, 8006886 <__swbuf_r+0x8e>
 800683a:	68a3      	ldr	r3, [r4, #8]
 800683c:	3b01      	subs	r3, #1
 800683e:	60a3      	str	r3, [r4, #8]
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	1c5a      	adds	r2, r3, #1
 8006844:	6022      	str	r2, [r4, #0]
 8006846:	701e      	strb	r6, [r3, #0]
 8006848:	6963      	ldr	r3, [r4, #20]
 800684a:	3001      	adds	r0, #1
 800684c:	4283      	cmp	r3, r0
 800684e:	d004      	beq.n	800685a <__swbuf_r+0x62>
 8006850:	89a3      	ldrh	r3, [r4, #12]
 8006852:	07db      	lsls	r3, r3, #31
 8006854:	d519      	bpl.n	800688a <__swbuf_r+0x92>
 8006856:	2e0a      	cmp	r6, #10
 8006858:	d117      	bne.n	800688a <__swbuf_r+0x92>
 800685a:	4621      	mov	r1, r4
 800685c:	4628      	mov	r0, r5
 800685e:	f000 ff55 	bl	800770c <_fflush_r>
 8006862:	b190      	cbz	r0, 800688a <__swbuf_r+0x92>
 8006864:	e00f      	b.n	8006886 <__swbuf_r+0x8e>
 8006866:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <__swbuf_r+0x9c>)
 8006868:	429c      	cmp	r4, r3
 800686a:	d101      	bne.n	8006870 <__swbuf_r+0x78>
 800686c:	68ac      	ldr	r4, [r5, #8]
 800686e:	e7d0      	b.n	8006812 <__swbuf_r+0x1a>
 8006870:	4b09      	ldr	r3, [pc, #36]	; (8006898 <__swbuf_r+0xa0>)
 8006872:	429c      	cmp	r4, r3
 8006874:	bf08      	it	eq
 8006876:	68ec      	ldreq	r4, [r5, #12]
 8006878:	e7cb      	b.n	8006812 <__swbuf_r+0x1a>
 800687a:	4621      	mov	r1, r4
 800687c:	4628      	mov	r0, r5
 800687e:	f000 f80d 	bl	800689c <__swsetup_r>
 8006882:	2800      	cmp	r0, #0
 8006884:	d0cc      	beq.n	8006820 <__swbuf_r+0x28>
 8006886:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800688a:	4638      	mov	r0, r7
 800688c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800688e:	bf00      	nop
 8006890:	0800873c 	.word	0x0800873c
 8006894:	0800875c 	.word	0x0800875c
 8006898:	0800871c 	.word	0x0800871c

0800689c <__swsetup_r>:
 800689c:	4b32      	ldr	r3, [pc, #200]	; (8006968 <__swsetup_r+0xcc>)
 800689e:	b570      	push	{r4, r5, r6, lr}
 80068a0:	681d      	ldr	r5, [r3, #0]
 80068a2:	4606      	mov	r6, r0
 80068a4:	460c      	mov	r4, r1
 80068a6:	b125      	cbz	r5, 80068b2 <__swsetup_r+0x16>
 80068a8:	69ab      	ldr	r3, [r5, #24]
 80068aa:	b913      	cbnz	r3, 80068b2 <__swsetup_r+0x16>
 80068ac:	4628      	mov	r0, r5
 80068ae:	f000 ff97 	bl	80077e0 <__sinit>
 80068b2:	4b2e      	ldr	r3, [pc, #184]	; (800696c <__swsetup_r+0xd0>)
 80068b4:	429c      	cmp	r4, r3
 80068b6:	d10f      	bne.n	80068d8 <__swsetup_r+0x3c>
 80068b8:	686c      	ldr	r4, [r5, #4]
 80068ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068be:	b29a      	uxth	r2, r3
 80068c0:	0715      	lsls	r5, r2, #28
 80068c2:	d42c      	bmi.n	800691e <__swsetup_r+0x82>
 80068c4:	06d0      	lsls	r0, r2, #27
 80068c6:	d411      	bmi.n	80068ec <__swsetup_r+0x50>
 80068c8:	2209      	movs	r2, #9
 80068ca:	6032      	str	r2, [r6, #0]
 80068cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068d0:	81a3      	strh	r3, [r4, #12]
 80068d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068d6:	e03e      	b.n	8006956 <__swsetup_r+0xba>
 80068d8:	4b25      	ldr	r3, [pc, #148]	; (8006970 <__swsetup_r+0xd4>)
 80068da:	429c      	cmp	r4, r3
 80068dc:	d101      	bne.n	80068e2 <__swsetup_r+0x46>
 80068de:	68ac      	ldr	r4, [r5, #8]
 80068e0:	e7eb      	b.n	80068ba <__swsetup_r+0x1e>
 80068e2:	4b24      	ldr	r3, [pc, #144]	; (8006974 <__swsetup_r+0xd8>)
 80068e4:	429c      	cmp	r4, r3
 80068e6:	bf08      	it	eq
 80068e8:	68ec      	ldreq	r4, [r5, #12]
 80068ea:	e7e6      	b.n	80068ba <__swsetup_r+0x1e>
 80068ec:	0751      	lsls	r1, r2, #29
 80068ee:	d512      	bpl.n	8006916 <__swsetup_r+0x7a>
 80068f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068f2:	b141      	cbz	r1, 8006906 <__swsetup_r+0x6a>
 80068f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068f8:	4299      	cmp	r1, r3
 80068fa:	d002      	beq.n	8006902 <__swsetup_r+0x66>
 80068fc:	4630      	mov	r0, r6
 80068fe:	f001 fb5d 	bl	8007fbc <_free_r>
 8006902:	2300      	movs	r3, #0
 8006904:	6363      	str	r3, [r4, #52]	; 0x34
 8006906:	89a3      	ldrh	r3, [r4, #12]
 8006908:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800690c:	81a3      	strh	r3, [r4, #12]
 800690e:	2300      	movs	r3, #0
 8006910:	6063      	str	r3, [r4, #4]
 8006912:	6923      	ldr	r3, [r4, #16]
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	89a3      	ldrh	r3, [r4, #12]
 8006918:	f043 0308 	orr.w	r3, r3, #8
 800691c:	81a3      	strh	r3, [r4, #12]
 800691e:	6923      	ldr	r3, [r4, #16]
 8006920:	b94b      	cbnz	r3, 8006936 <__swsetup_r+0x9a>
 8006922:	89a3      	ldrh	r3, [r4, #12]
 8006924:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800692c:	d003      	beq.n	8006936 <__swsetup_r+0x9a>
 800692e:	4621      	mov	r1, r4
 8006930:	4630      	mov	r0, r6
 8006932:	f001 f811 	bl	8007958 <__smakebuf_r>
 8006936:	89a2      	ldrh	r2, [r4, #12]
 8006938:	f012 0301 	ands.w	r3, r2, #1
 800693c:	d00c      	beq.n	8006958 <__swsetup_r+0xbc>
 800693e:	2300      	movs	r3, #0
 8006940:	60a3      	str	r3, [r4, #8]
 8006942:	6963      	ldr	r3, [r4, #20]
 8006944:	425b      	negs	r3, r3
 8006946:	61a3      	str	r3, [r4, #24]
 8006948:	6923      	ldr	r3, [r4, #16]
 800694a:	b953      	cbnz	r3, 8006962 <__swsetup_r+0xc6>
 800694c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006950:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006954:	d1ba      	bne.n	80068cc <__swsetup_r+0x30>
 8006956:	bd70      	pop	{r4, r5, r6, pc}
 8006958:	0792      	lsls	r2, r2, #30
 800695a:	bf58      	it	pl
 800695c:	6963      	ldrpl	r3, [r4, #20]
 800695e:	60a3      	str	r3, [r4, #8]
 8006960:	e7f2      	b.n	8006948 <__swsetup_r+0xac>
 8006962:	2000      	movs	r0, #0
 8006964:	e7f7      	b.n	8006956 <__swsetup_r+0xba>
 8006966:	bf00      	nop
 8006968:	2000000c 	.word	0x2000000c
 800696c:	0800873c 	.word	0x0800873c
 8006970:	0800875c 	.word	0x0800875c
 8006974:	0800871c 	.word	0x0800871c

08006978 <quorem>:
 8006978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697c:	6903      	ldr	r3, [r0, #16]
 800697e:	690c      	ldr	r4, [r1, #16]
 8006980:	42a3      	cmp	r3, r4
 8006982:	4680      	mov	r8, r0
 8006984:	f2c0 8082 	blt.w	8006a8c <quorem+0x114>
 8006988:	3c01      	subs	r4, #1
 800698a:	f101 0714 	add.w	r7, r1, #20
 800698e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006992:	f100 0614 	add.w	r6, r0, #20
 8006996:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800699a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800699e:	eb06 030c 	add.w	r3, r6, ip
 80069a2:	3501      	adds	r5, #1
 80069a4:	eb07 090c 	add.w	r9, r7, ip
 80069a8:	9301      	str	r3, [sp, #4]
 80069aa:	fbb0 f5f5 	udiv	r5, r0, r5
 80069ae:	b395      	cbz	r5, 8006a16 <quorem+0x9e>
 80069b0:	f04f 0a00 	mov.w	sl, #0
 80069b4:	4638      	mov	r0, r7
 80069b6:	46b6      	mov	lr, r6
 80069b8:	46d3      	mov	fp, sl
 80069ba:	f850 2b04 	ldr.w	r2, [r0], #4
 80069be:	b293      	uxth	r3, r2
 80069c0:	fb05 a303 	mla	r3, r5, r3, sl
 80069c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	ebab 0303 	sub.w	r3, fp, r3
 80069ce:	0c12      	lsrs	r2, r2, #16
 80069d0:	f8de b000 	ldr.w	fp, [lr]
 80069d4:	fb05 a202 	mla	r2, r5, r2, sl
 80069d8:	fa13 f38b 	uxtah	r3, r3, fp
 80069dc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80069e0:	fa1f fb82 	uxth.w	fp, r2
 80069e4:	f8de 2000 	ldr.w	r2, [lr]
 80069e8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80069ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069f6:	4581      	cmp	r9, r0
 80069f8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80069fc:	f84e 3b04 	str.w	r3, [lr], #4
 8006a00:	d2db      	bcs.n	80069ba <quorem+0x42>
 8006a02:	f856 300c 	ldr.w	r3, [r6, ip]
 8006a06:	b933      	cbnz	r3, 8006a16 <quorem+0x9e>
 8006a08:	9b01      	ldr	r3, [sp, #4]
 8006a0a:	3b04      	subs	r3, #4
 8006a0c:	429e      	cmp	r6, r3
 8006a0e:	461a      	mov	r2, r3
 8006a10:	d330      	bcc.n	8006a74 <quorem+0xfc>
 8006a12:	f8c8 4010 	str.w	r4, [r8, #16]
 8006a16:	4640      	mov	r0, r8
 8006a18:	f001 f9fc 	bl	8007e14 <__mcmp>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	db25      	blt.n	8006a6c <quorem+0xf4>
 8006a20:	3501      	adds	r5, #1
 8006a22:	4630      	mov	r0, r6
 8006a24:	f04f 0c00 	mov.w	ip, #0
 8006a28:	f857 2b04 	ldr.w	r2, [r7], #4
 8006a2c:	f8d0 e000 	ldr.w	lr, [r0]
 8006a30:	b293      	uxth	r3, r2
 8006a32:	ebac 0303 	sub.w	r3, ip, r3
 8006a36:	0c12      	lsrs	r2, r2, #16
 8006a38:	fa13 f38e 	uxtah	r3, r3, lr
 8006a3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006a40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a4a:	45b9      	cmp	r9, r7
 8006a4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006a50:	f840 3b04 	str.w	r3, [r0], #4
 8006a54:	d2e8      	bcs.n	8006a28 <quorem+0xb0>
 8006a56:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006a5a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006a5e:	b92a      	cbnz	r2, 8006a6c <quorem+0xf4>
 8006a60:	3b04      	subs	r3, #4
 8006a62:	429e      	cmp	r6, r3
 8006a64:	461a      	mov	r2, r3
 8006a66:	d30b      	bcc.n	8006a80 <quorem+0x108>
 8006a68:	f8c8 4010 	str.w	r4, [r8, #16]
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	b003      	add	sp, #12
 8006a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a74:	6812      	ldr	r2, [r2, #0]
 8006a76:	3b04      	subs	r3, #4
 8006a78:	2a00      	cmp	r2, #0
 8006a7a:	d1ca      	bne.n	8006a12 <quorem+0x9a>
 8006a7c:	3c01      	subs	r4, #1
 8006a7e:	e7c5      	b.n	8006a0c <quorem+0x94>
 8006a80:	6812      	ldr	r2, [r2, #0]
 8006a82:	3b04      	subs	r3, #4
 8006a84:	2a00      	cmp	r2, #0
 8006a86:	d1ef      	bne.n	8006a68 <quorem+0xf0>
 8006a88:	3c01      	subs	r4, #1
 8006a8a:	e7ea      	b.n	8006a62 <quorem+0xea>
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	e7ee      	b.n	8006a6e <quorem+0xf6>

08006a90 <_dtoa_r>:
 8006a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a94:	ec57 6b10 	vmov	r6, r7, d0
 8006a98:	b097      	sub	sp, #92	; 0x5c
 8006a9a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a9c:	9106      	str	r1, [sp, #24]
 8006a9e:	4604      	mov	r4, r0
 8006aa0:	920b      	str	r2, [sp, #44]	; 0x2c
 8006aa2:	9312      	str	r3, [sp, #72]	; 0x48
 8006aa4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006aa8:	e9cd 6700 	strd	r6, r7, [sp]
 8006aac:	b93d      	cbnz	r5, 8006abe <_dtoa_r+0x2e>
 8006aae:	2010      	movs	r0, #16
 8006ab0:	f000 ff92 	bl	80079d8 <malloc>
 8006ab4:	6260      	str	r0, [r4, #36]	; 0x24
 8006ab6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006aba:	6005      	str	r5, [r0, #0]
 8006abc:	60c5      	str	r5, [r0, #12]
 8006abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ac0:	6819      	ldr	r1, [r3, #0]
 8006ac2:	b151      	cbz	r1, 8006ada <_dtoa_r+0x4a>
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	604a      	str	r2, [r1, #4]
 8006ac8:	2301      	movs	r3, #1
 8006aca:	4093      	lsls	r3, r2
 8006acc:	608b      	str	r3, [r1, #8]
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f000 ffbe 	bl	8007a50 <_Bfree>
 8006ad4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	1e3b      	subs	r3, r7, #0
 8006adc:	bfbb      	ittet	lt
 8006ade:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ae2:	9301      	strlt	r3, [sp, #4]
 8006ae4:	2300      	movge	r3, #0
 8006ae6:	2201      	movlt	r2, #1
 8006ae8:	bfac      	ite	ge
 8006aea:	f8c8 3000 	strge.w	r3, [r8]
 8006aee:	f8c8 2000 	strlt.w	r2, [r8]
 8006af2:	4baf      	ldr	r3, [pc, #700]	; (8006db0 <_dtoa_r+0x320>)
 8006af4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006af8:	ea33 0308 	bics.w	r3, r3, r8
 8006afc:	d114      	bne.n	8006b28 <_dtoa_r+0x98>
 8006afe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b00:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	9b00      	ldr	r3, [sp, #0]
 8006b08:	b923      	cbnz	r3, 8006b14 <_dtoa_r+0x84>
 8006b0a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	f000 8542 	beq.w	8007598 <_dtoa_r+0xb08>
 8006b14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b16:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8006dc4 <_dtoa_r+0x334>
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 8544 	beq.w	80075a8 <_dtoa_r+0xb18>
 8006b20:	f10b 0303 	add.w	r3, fp, #3
 8006b24:	f000 bd3e 	b.w	80075a4 <_dtoa_r+0xb14>
 8006b28:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2300      	movs	r3, #0
 8006b30:	4630      	mov	r0, r6
 8006b32:	4639      	mov	r1, r7
 8006b34:	f7f9 ffe8 	bl	8000b08 <__aeabi_dcmpeq>
 8006b38:	4681      	mov	r9, r0
 8006b3a:	b168      	cbz	r0, 8006b58 <_dtoa_r+0xc8>
 8006b3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b3e:	2301      	movs	r3, #1
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 8524 	beq.w	8007592 <_dtoa_r+0xb02>
 8006b4a:	4b9a      	ldr	r3, [pc, #616]	; (8006db4 <_dtoa_r+0x324>)
 8006b4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006b4e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006b52:	6013      	str	r3, [r2, #0]
 8006b54:	f000 bd28 	b.w	80075a8 <_dtoa_r+0xb18>
 8006b58:	aa14      	add	r2, sp, #80	; 0x50
 8006b5a:	a915      	add	r1, sp, #84	; 0x54
 8006b5c:	ec47 6b10 	vmov	d0, r6, r7
 8006b60:	4620      	mov	r0, r4
 8006b62:	f001 f9ce 	bl	8007f02 <__d2b>
 8006b66:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006b6a:	9004      	str	r0, [sp, #16]
 8006b6c:	2d00      	cmp	r5, #0
 8006b6e:	d07c      	beq.n	8006c6a <_dtoa_r+0x1da>
 8006b70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b74:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006b78:	46b2      	mov	sl, r6
 8006b7a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006b7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006b82:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006b86:	2200      	movs	r2, #0
 8006b88:	4b8b      	ldr	r3, [pc, #556]	; (8006db8 <_dtoa_r+0x328>)
 8006b8a:	4650      	mov	r0, sl
 8006b8c:	4659      	mov	r1, fp
 8006b8e:	f7f9 fb9b 	bl	80002c8 <__aeabi_dsub>
 8006b92:	a381      	add	r3, pc, #516	; (adr r3, 8006d98 <_dtoa_r+0x308>)
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	f7f9 fd4e 	bl	8000638 <__aeabi_dmul>
 8006b9c:	a380      	add	r3, pc, #512	; (adr r3, 8006da0 <_dtoa_r+0x310>)
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	f7f9 fb93 	bl	80002cc <__adddf3>
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	4628      	mov	r0, r5
 8006baa:	460f      	mov	r7, r1
 8006bac:	f7f9 fcda 	bl	8000564 <__aeabi_i2d>
 8006bb0:	a37d      	add	r3, pc, #500	; (adr r3, 8006da8 <_dtoa_r+0x318>)
 8006bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb6:	f7f9 fd3f 	bl	8000638 <__aeabi_dmul>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	4639      	mov	r1, r7
 8006bc2:	f7f9 fb83 	bl	80002cc <__adddf3>
 8006bc6:	4606      	mov	r6, r0
 8006bc8:	460f      	mov	r7, r1
 8006bca:	f7f9 ffe5 	bl	8000b98 <__aeabi_d2iz>
 8006bce:	2200      	movs	r2, #0
 8006bd0:	4682      	mov	sl, r0
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	f7f9 ffa0 	bl	8000b1c <__aeabi_dcmplt>
 8006bdc:	b148      	cbz	r0, 8006bf2 <_dtoa_r+0x162>
 8006bde:	4650      	mov	r0, sl
 8006be0:	f7f9 fcc0 	bl	8000564 <__aeabi_i2d>
 8006be4:	4632      	mov	r2, r6
 8006be6:	463b      	mov	r3, r7
 8006be8:	f7f9 ff8e 	bl	8000b08 <__aeabi_dcmpeq>
 8006bec:	b908      	cbnz	r0, 8006bf2 <_dtoa_r+0x162>
 8006bee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006bf2:	f1ba 0f16 	cmp.w	sl, #22
 8006bf6:	d859      	bhi.n	8006cac <_dtoa_r+0x21c>
 8006bf8:	4970      	ldr	r1, [pc, #448]	; (8006dbc <_dtoa_r+0x32c>)
 8006bfa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006bfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c06:	f7f9 ffa7 	bl	8000b58 <__aeabi_dcmpgt>
 8006c0a:	2800      	cmp	r0, #0
 8006c0c:	d050      	beq.n	8006cb0 <_dtoa_r+0x220>
 8006c0e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006c12:	2300      	movs	r3, #0
 8006c14:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c18:	1b5d      	subs	r5, r3, r5
 8006c1a:	f1b5 0801 	subs.w	r8, r5, #1
 8006c1e:	bf49      	itett	mi
 8006c20:	f1c5 0301 	rsbmi	r3, r5, #1
 8006c24:	2300      	movpl	r3, #0
 8006c26:	9305      	strmi	r3, [sp, #20]
 8006c28:	f04f 0800 	movmi.w	r8, #0
 8006c2c:	bf58      	it	pl
 8006c2e:	9305      	strpl	r3, [sp, #20]
 8006c30:	f1ba 0f00 	cmp.w	sl, #0
 8006c34:	db3e      	blt.n	8006cb4 <_dtoa_r+0x224>
 8006c36:	2300      	movs	r3, #0
 8006c38:	44d0      	add	r8, sl
 8006c3a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006c3e:	9307      	str	r3, [sp, #28]
 8006c40:	9b06      	ldr	r3, [sp, #24]
 8006c42:	2b09      	cmp	r3, #9
 8006c44:	f200 8090 	bhi.w	8006d68 <_dtoa_r+0x2d8>
 8006c48:	2b05      	cmp	r3, #5
 8006c4a:	bfc4      	itt	gt
 8006c4c:	3b04      	subgt	r3, #4
 8006c4e:	9306      	strgt	r3, [sp, #24]
 8006c50:	9b06      	ldr	r3, [sp, #24]
 8006c52:	f1a3 0302 	sub.w	r3, r3, #2
 8006c56:	bfcc      	ite	gt
 8006c58:	2500      	movgt	r5, #0
 8006c5a:	2501      	movle	r5, #1
 8006c5c:	2b03      	cmp	r3, #3
 8006c5e:	f200 808f 	bhi.w	8006d80 <_dtoa_r+0x2f0>
 8006c62:	e8df f003 	tbb	[pc, r3]
 8006c66:	7f7d      	.short	0x7f7d
 8006c68:	7131      	.short	0x7131
 8006c6a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006c6e:	441d      	add	r5, r3
 8006c70:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006c74:	2820      	cmp	r0, #32
 8006c76:	dd13      	ble.n	8006ca0 <_dtoa_r+0x210>
 8006c78:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006c7c:	9b00      	ldr	r3, [sp, #0]
 8006c7e:	fa08 f800 	lsl.w	r8, r8, r0
 8006c82:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006c86:	fa23 f000 	lsr.w	r0, r3, r0
 8006c8a:	ea48 0000 	orr.w	r0, r8, r0
 8006c8e:	f7f9 fc59 	bl	8000544 <__aeabi_ui2d>
 8006c92:	2301      	movs	r3, #1
 8006c94:	4682      	mov	sl, r0
 8006c96:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006c9a:	3d01      	subs	r5, #1
 8006c9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c9e:	e772      	b.n	8006b86 <_dtoa_r+0xf6>
 8006ca0:	9b00      	ldr	r3, [sp, #0]
 8006ca2:	f1c0 0020 	rsb	r0, r0, #32
 8006ca6:	fa03 f000 	lsl.w	r0, r3, r0
 8006caa:	e7f0      	b.n	8006c8e <_dtoa_r+0x1fe>
 8006cac:	2301      	movs	r3, #1
 8006cae:	e7b1      	b.n	8006c14 <_dtoa_r+0x184>
 8006cb0:	900f      	str	r0, [sp, #60]	; 0x3c
 8006cb2:	e7b0      	b.n	8006c16 <_dtoa_r+0x186>
 8006cb4:	9b05      	ldr	r3, [sp, #20]
 8006cb6:	eba3 030a 	sub.w	r3, r3, sl
 8006cba:	9305      	str	r3, [sp, #20]
 8006cbc:	f1ca 0300 	rsb	r3, sl, #0
 8006cc0:	9307      	str	r3, [sp, #28]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	930e      	str	r3, [sp, #56]	; 0x38
 8006cc6:	e7bb      	b.n	8006c40 <_dtoa_r+0x1b0>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	930a      	str	r3, [sp, #40]	; 0x28
 8006ccc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	dd59      	ble.n	8006d86 <_dtoa_r+0x2f6>
 8006cd2:	9302      	str	r3, [sp, #8]
 8006cd4:	4699      	mov	r9, r3
 8006cd6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006cd8:	2200      	movs	r2, #0
 8006cda:	6072      	str	r2, [r6, #4]
 8006cdc:	2204      	movs	r2, #4
 8006cde:	f102 0014 	add.w	r0, r2, #20
 8006ce2:	4298      	cmp	r0, r3
 8006ce4:	6871      	ldr	r1, [r6, #4]
 8006ce6:	d953      	bls.n	8006d90 <_dtoa_r+0x300>
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f000 fe7d 	bl	80079e8 <_Balloc>
 8006cee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cf0:	6030      	str	r0, [r6, #0]
 8006cf2:	f1b9 0f0e 	cmp.w	r9, #14
 8006cf6:	f8d3 b000 	ldr.w	fp, [r3]
 8006cfa:	f200 80e6 	bhi.w	8006eca <_dtoa_r+0x43a>
 8006cfe:	2d00      	cmp	r5, #0
 8006d00:	f000 80e3 	beq.w	8006eca <_dtoa_r+0x43a>
 8006d04:	ed9d 7b00 	vldr	d7, [sp]
 8006d08:	f1ba 0f00 	cmp.w	sl, #0
 8006d0c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006d10:	dd74      	ble.n	8006dfc <_dtoa_r+0x36c>
 8006d12:	4a2a      	ldr	r2, [pc, #168]	; (8006dbc <_dtoa_r+0x32c>)
 8006d14:	f00a 030f 	and.w	r3, sl, #15
 8006d18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d1c:	ed93 7b00 	vldr	d7, [r3]
 8006d20:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006d24:	06f0      	lsls	r0, r6, #27
 8006d26:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006d2a:	d565      	bpl.n	8006df8 <_dtoa_r+0x368>
 8006d2c:	4b24      	ldr	r3, [pc, #144]	; (8006dc0 <_dtoa_r+0x330>)
 8006d2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d32:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d36:	f7f9 fda9 	bl	800088c <__aeabi_ddiv>
 8006d3a:	e9cd 0100 	strd	r0, r1, [sp]
 8006d3e:	f006 060f 	and.w	r6, r6, #15
 8006d42:	2503      	movs	r5, #3
 8006d44:	4f1e      	ldr	r7, [pc, #120]	; (8006dc0 <_dtoa_r+0x330>)
 8006d46:	e04c      	b.n	8006de2 <_dtoa_r+0x352>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	930a      	str	r3, [sp, #40]	; 0x28
 8006d4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d4e:	4453      	add	r3, sl
 8006d50:	f103 0901 	add.w	r9, r3, #1
 8006d54:	9302      	str	r3, [sp, #8]
 8006d56:	464b      	mov	r3, r9
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	bfb8      	it	lt
 8006d5c:	2301      	movlt	r3, #1
 8006d5e:	e7ba      	b.n	8006cd6 <_dtoa_r+0x246>
 8006d60:	2300      	movs	r3, #0
 8006d62:	e7b2      	b.n	8006cca <_dtoa_r+0x23a>
 8006d64:	2300      	movs	r3, #0
 8006d66:	e7f0      	b.n	8006d4a <_dtoa_r+0x2ba>
 8006d68:	2501      	movs	r5, #1
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	9306      	str	r3, [sp, #24]
 8006d6e:	950a      	str	r5, [sp, #40]	; 0x28
 8006d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d74:	9302      	str	r3, [sp, #8]
 8006d76:	4699      	mov	r9, r3
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2312      	movs	r3, #18
 8006d7c:	920b      	str	r2, [sp, #44]	; 0x2c
 8006d7e:	e7aa      	b.n	8006cd6 <_dtoa_r+0x246>
 8006d80:	2301      	movs	r3, #1
 8006d82:	930a      	str	r3, [sp, #40]	; 0x28
 8006d84:	e7f4      	b.n	8006d70 <_dtoa_r+0x2e0>
 8006d86:	2301      	movs	r3, #1
 8006d88:	9302      	str	r3, [sp, #8]
 8006d8a:	4699      	mov	r9, r3
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	e7f5      	b.n	8006d7c <_dtoa_r+0x2ec>
 8006d90:	3101      	adds	r1, #1
 8006d92:	6071      	str	r1, [r6, #4]
 8006d94:	0052      	lsls	r2, r2, #1
 8006d96:	e7a2      	b.n	8006cde <_dtoa_r+0x24e>
 8006d98:	636f4361 	.word	0x636f4361
 8006d9c:	3fd287a7 	.word	0x3fd287a7
 8006da0:	8b60c8b3 	.word	0x8b60c8b3
 8006da4:	3fc68a28 	.word	0x3fc68a28
 8006da8:	509f79fb 	.word	0x509f79fb
 8006dac:	3fd34413 	.word	0x3fd34413
 8006db0:	7ff00000 	.word	0x7ff00000
 8006db4:	080086e9 	.word	0x080086e9
 8006db8:	3ff80000 	.word	0x3ff80000
 8006dbc:	080087a8 	.word	0x080087a8
 8006dc0:	08008780 	.word	0x08008780
 8006dc4:	08008715 	.word	0x08008715
 8006dc8:	07f1      	lsls	r1, r6, #31
 8006dca:	d508      	bpl.n	8006dde <_dtoa_r+0x34e>
 8006dcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006dd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dd4:	f7f9 fc30 	bl	8000638 <__aeabi_dmul>
 8006dd8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006ddc:	3501      	adds	r5, #1
 8006dde:	1076      	asrs	r6, r6, #1
 8006de0:	3708      	adds	r7, #8
 8006de2:	2e00      	cmp	r6, #0
 8006de4:	d1f0      	bne.n	8006dc8 <_dtoa_r+0x338>
 8006de6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006dea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006dee:	f7f9 fd4d 	bl	800088c <__aeabi_ddiv>
 8006df2:	e9cd 0100 	strd	r0, r1, [sp]
 8006df6:	e01a      	b.n	8006e2e <_dtoa_r+0x39e>
 8006df8:	2502      	movs	r5, #2
 8006dfa:	e7a3      	b.n	8006d44 <_dtoa_r+0x2b4>
 8006dfc:	f000 80a0 	beq.w	8006f40 <_dtoa_r+0x4b0>
 8006e00:	f1ca 0600 	rsb	r6, sl, #0
 8006e04:	4b9f      	ldr	r3, [pc, #636]	; (8007084 <_dtoa_r+0x5f4>)
 8006e06:	4fa0      	ldr	r7, [pc, #640]	; (8007088 <_dtoa_r+0x5f8>)
 8006e08:	f006 020f 	and.w	r2, r6, #15
 8006e0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e18:	f7f9 fc0e 	bl	8000638 <__aeabi_dmul>
 8006e1c:	e9cd 0100 	strd	r0, r1, [sp]
 8006e20:	1136      	asrs	r6, r6, #4
 8006e22:	2300      	movs	r3, #0
 8006e24:	2502      	movs	r5, #2
 8006e26:	2e00      	cmp	r6, #0
 8006e28:	d17f      	bne.n	8006f2a <_dtoa_r+0x49a>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1e1      	bne.n	8006df2 <_dtoa_r+0x362>
 8006e2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8087 	beq.w	8006f44 <_dtoa_r+0x4b4>
 8006e36:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	4b93      	ldr	r3, [pc, #588]	; (800708c <_dtoa_r+0x5fc>)
 8006e3e:	4630      	mov	r0, r6
 8006e40:	4639      	mov	r1, r7
 8006e42:	f7f9 fe6b 	bl	8000b1c <__aeabi_dcmplt>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	d07c      	beq.n	8006f44 <_dtoa_r+0x4b4>
 8006e4a:	f1b9 0f00 	cmp.w	r9, #0
 8006e4e:	d079      	beq.n	8006f44 <_dtoa_r+0x4b4>
 8006e50:	9b02      	ldr	r3, [sp, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	dd35      	ble.n	8006ec2 <_dtoa_r+0x432>
 8006e56:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006e5a:	9308      	str	r3, [sp, #32]
 8006e5c:	4639      	mov	r1, r7
 8006e5e:	2200      	movs	r2, #0
 8006e60:	4b8b      	ldr	r3, [pc, #556]	; (8007090 <_dtoa_r+0x600>)
 8006e62:	4630      	mov	r0, r6
 8006e64:	f7f9 fbe8 	bl	8000638 <__aeabi_dmul>
 8006e68:	e9cd 0100 	strd	r0, r1, [sp]
 8006e6c:	9f02      	ldr	r7, [sp, #8]
 8006e6e:	3501      	adds	r5, #1
 8006e70:	4628      	mov	r0, r5
 8006e72:	f7f9 fb77 	bl	8000564 <__aeabi_i2d>
 8006e76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e7a:	f7f9 fbdd 	bl	8000638 <__aeabi_dmul>
 8006e7e:	2200      	movs	r2, #0
 8006e80:	4b84      	ldr	r3, [pc, #528]	; (8007094 <_dtoa_r+0x604>)
 8006e82:	f7f9 fa23 	bl	80002cc <__adddf3>
 8006e86:	4605      	mov	r5, r0
 8006e88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006e8c:	2f00      	cmp	r7, #0
 8006e8e:	d15d      	bne.n	8006f4c <_dtoa_r+0x4bc>
 8006e90:	2200      	movs	r2, #0
 8006e92:	4b81      	ldr	r3, [pc, #516]	; (8007098 <_dtoa_r+0x608>)
 8006e94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e98:	f7f9 fa16 	bl	80002c8 <__aeabi_dsub>
 8006e9c:	462a      	mov	r2, r5
 8006e9e:	4633      	mov	r3, r6
 8006ea0:	e9cd 0100 	strd	r0, r1, [sp]
 8006ea4:	f7f9 fe58 	bl	8000b58 <__aeabi_dcmpgt>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	f040 8288 	bne.w	80073be <_dtoa_r+0x92e>
 8006eae:	462a      	mov	r2, r5
 8006eb0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006eb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006eb8:	f7f9 fe30 	bl	8000b1c <__aeabi_dcmplt>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	f040 827c 	bne.w	80073ba <_dtoa_r+0x92a>
 8006ec2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ec6:	e9cd 2300 	strd	r2, r3, [sp]
 8006eca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f2c0 8150 	blt.w	8007172 <_dtoa_r+0x6e2>
 8006ed2:	f1ba 0f0e 	cmp.w	sl, #14
 8006ed6:	f300 814c 	bgt.w	8007172 <_dtoa_r+0x6e2>
 8006eda:	4b6a      	ldr	r3, [pc, #424]	; (8007084 <_dtoa_r+0x5f4>)
 8006edc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ee0:	ed93 7b00 	vldr	d7, [r3]
 8006ee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006eec:	f280 80d8 	bge.w	80070a0 <_dtoa_r+0x610>
 8006ef0:	f1b9 0f00 	cmp.w	r9, #0
 8006ef4:	f300 80d4 	bgt.w	80070a0 <_dtoa_r+0x610>
 8006ef8:	f040 825e 	bne.w	80073b8 <_dtoa_r+0x928>
 8006efc:	2200      	movs	r2, #0
 8006efe:	4b66      	ldr	r3, [pc, #408]	; (8007098 <_dtoa_r+0x608>)
 8006f00:	ec51 0b17 	vmov	r0, r1, d7
 8006f04:	f7f9 fb98 	bl	8000638 <__aeabi_dmul>
 8006f08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f0c:	f7f9 fe1a 	bl	8000b44 <__aeabi_dcmpge>
 8006f10:	464f      	mov	r7, r9
 8006f12:	464e      	mov	r6, r9
 8006f14:	2800      	cmp	r0, #0
 8006f16:	f040 8234 	bne.w	8007382 <_dtoa_r+0x8f2>
 8006f1a:	2331      	movs	r3, #49	; 0x31
 8006f1c:	f10b 0501 	add.w	r5, fp, #1
 8006f20:	f88b 3000 	strb.w	r3, [fp]
 8006f24:	f10a 0a01 	add.w	sl, sl, #1
 8006f28:	e22f      	b.n	800738a <_dtoa_r+0x8fa>
 8006f2a:	07f2      	lsls	r2, r6, #31
 8006f2c:	d505      	bpl.n	8006f3a <_dtoa_r+0x4aa>
 8006f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f32:	f7f9 fb81 	bl	8000638 <__aeabi_dmul>
 8006f36:	3501      	adds	r5, #1
 8006f38:	2301      	movs	r3, #1
 8006f3a:	1076      	asrs	r6, r6, #1
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	e772      	b.n	8006e26 <_dtoa_r+0x396>
 8006f40:	2502      	movs	r5, #2
 8006f42:	e774      	b.n	8006e2e <_dtoa_r+0x39e>
 8006f44:	f8cd a020 	str.w	sl, [sp, #32]
 8006f48:	464f      	mov	r7, r9
 8006f4a:	e791      	b.n	8006e70 <_dtoa_r+0x3e0>
 8006f4c:	4b4d      	ldr	r3, [pc, #308]	; (8007084 <_dtoa_r+0x5f4>)
 8006f4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f52:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d047      	beq.n	8006fec <_dtoa_r+0x55c>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	460b      	mov	r3, r1
 8006f60:	2000      	movs	r0, #0
 8006f62:	494e      	ldr	r1, [pc, #312]	; (800709c <_dtoa_r+0x60c>)
 8006f64:	f7f9 fc92 	bl	800088c <__aeabi_ddiv>
 8006f68:	462a      	mov	r2, r5
 8006f6a:	4633      	mov	r3, r6
 8006f6c:	f7f9 f9ac 	bl	80002c8 <__aeabi_dsub>
 8006f70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006f74:	465d      	mov	r5, fp
 8006f76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f7a:	f7f9 fe0d 	bl	8000b98 <__aeabi_d2iz>
 8006f7e:	4606      	mov	r6, r0
 8006f80:	f7f9 faf0 	bl	8000564 <__aeabi_i2d>
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f8c:	f7f9 f99c 	bl	80002c8 <__aeabi_dsub>
 8006f90:	3630      	adds	r6, #48	; 0x30
 8006f92:	f805 6b01 	strb.w	r6, [r5], #1
 8006f96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006f9a:	e9cd 0100 	strd	r0, r1, [sp]
 8006f9e:	f7f9 fdbd 	bl	8000b1c <__aeabi_dcmplt>
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	d163      	bne.n	800706e <_dtoa_r+0x5de>
 8006fa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006faa:	2000      	movs	r0, #0
 8006fac:	4937      	ldr	r1, [pc, #220]	; (800708c <_dtoa_r+0x5fc>)
 8006fae:	f7f9 f98b 	bl	80002c8 <__aeabi_dsub>
 8006fb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006fb6:	f7f9 fdb1 	bl	8000b1c <__aeabi_dcmplt>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	f040 80b7 	bne.w	800712e <_dtoa_r+0x69e>
 8006fc0:	eba5 030b 	sub.w	r3, r5, fp
 8006fc4:	429f      	cmp	r7, r3
 8006fc6:	f77f af7c 	ble.w	8006ec2 <_dtoa_r+0x432>
 8006fca:	2200      	movs	r2, #0
 8006fcc:	4b30      	ldr	r3, [pc, #192]	; (8007090 <_dtoa_r+0x600>)
 8006fce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006fd2:	f7f9 fb31 	bl	8000638 <__aeabi_dmul>
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006fdc:	4b2c      	ldr	r3, [pc, #176]	; (8007090 <_dtoa_r+0x600>)
 8006fde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fe2:	f7f9 fb29 	bl	8000638 <__aeabi_dmul>
 8006fe6:	e9cd 0100 	strd	r0, r1, [sp]
 8006fea:	e7c4      	b.n	8006f76 <_dtoa_r+0x4e6>
 8006fec:	462a      	mov	r2, r5
 8006fee:	4633      	mov	r3, r6
 8006ff0:	f7f9 fb22 	bl	8000638 <__aeabi_dmul>
 8006ff4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006ff8:	eb0b 0507 	add.w	r5, fp, r7
 8006ffc:	465e      	mov	r6, fp
 8006ffe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007002:	f7f9 fdc9 	bl	8000b98 <__aeabi_d2iz>
 8007006:	4607      	mov	r7, r0
 8007008:	f7f9 faac 	bl	8000564 <__aeabi_i2d>
 800700c:	3730      	adds	r7, #48	; 0x30
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007016:	f7f9 f957 	bl	80002c8 <__aeabi_dsub>
 800701a:	f806 7b01 	strb.w	r7, [r6], #1
 800701e:	42ae      	cmp	r6, r5
 8007020:	e9cd 0100 	strd	r0, r1, [sp]
 8007024:	f04f 0200 	mov.w	r2, #0
 8007028:	d126      	bne.n	8007078 <_dtoa_r+0x5e8>
 800702a:	4b1c      	ldr	r3, [pc, #112]	; (800709c <_dtoa_r+0x60c>)
 800702c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007030:	f7f9 f94c 	bl	80002cc <__adddf3>
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	e9dd 0100 	ldrd	r0, r1, [sp]
 800703c:	f7f9 fd8c 	bl	8000b58 <__aeabi_dcmpgt>
 8007040:	2800      	cmp	r0, #0
 8007042:	d174      	bne.n	800712e <_dtoa_r+0x69e>
 8007044:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007048:	2000      	movs	r0, #0
 800704a:	4914      	ldr	r1, [pc, #80]	; (800709c <_dtoa_r+0x60c>)
 800704c:	f7f9 f93c 	bl	80002c8 <__aeabi_dsub>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007058:	f7f9 fd60 	bl	8000b1c <__aeabi_dcmplt>
 800705c:	2800      	cmp	r0, #0
 800705e:	f43f af30 	beq.w	8006ec2 <_dtoa_r+0x432>
 8007062:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007066:	2b30      	cmp	r3, #48	; 0x30
 8007068:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800706c:	d002      	beq.n	8007074 <_dtoa_r+0x5e4>
 800706e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007072:	e04a      	b.n	800710a <_dtoa_r+0x67a>
 8007074:	4615      	mov	r5, r2
 8007076:	e7f4      	b.n	8007062 <_dtoa_r+0x5d2>
 8007078:	4b05      	ldr	r3, [pc, #20]	; (8007090 <_dtoa_r+0x600>)
 800707a:	f7f9 fadd 	bl	8000638 <__aeabi_dmul>
 800707e:	e9cd 0100 	strd	r0, r1, [sp]
 8007082:	e7bc      	b.n	8006ffe <_dtoa_r+0x56e>
 8007084:	080087a8 	.word	0x080087a8
 8007088:	08008780 	.word	0x08008780
 800708c:	3ff00000 	.word	0x3ff00000
 8007090:	40240000 	.word	0x40240000
 8007094:	401c0000 	.word	0x401c0000
 8007098:	40140000 	.word	0x40140000
 800709c:	3fe00000 	.word	0x3fe00000
 80070a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80070a4:	465d      	mov	r5, fp
 80070a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070aa:	4630      	mov	r0, r6
 80070ac:	4639      	mov	r1, r7
 80070ae:	f7f9 fbed 	bl	800088c <__aeabi_ddiv>
 80070b2:	f7f9 fd71 	bl	8000b98 <__aeabi_d2iz>
 80070b6:	4680      	mov	r8, r0
 80070b8:	f7f9 fa54 	bl	8000564 <__aeabi_i2d>
 80070bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070c0:	f7f9 faba 	bl	8000638 <__aeabi_dmul>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4630      	mov	r0, r6
 80070ca:	4639      	mov	r1, r7
 80070cc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80070d0:	f7f9 f8fa 	bl	80002c8 <__aeabi_dsub>
 80070d4:	f805 6b01 	strb.w	r6, [r5], #1
 80070d8:	eba5 060b 	sub.w	r6, r5, fp
 80070dc:	45b1      	cmp	r9, r6
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	d139      	bne.n	8007158 <_dtoa_r+0x6c8>
 80070e4:	f7f9 f8f2 	bl	80002cc <__adddf3>
 80070e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070ec:	4606      	mov	r6, r0
 80070ee:	460f      	mov	r7, r1
 80070f0:	f7f9 fd32 	bl	8000b58 <__aeabi_dcmpgt>
 80070f4:	b9c8      	cbnz	r0, 800712a <_dtoa_r+0x69a>
 80070f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80070fa:	4630      	mov	r0, r6
 80070fc:	4639      	mov	r1, r7
 80070fe:	f7f9 fd03 	bl	8000b08 <__aeabi_dcmpeq>
 8007102:	b110      	cbz	r0, 800710a <_dtoa_r+0x67a>
 8007104:	f018 0f01 	tst.w	r8, #1
 8007108:	d10f      	bne.n	800712a <_dtoa_r+0x69a>
 800710a:	9904      	ldr	r1, [sp, #16]
 800710c:	4620      	mov	r0, r4
 800710e:	f000 fc9f 	bl	8007a50 <_Bfree>
 8007112:	2300      	movs	r3, #0
 8007114:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007116:	702b      	strb	r3, [r5, #0]
 8007118:	f10a 0301 	add.w	r3, sl, #1
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 8241 	beq.w	80075a8 <_dtoa_r+0xb18>
 8007126:	601d      	str	r5, [r3, #0]
 8007128:	e23e      	b.n	80075a8 <_dtoa_r+0xb18>
 800712a:	f8cd a020 	str.w	sl, [sp, #32]
 800712e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007132:	2a39      	cmp	r2, #57	; 0x39
 8007134:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007138:	d108      	bne.n	800714c <_dtoa_r+0x6bc>
 800713a:	459b      	cmp	fp, r3
 800713c:	d10a      	bne.n	8007154 <_dtoa_r+0x6c4>
 800713e:	9b08      	ldr	r3, [sp, #32]
 8007140:	3301      	adds	r3, #1
 8007142:	9308      	str	r3, [sp, #32]
 8007144:	2330      	movs	r3, #48	; 0x30
 8007146:	f88b 3000 	strb.w	r3, [fp]
 800714a:	465b      	mov	r3, fp
 800714c:	781a      	ldrb	r2, [r3, #0]
 800714e:	3201      	adds	r2, #1
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	e78c      	b.n	800706e <_dtoa_r+0x5de>
 8007154:	461d      	mov	r5, r3
 8007156:	e7ea      	b.n	800712e <_dtoa_r+0x69e>
 8007158:	2200      	movs	r2, #0
 800715a:	4b9b      	ldr	r3, [pc, #620]	; (80073c8 <_dtoa_r+0x938>)
 800715c:	f7f9 fa6c 	bl	8000638 <__aeabi_dmul>
 8007160:	2200      	movs	r2, #0
 8007162:	2300      	movs	r3, #0
 8007164:	4606      	mov	r6, r0
 8007166:	460f      	mov	r7, r1
 8007168:	f7f9 fcce 	bl	8000b08 <__aeabi_dcmpeq>
 800716c:	2800      	cmp	r0, #0
 800716e:	d09a      	beq.n	80070a6 <_dtoa_r+0x616>
 8007170:	e7cb      	b.n	800710a <_dtoa_r+0x67a>
 8007172:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007174:	2a00      	cmp	r2, #0
 8007176:	f000 808b 	beq.w	8007290 <_dtoa_r+0x800>
 800717a:	9a06      	ldr	r2, [sp, #24]
 800717c:	2a01      	cmp	r2, #1
 800717e:	dc6e      	bgt.n	800725e <_dtoa_r+0x7ce>
 8007180:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007182:	2a00      	cmp	r2, #0
 8007184:	d067      	beq.n	8007256 <_dtoa_r+0x7c6>
 8007186:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800718a:	9f07      	ldr	r7, [sp, #28]
 800718c:	9d05      	ldr	r5, [sp, #20]
 800718e:	9a05      	ldr	r2, [sp, #20]
 8007190:	2101      	movs	r1, #1
 8007192:	441a      	add	r2, r3
 8007194:	4620      	mov	r0, r4
 8007196:	9205      	str	r2, [sp, #20]
 8007198:	4498      	add	r8, r3
 800719a:	f000 fcf9 	bl	8007b90 <__i2b>
 800719e:	4606      	mov	r6, r0
 80071a0:	2d00      	cmp	r5, #0
 80071a2:	dd0c      	ble.n	80071be <_dtoa_r+0x72e>
 80071a4:	f1b8 0f00 	cmp.w	r8, #0
 80071a8:	dd09      	ble.n	80071be <_dtoa_r+0x72e>
 80071aa:	4545      	cmp	r5, r8
 80071ac:	9a05      	ldr	r2, [sp, #20]
 80071ae:	462b      	mov	r3, r5
 80071b0:	bfa8      	it	ge
 80071b2:	4643      	movge	r3, r8
 80071b4:	1ad2      	subs	r2, r2, r3
 80071b6:	9205      	str	r2, [sp, #20]
 80071b8:	1aed      	subs	r5, r5, r3
 80071ba:	eba8 0803 	sub.w	r8, r8, r3
 80071be:	9b07      	ldr	r3, [sp, #28]
 80071c0:	b1eb      	cbz	r3, 80071fe <_dtoa_r+0x76e>
 80071c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d067      	beq.n	8007298 <_dtoa_r+0x808>
 80071c8:	b18f      	cbz	r7, 80071ee <_dtoa_r+0x75e>
 80071ca:	4631      	mov	r1, r6
 80071cc:	463a      	mov	r2, r7
 80071ce:	4620      	mov	r0, r4
 80071d0:	f000 fd7e 	bl	8007cd0 <__pow5mult>
 80071d4:	9a04      	ldr	r2, [sp, #16]
 80071d6:	4601      	mov	r1, r0
 80071d8:	4606      	mov	r6, r0
 80071da:	4620      	mov	r0, r4
 80071dc:	f000 fce1 	bl	8007ba2 <__multiply>
 80071e0:	9904      	ldr	r1, [sp, #16]
 80071e2:	9008      	str	r0, [sp, #32]
 80071e4:	4620      	mov	r0, r4
 80071e6:	f000 fc33 	bl	8007a50 <_Bfree>
 80071ea:	9b08      	ldr	r3, [sp, #32]
 80071ec:	9304      	str	r3, [sp, #16]
 80071ee:	9b07      	ldr	r3, [sp, #28]
 80071f0:	1bda      	subs	r2, r3, r7
 80071f2:	d004      	beq.n	80071fe <_dtoa_r+0x76e>
 80071f4:	9904      	ldr	r1, [sp, #16]
 80071f6:	4620      	mov	r0, r4
 80071f8:	f000 fd6a 	bl	8007cd0 <__pow5mult>
 80071fc:	9004      	str	r0, [sp, #16]
 80071fe:	2101      	movs	r1, #1
 8007200:	4620      	mov	r0, r4
 8007202:	f000 fcc5 	bl	8007b90 <__i2b>
 8007206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007208:	4607      	mov	r7, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 81d0 	beq.w	80075b0 <_dtoa_r+0xb20>
 8007210:	461a      	mov	r2, r3
 8007212:	4601      	mov	r1, r0
 8007214:	4620      	mov	r0, r4
 8007216:	f000 fd5b 	bl	8007cd0 <__pow5mult>
 800721a:	9b06      	ldr	r3, [sp, #24]
 800721c:	2b01      	cmp	r3, #1
 800721e:	4607      	mov	r7, r0
 8007220:	dc40      	bgt.n	80072a4 <_dtoa_r+0x814>
 8007222:	9b00      	ldr	r3, [sp, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d139      	bne.n	800729c <_dtoa_r+0x80c>
 8007228:	9b01      	ldr	r3, [sp, #4]
 800722a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800722e:	2b00      	cmp	r3, #0
 8007230:	d136      	bne.n	80072a0 <_dtoa_r+0x810>
 8007232:	9b01      	ldr	r3, [sp, #4]
 8007234:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007238:	0d1b      	lsrs	r3, r3, #20
 800723a:	051b      	lsls	r3, r3, #20
 800723c:	b12b      	cbz	r3, 800724a <_dtoa_r+0x7ba>
 800723e:	9b05      	ldr	r3, [sp, #20]
 8007240:	3301      	adds	r3, #1
 8007242:	9305      	str	r3, [sp, #20]
 8007244:	f108 0801 	add.w	r8, r8, #1
 8007248:	2301      	movs	r3, #1
 800724a:	9307      	str	r3, [sp, #28]
 800724c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800724e:	2b00      	cmp	r3, #0
 8007250:	d12a      	bne.n	80072a8 <_dtoa_r+0x818>
 8007252:	2001      	movs	r0, #1
 8007254:	e030      	b.n	80072b8 <_dtoa_r+0x828>
 8007256:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007258:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800725c:	e795      	b.n	800718a <_dtoa_r+0x6fa>
 800725e:	9b07      	ldr	r3, [sp, #28]
 8007260:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8007264:	42bb      	cmp	r3, r7
 8007266:	bfbf      	itttt	lt
 8007268:	9b07      	ldrlt	r3, [sp, #28]
 800726a:	9707      	strlt	r7, [sp, #28]
 800726c:	1afa      	sublt	r2, r7, r3
 800726e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007270:	bfbb      	ittet	lt
 8007272:	189b      	addlt	r3, r3, r2
 8007274:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007276:	1bdf      	subge	r7, r3, r7
 8007278:	2700      	movlt	r7, #0
 800727a:	f1b9 0f00 	cmp.w	r9, #0
 800727e:	bfb5      	itete	lt
 8007280:	9b05      	ldrlt	r3, [sp, #20]
 8007282:	9d05      	ldrge	r5, [sp, #20]
 8007284:	eba3 0509 	sublt.w	r5, r3, r9
 8007288:	464b      	movge	r3, r9
 800728a:	bfb8      	it	lt
 800728c:	2300      	movlt	r3, #0
 800728e:	e77e      	b.n	800718e <_dtoa_r+0x6fe>
 8007290:	9f07      	ldr	r7, [sp, #28]
 8007292:	9d05      	ldr	r5, [sp, #20]
 8007294:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007296:	e783      	b.n	80071a0 <_dtoa_r+0x710>
 8007298:	9a07      	ldr	r2, [sp, #28]
 800729a:	e7ab      	b.n	80071f4 <_dtoa_r+0x764>
 800729c:	2300      	movs	r3, #0
 800729e:	e7d4      	b.n	800724a <_dtoa_r+0x7ba>
 80072a0:	9b00      	ldr	r3, [sp, #0]
 80072a2:	e7d2      	b.n	800724a <_dtoa_r+0x7ba>
 80072a4:	2300      	movs	r3, #0
 80072a6:	9307      	str	r3, [sp, #28]
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80072ae:	6918      	ldr	r0, [r3, #16]
 80072b0:	f000 fc20 	bl	8007af4 <__hi0bits>
 80072b4:	f1c0 0020 	rsb	r0, r0, #32
 80072b8:	4440      	add	r0, r8
 80072ba:	f010 001f 	ands.w	r0, r0, #31
 80072be:	d047      	beq.n	8007350 <_dtoa_r+0x8c0>
 80072c0:	f1c0 0320 	rsb	r3, r0, #32
 80072c4:	2b04      	cmp	r3, #4
 80072c6:	dd3b      	ble.n	8007340 <_dtoa_r+0x8b0>
 80072c8:	9b05      	ldr	r3, [sp, #20]
 80072ca:	f1c0 001c 	rsb	r0, r0, #28
 80072ce:	4403      	add	r3, r0
 80072d0:	9305      	str	r3, [sp, #20]
 80072d2:	4405      	add	r5, r0
 80072d4:	4480      	add	r8, r0
 80072d6:	9b05      	ldr	r3, [sp, #20]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	dd05      	ble.n	80072e8 <_dtoa_r+0x858>
 80072dc:	461a      	mov	r2, r3
 80072de:	9904      	ldr	r1, [sp, #16]
 80072e0:	4620      	mov	r0, r4
 80072e2:	f000 fd43 	bl	8007d6c <__lshift>
 80072e6:	9004      	str	r0, [sp, #16]
 80072e8:	f1b8 0f00 	cmp.w	r8, #0
 80072ec:	dd05      	ble.n	80072fa <_dtoa_r+0x86a>
 80072ee:	4639      	mov	r1, r7
 80072f0:	4642      	mov	r2, r8
 80072f2:	4620      	mov	r0, r4
 80072f4:	f000 fd3a 	bl	8007d6c <__lshift>
 80072f8:	4607      	mov	r7, r0
 80072fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072fc:	b353      	cbz	r3, 8007354 <_dtoa_r+0x8c4>
 80072fe:	4639      	mov	r1, r7
 8007300:	9804      	ldr	r0, [sp, #16]
 8007302:	f000 fd87 	bl	8007e14 <__mcmp>
 8007306:	2800      	cmp	r0, #0
 8007308:	da24      	bge.n	8007354 <_dtoa_r+0x8c4>
 800730a:	2300      	movs	r3, #0
 800730c:	220a      	movs	r2, #10
 800730e:	9904      	ldr	r1, [sp, #16]
 8007310:	4620      	mov	r0, r4
 8007312:	f000 fbb4 	bl	8007a7e <__multadd>
 8007316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007318:	9004      	str	r0, [sp, #16]
 800731a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800731e:	2b00      	cmp	r3, #0
 8007320:	f000 814d 	beq.w	80075be <_dtoa_r+0xb2e>
 8007324:	2300      	movs	r3, #0
 8007326:	4631      	mov	r1, r6
 8007328:	220a      	movs	r2, #10
 800732a:	4620      	mov	r0, r4
 800732c:	f000 fba7 	bl	8007a7e <__multadd>
 8007330:	9b02      	ldr	r3, [sp, #8]
 8007332:	2b00      	cmp	r3, #0
 8007334:	4606      	mov	r6, r0
 8007336:	dc4f      	bgt.n	80073d8 <_dtoa_r+0x948>
 8007338:	9b06      	ldr	r3, [sp, #24]
 800733a:	2b02      	cmp	r3, #2
 800733c:	dd4c      	ble.n	80073d8 <_dtoa_r+0x948>
 800733e:	e011      	b.n	8007364 <_dtoa_r+0x8d4>
 8007340:	d0c9      	beq.n	80072d6 <_dtoa_r+0x846>
 8007342:	9a05      	ldr	r2, [sp, #20]
 8007344:	331c      	adds	r3, #28
 8007346:	441a      	add	r2, r3
 8007348:	9205      	str	r2, [sp, #20]
 800734a:	441d      	add	r5, r3
 800734c:	4498      	add	r8, r3
 800734e:	e7c2      	b.n	80072d6 <_dtoa_r+0x846>
 8007350:	4603      	mov	r3, r0
 8007352:	e7f6      	b.n	8007342 <_dtoa_r+0x8b2>
 8007354:	f1b9 0f00 	cmp.w	r9, #0
 8007358:	dc38      	bgt.n	80073cc <_dtoa_r+0x93c>
 800735a:	9b06      	ldr	r3, [sp, #24]
 800735c:	2b02      	cmp	r3, #2
 800735e:	dd35      	ble.n	80073cc <_dtoa_r+0x93c>
 8007360:	f8cd 9008 	str.w	r9, [sp, #8]
 8007364:	9b02      	ldr	r3, [sp, #8]
 8007366:	b963      	cbnz	r3, 8007382 <_dtoa_r+0x8f2>
 8007368:	4639      	mov	r1, r7
 800736a:	2205      	movs	r2, #5
 800736c:	4620      	mov	r0, r4
 800736e:	f000 fb86 	bl	8007a7e <__multadd>
 8007372:	4601      	mov	r1, r0
 8007374:	4607      	mov	r7, r0
 8007376:	9804      	ldr	r0, [sp, #16]
 8007378:	f000 fd4c 	bl	8007e14 <__mcmp>
 800737c:	2800      	cmp	r0, #0
 800737e:	f73f adcc 	bgt.w	8006f1a <_dtoa_r+0x48a>
 8007382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007384:	465d      	mov	r5, fp
 8007386:	ea6f 0a03 	mvn.w	sl, r3
 800738a:	f04f 0900 	mov.w	r9, #0
 800738e:	4639      	mov	r1, r7
 8007390:	4620      	mov	r0, r4
 8007392:	f000 fb5d 	bl	8007a50 <_Bfree>
 8007396:	2e00      	cmp	r6, #0
 8007398:	f43f aeb7 	beq.w	800710a <_dtoa_r+0x67a>
 800739c:	f1b9 0f00 	cmp.w	r9, #0
 80073a0:	d005      	beq.n	80073ae <_dtoa_r+0x91e>
 80073a2:	45b1      	cmp	r9, r6
 80073a4:	d003      	beq.n	80073ae <_dtoa_r+0x91e>
 80073a6:	4649      	mov	r1, r9
 80073a8:	4620      	mov	r0, r4
 80073aa:	f000 fb51 	bl	8007a50 <_Bfree>
 80073ae:	4631      	mov	r1, r6
 80073b0:	4620      	mov	r0, r4
 80073b2:	f000 fb4d 	bl	8007a50 <_Bfree>
 80073b6:	e6a8      	b.n	800710a <_dtoa_r+0x67a>
 80073b8:	2700      	movs	r7, #0
 80073ba:	463e      	mov	r6, r7
 80073bc:	e7e1      	b.n	8007382 <_dtoa_r+0x8f2>
 80073be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80073c2:	463e      	mov	r6, r7
 80073c4:	e5a9      	b.n	8006f1a <_dtoa_r+0x48a>
 80073c6:	bf00      	nop
 80073c8:	40240000 	.word	0x40240000
 80073cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	f000 80fa 	beq.w	80075cc <_dtoa_r+0xb3c>
 80073d8:	2d00      	cmp	r5, #0
 80073da:	dd05      	ble.n	80073e8 <_dtoa_r+0x958>
 80073dc:	4631      	mov	r1, r6
 80073de:	462a      	mov	r2, r5
 80073e0:	4620      	mov	r0, r4
 80073e2:	f000 fcc3 	bl	8007d6c <__lshift>
 80073e6:	4606      	mov	r6, r0
 80073e8:	9b07      	ldr	r3, [sp, #28]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d04c      	beq.n	8007488 <_dtoa_r+0x9f8>
 80073ee:	6871      	ldr	r1, [r6, #4]
 80073f0:	4620      	mov	r0, r4
 80073f2:	f000 faf9 	bl	80079e8 <_Balloc>
 80073f6:	6932      	ldr	r2, [r6, #16]
 80073f8:	3202      	adds	r2, #2
 80073fa:	4605      	mov	r5, r0
 80073fc:	0092      	lsls	r2, r2, #2
 80073fe:	f106 010c 	add.w	r1, r6, #12
 8007402:	300c      	adds	r0, #12
 8007404:	f7fe fcf8 	bl	8005df8 <memcpy>
 8007408:	2201      	movs	r2, #1
 800740a:	4629      	mov	r1, r5
 800740c:	4620      	mov	r0, r4
 800740e:	f000 fcad 	bl	8007d6c <__lshift>
 8007412:	9b00      	ldr	r3, [sp, #0]
 8007414:	f8cd b014 	str.w	fp, [sp, #20]
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	46b1      	mov	r9, r6
 800741e:	9307      	str	r3, [sp, #28]
 8007420:	4606      	mov	r6, r0
 8007422:	4639      	mov	r1, r7
 8007424:	9804      	ldr	r0, [sp, #16]
 8007426:	f7ff faa7 	bl	8006978 <quorem>
 800742a:	4649      	mov	r1, r9
 800742c:	4605      	mov	r5, r0
 800742e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007432:	9804      	ldr	r0, [sp, #16]
 8007434:	f000 fcee 	bl	8007e14 <__mcmp>
 8007438:	4632      	mov	r2, r6
 800743a:	9000      	str	r0, [sp, #0]
 800743c:	4639      	mov	r1, r7
 800743e:	4620      	mov	r0, r4
 8007440:	f000 fd02 	bl	8007e48 <__mdiff>
 8007444:	68c3      	ldr	r3, [r0, #12]
 8007446:	4602      	mov	r2, r0
 8007448:	bb03      	cbnz	r3, 800748c <_dtoa_r+0x9fc>
 800744a:	4601      	mov	r1, r0
 800744c:	9008      	str	r0, [sp, #32]
 800744e:	9804      	ldr	r0, [sp, #16]
 8007450:	f000 fce0 	bl	8007e14 <__mcmp>
 8007454:	9a08      	ldr	r2, [sp, #32]
 8007456:	4603      	mov	r3, r0
 8007458:	4611      	mov	r1, r2
 800745a:	4620      	mov	r0, r4
 800745c:	9308      	str	r3, [sp, #32]
 800745e:	f000 faf7 	bl	8007a50 <_Bfree>
 8007462:	9b08      	ldr	r3, [sp, #32]
 8007464:	b9a3      	cbnz	r3, 8007490 <_dtoa_r+0xa00>
 8007466:	9a06      	ldr	r2, [sp, #24]
 8007468:	b992      	cbnz	r2, 8007490 <_dtoa_r+0xa00>
 800746a:	9a07      	ldr	r2, [sp, #28]
 800746c:	b982      	cbnz	r2, 8007490 <_dtoa_r+0xa00>
 800746e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007472:	d029      	beq.n	80074c8 <_dtoa_r+0xa38>
 8007474:	9b00      	ldr	r3, [sp, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	dd01      	ble.n	800747e <_dtoa_r+0x9ee>
 800747a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800747e:	9b05      	ldr	r3, [sp, #20]
 8007480:	1c5d      	adds	r5, r3, #1
 8007482:	f883 8000 	strb.w	r8, [r3]
 8007486:	e782      	b.n	800738e <_dtoa_r+0x8fe>
 8007488:	4630      	mov	r0, r6
 800748a:	e7c2      	b.n	8007412 <_dtoa_r+0x982>
 800748c:	2301      	movs	r3, #1
 800748e:	e7e3      	b.n	8007458 <_dtoa_r+0x9c8>
 8007490:	9a00      	ldr	r2, [sp, #0]
 8007492:	2a00      	cmp	r2, #0
 8007494:	db04      	blt.n	80074a0 <_dtoa_r+0xa10>
 8007496:	d125      	bne.n	80074e4 <_dtoa_r+0xa54>
 8007498:	9a06      	ldr	r2, [sp, #24]
 800749a:	bb1a      	cbnz	r2, 80074e4 <_dtoa_r+0xa54>
 800749c:	9a07      	ldr	r2, [sp, #28]
 800749e:	bb0a      	cbnz	r2, 80074e4 <_dtoa_r+0xa54>
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	ddec      	ble.n	800747e <_dtoa_r+0x9ee>
 80074a4:	2201      	movs	r2, #1
 80074a6:	9904      	ldr	r1, [sp, #16]
 80074a8:	4620      	mov	r0, r4
 80074aa:	f000 fc5f 	bl	8007d6c <__lshift>
 80074ae:	4639      	mov	r1, r7
 80074b0:	9004      	str	r0, [sp, #16]
 80074b2:	f000 fcaf 	bl	8007e14 <__mcmp>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	dc03      	bgt.n	80074c2 <_dtoa_r+0xa32>
 80074ba:	d1e0      	bne.n	800747e <_dtoa_r+0x9ee>
 80074bc:	f018 0f01 	tst.w	r8, #1
 80074c0:	d0dd      	beq.n	800747e <_dtoa_r+0x9ee>
 80074c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80074c6:	d1d8      	bne.n	800747a <_dtoa_r+0x9ea>
 80074c8:	9b05      	ldr	r3, [sp, #20]
 80074ca:	9a05      	ldr	r2, [sp, #20]
 80074cc:	1c5d      	adds	r5, r3, #1
 80074ce:	2339      	movs	r3, #57	; 0x39
 80074d0:	7013      	strb	r3, [r2, #0]
 80074d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80074d6:	2b39      	cmp	r3, #57	; 0x39
 80074d8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80074dc:	d04f      	beq.n	800757e <_dtoa_r+0xaee>
 80074de:	3301      	adds	r3, #1
 80074e0:	7013      	strb	r3, [r2, #0]
 80074e2:	e754      	b.n	800738e <_dtoa_r+0x8fe>
 80074e4:	9a05      	ldr	r2, [sp, #20]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f102 0501 	add.w	r5, r2, #1
 80074ec:	dd06      	ble.n	80074fc <_dtoa_r+0xa6c>
 80074ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80074f2:	d0e9      	beq.n	80074c8 <_dtoa_r+0xa38>
 80074f4:	f108 0801 	add.w	r8, r8, #1
 80074f8:	9b05      	ldr	r3, [sp, #20]
 80074fa:	e7c2      	b.n	8007482 <_dtoa_r+0x9f2>
 80074fc:	9a02      	ldr	r2, [sp, #8]
 80074fe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007502:	eba5 030b 	sub.w	r3, r5, fp
 8007506:	4293      	cmp	r3, r2
 8007508:	d021      	beq.n	800754e <_dtoa_r+0xabe>
 800750a:	2300      	movs	r3, #0
 800750c:	220a      	movs	r2, #10
 800750e:	9904      	ldr	r1, [sp, #16]
 8007510:	4620      	mov	r0, r4
 8007512:	f000 fab4 	bl	8007a7e <__multadd>
 8007516:	45b1      	cmp	r9, r6
 8007518:	9004      	str	r0, [sp, #16]
 800751a:	f04f 0300 	mov.w	r3, #0
 800751e:	f04f 020a 	mov.w	r2, #10
 8007522:	4649      	mov	r1, r9
 8007524:	4620      	mov	r0, r4
 8007526:	d105      	bne.n	8007534 <_dtoa_r+0xaa4>
 8007528:	f000 faa9 	bl	8007a7e <__multadd>
 800752c:	4681      	mov	r9, r0
 800752e:	4606      	mov	r6, r0
 8007530:	9505      	str	r5, [sp, #20]
 8007532:	e776      	b.n	8007422 <_dtoa_r+0x992>
 8007534:	f000 faa3 	bl	8007a7e <__multadd>
 8007538:	4631      	mov	r1, r6
 800753a:	4681      	mov	r9, r0
 800753c:	2300      	movs	r3, #0
 800753e:	220a      	movs	r2, #10
 8007540:	4620      	mov	r0, r4
 8007542:	f000 fa9c 	bl	8007a7e <__multadd>
 8007546:	4606      	mov	r6, r0
 8007548:	e7f2      	b.n	8007530 <_dtoa_r+0xaa0>
 800754a:	f04f 0900 	mov.w	r9, #0
 800754e:	2201      	movs	r2, #1
 8007550:	9904      	ldr	r1, [sp, #16]
 8007552:	4620      	mov	r0, r4
 8007554:	f000 fc0a 	bl	8007d6c <__lshift>
 8007558:	4639      	mov	r1, r7
 800755a:	9004      	str	r0, [sp, #16]
 800755c:	f000 fc5a 	bl	8007e14 <__mcmp>
 8007560:	2800      	cmp	r0, #0
 8007562:	dcb6      	bgt.n	80074d2 <_dtoa_r+0xa42>
 8007564:	d102      	bne.n	800756c <_dtoa_r+0xadc>
 8007566:	f018 0f01 	tst.w	r8, #1
 800756a:	d1b2      	bne.n	80074d2 <_dtoa_r+0xa42>
 800756c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007570:	2b30      	cmp	r3, #48	; 0x30
 8007572:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007576:	f47f af0a 	bne.w	800738e <_dtoa_r+0x8fe>
 800757a:	4615      	mov	r5, r2
 800757c:	e7f6      	b.n	800756c <_dtoa_r+0xadc>
 800757e:	4593      	cmp	fp, r2
 8007580:	d105      	bne.n	800758e <_dtoa_r+0xafe>
 8007582:	2331      	movs	r3, #49	; 0x31
 8007584:	f10a 0a01 	add.w	sl, sl, #1
 8007588:	f88b 3000 	strb.w	r3, [fp]
 800758c:	e6ff      	b.n	800738e <_dtoa_r+0x8fe>
 800758e:	4615      	mov	r5, r2
 8007590:	e79f      	b.n	80074d2 <_dtoa_r+0xa42>
 8007592:	f8df b064 	ldr.w	fp, [pc, #100]	; 80075f8 <_dtoa_r+0xb68>
 8007596:	e007      	b.n	80075a8 <_dtoa_r+0xb18>
 8007598:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800759a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80075fc <_dtoa_r+0xb6c>
 800759e:	b11b      	cbz	r3, 80075a8 <_dtoa_r+0xb18>
 80075a0:	f10b 0308 	add.w	r3, fp, #8
 80075a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	4658      	mov	r0, fp
 80075aa:	b017      	add	sp, #92	; 0x5c
 80075ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b0:	9b06      	ldr	r3, [sp, #24]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	f77f ae35 	ble.w	8007222 <_dtoa_r+0x792>
 80075b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075ba:	9307      	str	r3, [sp, #28]
 80075bc:	e649      	b.n	8007252 <_dtoa_r+0x7c2>
 80075be:	9b02      	ldr	r3, [sp, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	dc03      	bgt.n	80075cc <_dtoa_r+0xb3c>
 80075c4:	9b06      	ldr	r3, [sp, #24]
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	f73f aecc 	bgt.w	8007364 <_dtoa_r+0x8d4>
 80075cc:	465d      	mov	r5, fp
 80075ce:	4639      	mov	r1, r7
 80075d0:	9804      	ldr	r0, [sp, #16]
 80075d2:	f7ff f9d1 	bl	8006978 <quorem>
 80075d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80075da:	f805 8b01 	strb.w	r8, [r5], #1
 80075de:	9a02      	ldr	r2, [sp, #8]
 80075e0:	eba5 030b 	sub.w	r3, r5, fp
 80075e4:	429a      	cmp	r2, r3
 80075e6:	ddb0      	ble.n	800754a <_dtoa_r+0xaba>
 80075e8:	2300      	movs	r3, #0
 80075ea:	220a      	movs	r2, #10
 80075ec:	9904      	ldr	r1, [sp, #16]
 80075ee:	4620      	mov	r0, r4
 80075f0:	f000 fa45 	bl	8007a7e <__multadd>
 80075f4:	9004      	str	r0, [sp, #16]
 80075f6:	e7ea      	b.n	80075ce <_dtoa_r+0xb3e>
 80075f8:	080086e8 	.word	0x080086e8
 80075fc:	0800870c 	.word	0x0800870c

08007600 <__sflush_r>:
 8007600:	898a      	ldrh	r2, [r1, #12]
 8007602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007606:	4605      	mov	r5, r0
 8007608:	0710      	lsls	r0, r2, #28
 800760a:	460c      	mov	r4, r1
 800760c:	d458      	bmi.n	80076c0 <__sflush_r+0xc0>
 800760e:	684b      	ldr	r3, [r1, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	dc05      	bgt.n	8007620 <__sflush_r+0x20>
 8007614:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007616:	2b00      	cmp	r3, #0
 8007618:	dc02      	bgt.n	8007620 <__sflush_r+0x20>
 800761a:	2000      	movs	r0, #0
 800761c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007622:	2e00      	cmp	r6, #0
 8007624:	d0f9      	beq.n	800761a <__sflush_r+0x1a>
 8007626:	2300      	movs	r3, #0
 8007628:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800762c:	682f      	ldr	r7, [r5, #0]
 800762e:	6a21      	ldr	r1, [r4, #32]
 8007630:	602b      	str	r3, [r5, #0]
 8007632:	d032      	beq.n	800769a <__sflush_r+0x9a>
 8007634:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007636:	89a3      	ldrh	r3, [r4, #12]
 8007638:	075a      	lsls	r2, r3, #29
 800763a:	d505      	bpl.n	8007648 <__sflush_r+0x48>
 800763c:	6863      	ldr	r3, [r4, #4]
 800763e:	1ac0      	subs	r0, r0, r3
 8007640:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007642:	b10b      	cbz	r3, 8007648 <__sflush_r+0x48>
 8007644:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007646:	1ac0      	subs	r0, r0, r3
 8007648:	2300      	movs	r3, #0
 800764a:	4602      	mov	r2, r0
 800764c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800764e:	6a21      	ldr	r1, [r4, #32]
 8007650:	4628      	mov	r0, r5
 8007652:	47b0      	blx	r6
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	89a3      	ldrh	r3, [r4, #12]
 8007658:	d106      	bne.n	8007668 <__sflush_r+0x68>
 800765a:	6829      	ldr	r1, [r5, #0]
 800765c:	291d      	cmp	r1, #29
 800765e:	d848      	bhi.n	80076f2 <__sflush_r+0xf2>
 8007660:	4a29      	ldr	r2, [pc, #164]	; (8007708 <__sflush_r+0x108>)
 8007662:	40ca      	lsrs	r2, r1
 8007664:	07d6      	lsls	r6, r2, #31
 8007666:	d544      	bpl.n	80076f2 <__sflush_r+0xf2>
 8007668:	2200      	movs	r2, #0
 800766a:	6062      	str	r2, [r4, #4]
 800766c:	04d9      	lsls	r1, r3, #19
 800766e:	6922      	ldr	r2, [r4, #16]
 8007670:	6022      	str	r2, [r4, #0]
 8007672:	d504      	bpl.n	800767e <__sflush_r+0x7e>
 8007674:	1c42      	adds	r2, r0, #1
 8007676:	d101      	bne.n	800767c <__sflush_r+0x7c>
 8007678:	682b      	ldr	r3, [r5, #0]
 800767a:	b903      	cbnz	r3, 800767e <__sflush_r+0x7e>
 800767c:	6560      	str	r0, [r4, #84]	; 0x54
 800767e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007680:	602f      	str	r7, [r5, #0]
 8007682:	2900      	cmp	r1, #0
 8007684:	d0c9      	beq.n	800761a <__sflush_r+0x1a>
 8007686:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800768a:	4299      	cmp	r1, r3
 800768c:	d002      	beq.n	8007694 <__sflush_r+0x94>
 800768e:	4628      	mov	r0, r5
 8007690:	f000 fc94 	bl	8007fbc <_free_r>
 8007694:	2000      	movs	r0, #0
 8007696:	6360      	str	r0, [r4, #52]	; 0x34
 8007698:	e7c0      	b.n	800761c <__sflush_r+0x1c>
 800769a:	2301      	movs	r3, #1
 800769c:	4628      	mov	r0, r5
 800769e:	47b0      	blx	r6
 80076a0:	1c41      	adds	r1, r0, #1
 80076a2:	d1c8      	bne.n	8007636 <__sflush_r+0x36>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0c5      	beq.n	8007636 <__sflush_r+0x36>
 80076aa:	2b1d      	cmp	r3, #29
 80076ac:	d001      	beq.n	80076b2 <__sflush_r+0xb2>
 80076ae:	2b16      	cmp	r3, #22
 80076b0:	d101      	bne.n	80076b6 <__sflush_r+0xb6>
 80076b2:	602f      	str	r7, [r5, #0]
 80076b4:	e7b1      	b.n	800761a <__sflush_r+0x1a>
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076bc:	81a3      	strh	r3, [r4, #12]
 80076be:	e7ad      	b.n	800761c <__sflush_r+0x1c>
 80076c0:	690f      	ldr	r7, [r1, #16]
 80076c2:	2f00      	cmp	r7, #0
 80076c4:	d0a9      	beq.n	800761a <__sflush_r+0x1a>
 80076c6:	0793      	lsls	r3, r2, #30
 80076c8:	680e      	ldr	r6, [r1, #0]
 80076ca:	bf08      	it	eq
 80076cc:	694b      	ldreq	r3, [r1, #20]
 80076ce:	600f      	str	r7, [r1, #0]
 80076d0:	bf18      	it	ne
 80076d2:	2300      	movne	r3, #0
 80076d4:	eba6 0807 	sub.w	r8, r6, r7
 80076d8:	608b      	str	r3, [r1, #8]
 80076da:	f1b8 0f00 	cmp.w	r8, #0
 80076de:	dd9c      	ble.n	800761a <__sflush_r+0x1a>
 80076e0:	4643      	mov	r3, r8
 80076e2:	463a      	mov	r2, r7
 80076e4:	6a21      	ldr	r1, [r4, #32]
 80076e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076e8:	4628      	mov	r0, r5
 80076ea:	47b0      	blx	r6
 80076ec:	2800      	cmp	r0, #0
 80076ee:	dc06      	bgt.n	80076fe <__sflush_r+0xfe>
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076f6:	81a3      	strh	r3, [r4, #12]
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076fc:	e78e      	b.n	800761c <__sflush_r+0x1c>
 80076fe:	4407      	add	r7, r0
 8007700:	eba8 0800 	sub.w	r8, r8, r0
 8007704:	e7e9      	b.n	80076da <__sflush_r+0xda>
 8007706:	bf00      	nop
 8007708:	20400001 	.word	0x20400001

0800770c <_fflush_r>:
 800770c:	b538      	push	{r3, r4, r5, lr}
 800770e:	690b      	ldr	r3, [r1, #16]
 8007710:	4605      	mov	r5, r0
 8007712:	460c      	mov	r4, r1
 8007714:	b1db      	cbz	r3, 800774e <_fflush_r+0x42>
 8007716:	b118      	cbz	r0, 8007720 <_fflush_r+0x14>
 8007718:	6983      	ldr	r3, [r0, #24]
 800771a:	b90b      	cbnz	r3, 8007720 <_fflush_r+0x14>
 800771c:	f000 f860 	bl	80077e0 <__sinit>
 8007720:	4b0c      	ldr	r3, [pc, #48]	; (8007754 <_fflush_r+0x48>)
 8007722:	429c      	cmp	r4, r3
 8007724:	d109      	bne.n	800773a <_fflush_r+0x2e>
 8007726:	686c      	ldr	r4, [r5, #4]
 8007728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800772c:	b17b      	cbz	r3, 800774e <_fflush_r+0x42>
 800772e:	4621      	mov	r1, r4
 8007730:	4628      	mov	r0, r5
 8007732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007736:	f7ff bf63 	b.w	8007600 <__sflush_r>
 800773a:	4b07      	ldr	r3, [pc, #28]	; (8007758 <_fflush_r+0x4c>)
 800773c:	429c      	cmp	r4, r3
 800773e:	d101      	bne.n	8007744 <_fflush_r+0x38>
 8007740:	68ac      	ldr	r4, [r5, #8]
 8007742:	e7f1      	b.n	8007728 <_fflush_r+0x1c>
 8007744:	4b05      	ldr	r3, [pc, #20]	; (800775c <_fflush_r+0x50>)
 8007746:	429c      	cmp	r4, r3
 8007748:	bf08      	it	eq
 800774a:	68ec      	ldreq	r4, [r5, #12]
 800774c:	e7ec      	b.n	8007728 <_fflush_r+0x1c>
 800774e:	2000      	movs	r0, #0
 8007750:	bd38      	pop	{r3, r4, r5, pc}
 8007752:	bf00      	nop
 8007754:	0800873c 	.word	0x0800873c
 8007758:	0800875c 	.word	0x0800875c
 800775c:	0800871c 	.word	0x0800871c

08007760 <std>:
 8007760:	2300      	movs	r3, #0
 8007762:	b510      	push	{r4, lr}
 8007764:	4604      	mov	r4, r0
 8007766:	e9c0 3300 	strd	r3, r3, [r0]
 800776a:	6083      	str	r3, [r0, #8]
 800776c:	8181      	strh	r1, [r0, #12]
 800776e:	6643      	str	r3, [r0, #100]	; 0x64
 8007770:	81c2      	strh	r2, [r0, #14]
 8007772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007776:	6183      	str	r3, [r0, #24]
 8007778:	4619      	mov	r1, r3
 800777a:	2208      	movs	r2, #8
 800777c:	305c      	adds	r0, #92	; 0x5c
 800777e:	f7fe fb46 	bl	8005e0e <memset>
 8007782:	4b05      	ldr	r3, [pc, #20]	; (8007798 <std+0x38>)
 8007784:	6263      	str	r3, [r4, #36]	; 0x24
 8007786:	4b05      	ldr	r3, [pc, #20]	; (800779c <std+0x3c>)
 8007788:	62a3      	str	r3, [r4, #40]	; 0x28
 800778a:	4b05      	ldr	r3, [pc, #20]	; (80077a0 <std+0x40>)
 800778c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800778e:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <std+0x44>)
 8007790:	6224      	str	r4, [r4, #32]
 8007792:	6323      	str	r3, [r4, #48]	; 0x30
 8007794:	bd10      	pop	{r4, pc}
 8007796:	bf00      	nop
 8007798:	08008419 	.word	0x08008419
 800779c:	0800843b 	.word	0x0800843b
 80077a0:	08008473 	.word	0x08008473
 80077a4:	08008497 	.word	0x08008497

080077a8 <_cleanup_r>:
 80077a8:	4901      	ldr	r1, [pc, #4]	; (80077b0 <_cleanup_r+0x8>)
 80077aa:	f000 b885 	b.w	80078b8 <_fwalk_reent>
 80077ae:	bf00      	nop
 80077b0:	0800770d 	.word	0x0800770d

080077b4 <__sfmoreglue>:
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	1e4a      	subs	r2, r1, #1
 80077b8:	2568      	movs	r5, #104	; 0x68
 80077ba:	4355      	muls	r5, r2
 80077bc:	460e      	mov	r6, r1
 80077be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077c2:	f000 fc49 	bl	8008058 <_malloc_r>
 80077c6:	4604      	mov	r4, r0
 80077c8:	b140      	cbz	r0, 80077dc <__sfmoreglue+0x28>
 80077ca:	2100      	movs	r1, #0
 80077cc:	e9c0 1600 	strd	r1, r6, [r0]
 80077d0:	300c      	adds	r0, #12
 80077d2:	60a0      	str	r0, [r4, #8]
 80077d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077d8:	f7fe fb19 	bl	8005e0e <memset>
 80077dc:	4620      	mov	r0, r4
 80077de:	bd70      	pop	{r4, r5, r6, pc}

080077e0 <__sinit>:
 80077e0:	6983      	ldr	r3, [r0, #24]
 80077e2:	b510      	push	{r4, lr}
 80077e4:	4604      	mov	r4, r0
 80077e6:	bb33      	cbnz	r3, 8007836 <__sinit+0x56>
 80077e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80077ec:	6503      	str	r3, [r0, #80]	; 0x50
 80077ee:	4b12      	ldr	r3, [pc, #72]	; (8007838 <__sinit+0x58>)
 80077f0:	4a12      	ldr	r2, [pc, #72]	; (800783c <__sinit+0x5c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	6282      	str	r2, [r0, #40]	; 0x28
 80077f6:	4298      	cmp	r0, r3
 80077f8:	bf04      	itt	eq
 80077fa:	2301      	moveq	r3, #1
 80077fc:	6183      	streq	r3, [r0, #24]
 80077fe:	f000 f81f 	bl	8007840 <__sfp>
 8007802:	6060      	str	r0, [r4, #4]
 8007804:	4620      	mov	r0, r4
 8007806:	f000 f81b 	bl	8007840 <__sfp>
 800780a:	60a0      	str	r0, [r4, #8]
 800780c:	4620      	mov	r0, r4
 800780e:	f000 f817 	bl	8007840 <__sfp>
 8007812:	2200      	movs	r2, #0
 8007814:	60e0      	str	r0, [r4, #12]
 8007816:	2104      	movs	r1, #4
 8007818:	6860      	ldr	r0, [r4, #4]
 800781a:	f7ff ffa1 	bl	8007760 <std>
 800781e:	2201      	movs	r2, #1
 8007820:	2109      	movs	r1, #9
 8007822:	68a0      	ldr	r0, [r4, #8]
 8007824:	f7ff ff9c 	bl	8007760 <std>
 8007828:	2202      	movs	r2, #2
 800782a:	2112      	movs	r1, #18
 800782c:	68e0      	ldr	r0, [r4, #12]
 800782e:	f7ff ff97 	bl	8007760 <std>
 8007832:	2301      	movs	r3, #1
 8007834:	61a3      	str	r3, [r4, #24]
 8007836:	bd10      	pop	{r4, pc}
 8007838:	080086d4 	.word	0x080086d4
 800783c:	080077a9 	.word	0x080077a9

08007840 <__sfp>:
 8007840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007842:	4b1b      	ldr	r3, [pc, #108]	; (80078b0 <__sfp+0x70>)
 8007844:	681e      	ldr	r6, [r3, #0]
 8007846:	69b3      	ldr	r3, [r6, #24]
 8007848:	4607      	mov	r7, r0
 800784a:	b913      	cbnz	r3, 8007852 <__sfp+0x12>
 800784c:	4630      	mov	r0, r6
 800784e:	f7ff ffc7 	bl	80077e0 <__sinit>
 8007852:	3648      	adds	r6, #72	; 0x48
 8007854:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007858:	3b01      	subs	r3, #1
 800785a:	d503      	bpl.n	8007864 <__sfp+0x24>
 800785c:	6833      	ldr	r3, [r6, #0]
 800785e:	b133      	cbz	r3, 800786e <__sfp+0x2e>
 8007860:	6836      	ldr	r6, [r6, #0]
 8007862:	e7f7      	b.n	8007854 <__sfp+0x14>
 8007864:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007868:	b16d      	cbz	r5, 8007886 <__sfp+0x46>
 800786a:	3468      	adds	r4, #104	; 0x68
 800786c:	e7f4      	b.n	8007858 <__sfp+0x18>
 800786e:	2104      	movs	r1, #4
 8007870:	4638      	mov	r0, r7
 8007872:	f7ff ff9f 	bl	80077b4 <__sfmoreglue>
 8007876:	6030      	str	r0, [r6, #0]
 8007878:	2800      	cmp	r0, #0
 800787a:	d1f1      	bne.n	8007860 <__sfp+0x20>
 800787c:	230c      	movs	r3, #12
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	4604      	mov	r4, r0
 8007882:	4620      	mov	r0, r4
 8007884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007886:	4b0b      	ldr	r3, [pc, #44]	; (80078b4 <__sfp+0x74>)
 8007888:	6665      	str	r5, [r4, #100]	; 0x64
 800788a:	e9c4 5500 	strd	r5, r5, [r4]
 800788e:	60a5      	str	r5, [r4, #8]
 8007890:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007894:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007898:	2208      	movs	r2, #8
 800789a:	4629      	mov	r1, r5
 800789c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078a0:	f7fe fab5 	bl	8005e0e <memset>
 80078a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078ac:	e7e9      	b.n	8007882 <__sfp+0x42>
 80078ae:	bf00      	nop
 80078b0:	080086d4 	.word	0x080086d4
 80078b4:	ffff0001 	.word	0xffff0001

080078b8 <_fwalk_reent>:
 80078b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078bc:	4680      	mov	r8, r0
 80078be:	4689      	mov	r9, r1
 80078c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078c4:	2600      	movs	r6, #0
 80078c6:	b914      	cbnz	r4, 80078ce <_fwalk_reent+0x16>
 80078c8:	4630      	mov	r0, r6
 80078ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80078d2:	3f01      	subs	r7, #1
 80078d4:	d501      	bpl.n	80078da <_fwalk_reent+0x22>
 80078d6:	6824      	ldr	r4, [r4, #0]
 80078d8:	e7f5      	b.n	80078c6 <_fwalk_reent+0xe>
 80078da:	89ab      	ldrh	r3, [r5, #12]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d907      	bls.n	80078f0 <_fwalk_reent+0x38>
 80078e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078e4:	3301      	adds	r3, #1
 80078e6:	d003      	beq.n	80078f0 <_fwalk_reent+0x38>
 80078e8:	4629      	mov	r1, r5
 80078ea:	4640      	mov	r0, r8
 80078ec:	47c8      	blx	r9
 80078ee:	4306      	orrs	r6, r0
 80078f0:	3568      	adds	r5, #104	; 0x68
 80078f2:	e7ee      	b.n	80078d2 <_fwalk_reent+0x1a>

080078f4 <_localeconv_r>:
 80078f4:	4b04      	ldr	r3, [pc, #16]	; (8007908 <_localeconv_r+0x14>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6a18      	ldr	r0, [r3, #32]
 80078fa:	4b04      	ldr	r3, [pc, #16]	; (800790c <_localeconv_r+0x18>)
 80078fc:	2800      	cmp	r0, #0
 80078fe:	bf08      	it	eq
 8007900:	4618      	moveq	r0, r3
 8007902:	30f0      	adds	r0, #240	; 0xf0
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	2000000c 	.word	0x2000000c
 800790c:	20000070 	.word	0x20000070

08007910 <__swhatbuf_r>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	460e      	mov	r6, r1
 8007914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007918:	2900      	cmp	r1, #0
 800791a:	b096      	sub	sp, #88	; 0x58
 800791c:	4614      	mov	r4, r2
 800791e:	461d      	mov	r5, r3
 8007920:	da07      	bge.n	8007932 <__swhatbuf_r+0x22>
 8007922:	2300      	movs	r3, #0
 8007924:	602b      	str	r3, [r5, #0]
 8007926:	89b3      	ldrh	r3, [r6, #12]
 8007928:	061a      	lsls	r2, r3, #24
 800792a:	d410      	bmi.n	800794e <__swhatbuf_r+0x3e>
 800792c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007930:	e00e      	b.n	8007950 <__swhatbuf_r+0x40>
 8007932:	466a      	mov	r2, sp
 8007934:	f000 fdd6 	bl	80084e4 <_fstat_r>
 8007938:	2800      	cmp	r0, #0
 800793a:	dbf2      	blt.n	8007922 <__swhatbuf_r+0x12>
 800793c:	9a01      	ldr	r2, [sp, #4]
 800793e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007942:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007946:	425a      	negs	r2, r3
 8007948:	415a      	adcs	r2, r3
 800794a:	602a      	str	r2, [r5, #0]
 800794c:	e7ee      	b.n	800792c <__swhatbuf_r+0x1c>
 800794e:	2340      	movs	r3, #64	; 0x40
 8007950:	2000      	movs	r0, #0
 8007952:	6023      	str	r3, [r4, #0]
 8007954:	b016      	add	sp, #88	; 0x58
 8007956:	bd70      	pop	{r4, r5, r6, pc}

08007958 <__smakebuf_r>:
 8007958:	898b      	ldrh	r3, [r1, #12]
 800795a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800795c:	079d      	lsls	r5, r3, #30
 800795e:	4606      	mov	r6, r0
 8007960:	460c      	mov	r4, r1
 8007962:	d507      	bpl.n	8007974 <__smakebuf_r+0x1c>
 8007964:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	6123      	str	r3, [r4, #16]
 800796c:	2301      	movs	r3, #1
 800796e:	6163      	str	r3, [r4, #20]
 8007970:	b002      	add	sp, #8
 8007972:	bd70      	pop	{r4, r5, r6, pc}
 8007974:	ab01      	add	r3, sp, #4
 8007976:	466a      	mov	r2, sp
 8007978:	f7ff ffca 	bl	8007910 <__swhatbuf_r>
 800797c:	9900      	ldr	r1, [sp, #0]
 800797e:	4605      	mov	r5, r0
 8007980:	4630      	mov	r0, r6
 8007982:	f000 fb69 	bl	8008058 <_malloc_r>
 8007986:	b948      	cbnz	r0, 800799c <__smakebuf_r+0x44>
 8007988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800798c:	059a      	lsls	r2, r3, #22
 800798e:	d4ef      	bmi.n	8007970 <__smakebuf_r+0x18>
 8007990:	f023 0303 	bic.w	r3, r3, #3
 8007994:	f043 0302 	orr.w	r3, r3, #2
 8007998:	81a3      	strh	r3, [r4, #12]
 800799a:	e7e3      	b.n	8007964 <__smakebuf_r+0xc>
 800799c:	4b0d      	ldr	r3, [pc, #52]	; (80079d4 <__smakebuf_r+0x7c>)
 800799e:	62b3      	str	r3, [r6, #40]	; 0x28
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	6020      	str	r0, [r4, #0]
 80079a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079a8:	81a3      	strh	r3, [r4, #12]
 80079aa:	9b00      	ldr	r3, [sp, #0]
 80079ac:	6163      	str	r3, [r4, #20]
 80079ae:	9b01      	ldr	r3, [sp, #4]
 80079b0:	6120      	str	r0, [r4, #16]
 80079b2:	b15b      	cbz	r3, 80079cc <__smakebuf_r+0x74>
 80079b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079b8:	4630      	mov	r0, r6
 80079ba:	f000 fda5 	bl	8008508 <_isatty_r>
 80079be:	b128      	cbz	r0, 80079cc <__smakebuf_r+0x74>
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	f023 0303 	bic.w	r3, r3, #3
 80079c6:	f043 0301 	orr.w	r3, r3, #1
 80079ca:	81a3      	strh	r3, [r4, #12]
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	431d      	orrs	r5, r3
 80079d0:	81a5      	strh	r5, [r4, #12]
 80079d2:	e7cd      	b.n	8007970 <__smakebuf_r+0x18>
 80079d4:	080077a9 	.word	0x080077a9

080079d8 <malloc>:
 80079d8:	4b02      	ldr	r3, [pc, #8]	; (80079e4 <malloc+0xc>)
 80079da:	4601      	mov	r1, r0
 80079dc:	6818      	ldr	r0, [r3, #0]
 80079de:	f000 bb3b 	b.w	8008058 <_malloc_r>
 80079e2:	bf00      	nop
 80079e4:	2000000c 	.word	0x2000000c

080079e8 <_Balloc>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80079ec:	4604      	mov	r4, r0
 80079ee:	460e      	mov	r6, r1
 80079f0:	b93d      	cbnz	r5, 8007a02 <_Balloc+0x1a>
 80079f2:	2010      	movs	r0, #16
 80079f4:	f7ff fff0 	bl	80079d8 <malloc>
 80079f8:	6260      	str	r0, [r4, #36]	; 0x24
 80079fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80079fe:	6005      	str	r5, [r0, #0]
 8007a00:	60c5      	str	r5, [r0, #12]
 8007a02:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007a04:	68eb      	ldr	r3, [r5, #12]
 8007a06:	b183      	cbz	r3, 8007a2a <_Balloc+0x42>
 8007a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007a10:	b9b8      	cbnz	r0, 8007a42 <_Balloc+0x5a>
 8007a12:	2101      	movs	r1, #1
 8007a14:	fa01 f506 	lsl.w	r5, r1, r6
 8007a18:	1d6a      	adds	r2, r5, #5
 8007a1a:	0092      	lsls	r2, r2, #2
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 fabf 	bl	8007fa0 <_calloc_r>
 8007a22:	b160      	cbz	r0, 8007a3e <_Balloc+0x56>
 8007a24:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007a28:	e00e      	b.n	8007a48 <_Balloc+0x60>
 8007a2a:	2221      	movs	r2, #33	; 0x21
 8007a2c:	2104      	movs	r1, #4
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f000 fab6 	bl	8007fa0 <_calloc_r>
 8007a34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a36:	60e8      	str	r0, [r5, #12]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1e4      	bne.n	8007a08 <_Balloc+0x20>
 8007a3e:	2000      	movs	r0, #0
 8007a40:	bd70      	pop	{r4, r5, r6, pc}
 8007a42:	6802      	ldr	r2, [r0, #0]
 8007a44:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007a48:	2300      	movs	r3, #0
 8007a4a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a4e:	e7f7      	b.n	8007a40 <_Balloc+0x58>

08007a50 <_Bfree>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007a54:	4606      	mov	r6, r0
 8007a56:	460d      	mov	r5, r1
 8007a58:	b93c      	cbnz	r4, 8007a6a <_Bfree+0x1a>
 8007a5a:	2010      	movs	r0, #16
 8007a5c:	f7ff ffbc 	bl	80079d8 <malloc>
 8007a60:	6270      	str	r0, [r6, #36]	; 0x24
 8007a62:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a66:	6004      	str	r4, [r0, #0]
 8007a68:	60c4      	str	r4, [r0, #12]
 8007a6a:	b13d      	cbz	r5, 8007a7c <_Bfree+0x2c>
 8007a6c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007a6e:	686a      	ldr	r2, [r5, #4]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a76:	6029      	str	r1, [r5, #0]
 8007a78:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007a7c:	bd70      	pop	{r4, r5, r6, pc}

08007a7e <__multadd>:
 8007a7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a82:	690d      	ldr	r5, [r1, #16]
 8007a84:	461f      	mov	r7, r3
 8007a86:	4606      	mov	r6, r0
 8007a88:	460c      	mov	r4, r1
 8007a8a:	f101 0c14 	add.w	ip, r1, #20
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f8dc 0000 	ldr.w	r0, [ip]
 8007a94:	b281      	uxth	r1, r0
 8007a96:	fb02 7101 	mla	r1, r2, r1, r7
 8007a9a:	0c0f      	lsrs	r7, r1, #16
 8007a9c:	0c00      	lsrs	r0, r0, #16
 8007a9e:	fb02 7000 	mla	r0, r2, r0, r7
 8007aa2:	b289      	uxth	r1, r1
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007aaa:	429d      	cmp	r5, r3
 8007aac:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007ab0:	f84c 1b04 	str.w	r1, [ip], #4
 8007ab4:	dcec      	bgt.n	8007a90 <__multadd+0x12>
 8007ab6:	b1d7      	cbz	r7, 8007aee <__multadd+0x70>
 8007ab8:	68a3      	ldr	r3, [r4, #8]
 8007aba:	42ab      	cmp	r3, r5
 8007abc:	dc12      	bgt.n	8007ae4 <__multadd+0x66>
 8007abe:	6861      	ldr	r1, [r4, #4]
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	3101      	adds	r1, #1
 8007ac4:	f7ff ff90 	bl	80079e8 <_Balloc>
 8007ac8:	6922      	ldr	r2, [r4, #16]
 8007aca:	3202      	adds	r2, #2
 8007acc:	f104 010c 	add.w	r1, r4, #12
 8007ad0:	4680      	mov	r8, r0
 8007ad2:	0092      	lsls	r2, r2, #2
 8007ad4:	300c      	adds	r0, #12
 8007ad6:	f7fe f98f 	bl	8005df8 <memcpy>
 8007ada:	4621      	mov	r1, r4
 8007adc:	4630      	mov	r0, r6
 8007ade:	f7ff ffb7 	bl	8007a50 <_Bfree>
 8007ae2:	4644      	mov	r4, r8
 8007ae4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ae8:	3501      	adds	r5, #1
 8007aea:	615f      	str	r7, [r3, #20]
 8007aec:	6125      	str	r5, [r4, #16]
 8007aee:	4620      	mov	r0, r4
 8007af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007af4 <__hi0bits>:
 8007af4:	0c02      	lsrs	r2, r0, #16
 8007af6:	0412      	lsls	r2, r2, #16
 8007af8:	4603      	mov	r3, r0
 8007afa:	b9b2      	cbnz	r2, 8007b2a <__hi0bits+0x36>
 8007afc:	0403      	lsls	r3, r0, #16
 8007afe:	2010      	movs	r0, #16
 8007b00:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007b04:	bf04      	itt	eq
 8007b06:	021b      	lsleq	r3, r3, #8
 8007b08:	3008      	addeq	r0, #8
 8007b0a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007b0e:	bf04      	itt	eq
 8007b10:	011b      	lsleq	r3, r3, #4
 8007b12:	3004      	addeq	r0, #4
 8007b14:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007b18:	bf04      	itt	eq
 8007b1a:	009b      	lsleq	r3, r3, #2
 8007b1c:	3002      	addeq	r0, #2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	db06      	blt.n	8007b30 <__hi0bits+0x3c>
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	d503      	bpl.n	8007b2e <__hi0bits+0x3a>
 8007b26:	3001      	adds	r0, #1
 8007b28:	4770      	bx	lr
 8007b2a:	2000      	movs	r0, #0
 8007b2c:	e7e8      	b.n	8007b00 <__hi0bits+0xc>
 8007b2e:	2020      	movs	r0, #32
 8007b30:	4770      	bx	lr

08007b32 <__lo0bits>:
 8007b32:	6803      	ldr	r3, [r0, #0]
 8007b34:	f013 0207 	ands.w	r2, r3, #7
 8007b38:	4601      	mov	r1, r0
 8007b3a:	d00b      	beq.n	8007b54 <__lo0bits+0x22>
 8007b3c:	07da      	lsls	r2, r3, #31
 8007b3e:	d423      	bmi.n	8007b88 <__lo0bits+0x56>
 8007b40:	0798      	lsls	r0, r3, #30
 8007b42:	bf49      	itett	mi
 8007b44:	085b      	lsrmi	r3, r3, #1
 8007b46:	089b      	lsrpl	r3, r3, #2
 8007b48:	2001      	movmi	r0, #1
 8007b4a:	600b      	strmi	r3, [r1, #0]
 8007b4c:	bf5c      	itt	pl
 8007b4e:	600b      	strpl	r3, [r1, #0]
 8007b50:	2002      	movpl	r0, #2
 8007b52:	4770      	bx	lr
 8007b54:	b298      	uxth	r0, r3
 8007b56:	b9a8      	cbnz	r0, 8007b84 <__lo0bits+0x52>
 8007b58:	0c1b      	lsrs	r3, r3, #16
 8007b5a:	2010      	movs	r0, #16
 8007b5c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007b60:	bf04      	itt	eq
 8007b62:	0a1b      	lsreq	r3, r3, #8
 8007b64:	3008      	addeq	r0, #8
 8007b66:	071a      	lsls	r2, r3, #28
 8007b68:	bf04      	itt	eq
 8007b6a:	091b      	lsreq	r3, r3, #4
 8007b6c:	3004      	addeq	r0, #4
 8007b6e:	079a      	lsls	r2, r3, #30
 8007b70:	bf04      	itt	eq
 8007b72:	089b      	lsreq	r3, r3, #2
 8007b74:	3002      	addeq	r0, #2
 8007b76:	07da      	lsls	r2, r3, #31
 8007b78:	d402      	bmi.n	8007b80 <__lo0bits+0x4e>
 8007b7a:	085b      	lsrs	r3, r3, #1
 8007b7c:	d006      	beq.n	8007b8c <__lo0bits+0x5a>
 8007b7e:	3001      	adds	r0, #1
 8007b80:	600b      	str	r3, [r1, #0]
 8007b82:	4770      	bx	lr
 8007b84:	4610      	mov	r0, r2
 8007b86:	e7e9      	b.n	8007b5c <__lo0bits+0x2a>
 8007b88:	2000      	movs	r0, #0
 8007b8a:	4770      	bx	lr
 8007b8c:	2020      	movs	r0, #32
 8007b8e:	4770      	bx	lr

08007b90 <__i2b>:
 8007b90:	b510      	push	{r4, lr}
 8007b92:	460c      	mov	r4, r1
 8007b94:	2101      	movs	r1, #1
 8007b96:	f7ff ff27 	bl	80079e8 <_Balloc>
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	6144      	str	r4, [r0, #20]
 8007b9e:	6102      	str	r2, [r0, #16]
 8007ba0:	bd10      	pop	{r4, pc}

08007ba2 <__multiply>:
 8007ba2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba6:	4614      	mov	r4, r2
 8007ba8:	690a      	ldr	r2, [r1, #16]
 8007baa:	6923      	ldr	r3, [r4, #16]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	bfb8      	it	lt
 8007bb0:	460b      	movlt	r3, r1
 8007bb2:	4688      	mov	r8, r1
 8007bb4:	bfbc      	itt	lt
 8007bb6:	46a0      	movlt	r8, r4
 8007bb8:	461c      	movlt	r4, r3
 8007bba:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007bbe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007bc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007bc6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007bca:	eb07 0609 	add.w	r6, r7, r9
 8007bce:	42b3      	cmp	r3, r6
 8007bd0:	bfb8      	it	lt
 8007bd2:	3101      	addlt	r1, #1
 8007bd4:	f7ff ff08 	bl	80079e8 <_Balloc>
 8007bd8:	f100 0514 	add.w	r5, r0, #20
 8007bdc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007be0:	462b      	mov	r3, r5
 8007be2:	2200      	movs	r2, #0
 8007be4:	4573      	cmp	r3, lr
 8007be6:	d316      	bcc.n	8007c16 <__multiply+0x74>
 8007be8:	f104 0214 	add.w	r2, r4, #20
 8007bec:	f108 0114 	add.w	r1, r8, #20
 8007bf0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007bf4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	9b00      	ldr	r3, [sp, #0]
 8007bfc:	9201      	str	r2, [sp, #4]
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d80c      	bhi.n	8007c1c <__multiply+0x7a>
 8007c02:	2e00      	cmp	r6, #0
 8007c04:	dd03      	ble.n	8007c0e <__multiply+0x6c>
 8007c06:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d05d      	beq.n	8007cca <__multiply+0x128>
 8007c0e:	6106      	str	r6, [r0, #16]
 8007c10:	b003      	add	sp, #12
 8007c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c16:	f843 2b04 	str.w	r2, [r3], #4
 8007c1a:	e7e3      	b.n	8007be4 <__multiply+0x42>
 8007c1c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007c20:	f1bb 0f00 	cmp.w	fp, #0
 8007c24:	d023      	beq.n	8007c6e <__multiply+0xcc>
 8007c26:	4689      	mov	r9, r1
 8007c28:	46ac      	mov	ip, r5
 8007c2a:	f04f 0800 	mov.w	r8, #0
 8007c2e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007c32:	f8dc a000 	ldr.w	sl, [ip]
 8007c36:	b2a3      	uxth	r3, r4
 8007c38:	fa1f fa8a 	uxth.w	sl, sl
 8007c3c:	fb0b a303 	mla	r3, fp, r3, sl
 8007c40:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007c44:	f8dc 4000 	ldr.w	r4, [ip]
 8007c48:	4443      	add	r3, r8
 8007c4a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007c4e:	fb0b 840a 	mla	r4, fp, sl, r8
 8007c52:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007c56:	46e2      	mov	sl, ip
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007c5e:	454f      	cmp	r7, r9
 8007c60:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007c64:	f84a 3b04 	str.w	r3, [sl], #4
 8007c68:	d82b      	bhi.n	8007cc2 <__multiply+0x120>
 8007c6a:	f8cc 8004 	str.w	r8, [ip, #4]
 8007c6e:	9b01      	ldr	r3, [sp, #4]
 8007c70:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007c74:	3204      	adds	r2, #4
 8007c76:	f1ba 0f00 	cmp.w	sl, #0
 8007c7a:	d020      	beq.n	8007cbe <__multiply+0x11c>
 8007c7c:	682b      	ldr	r3, [r5, #0]
 8007c7e:	4689      	mov	r9, r1
 8007c80:	46a8      	mov	r8, r5
 8007c82:	f04f 0b00 	mov.w	fp, #0
 8007c86:	f8b9 c000 	ldrh.w	ip, [r9]
 8007c8a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007c8e:	fb0a 440c 	mla	r4, sl, ip, r4
 8007c92:	445c      	add	r4, fp
 8007c94:	46c4      	mov	ip, r8
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007c9c:	f84c 3b04 	str.w	r3, [ip], #4
 8007ca0:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ca4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007ca8:	0c1b      	lsrs	r3, r3, #16
 8007caa:	fb0a b303 	mla	r3, sl, r3, fp
 8007cae:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007cb2:	454f      	cmp	r7, r9
 8007cb4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007cb8:	d805      	bhi.n	8007cc6 <__multiply+0x124>
 8007cba:	f8c8 3004 	str.w	r3, [r8, #4]
 8007cbe:	3504      	adds	r5, #4
 8007cc0:	e79b      	b.n	8007bfa <__multiply+0x58>
 8007cc2:	46d4      	mov	ip, sl
 8007cc4:	e7b3      	b.n	8007c2e <__multiply+0x8c>
 8007cc6:	46e0      	mov	r8, ip
 8007cc8:	e7dd      	b.n	8007c86 <__multiply+0xe4>
 8007cca:	3e01      	subs	r6, #1
 8007ccc:	e799      	b.n	8007c02 <__multiply+0x60>
	...

08007cd0 <__pow5mult>:
 8007cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cd4:	4615      	mov	r5, r2
 8007cd6:	f012 0203 	ands.w	r2, r2, #3
 8007cda:	4606      	mov	r6, r0
 8007cdc:	460f      	mov	r7, r1
 8007cde:	d007      	beq.n	8007cf0 <__pow5mult+0x20>
 8007ce0:	3a01      	subs	r2, #1
 8007ce2:	4c21      	ldr	r4, [pc, #132]	; (8007d68 <__pow5mult+0x98>)
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007cea:	f7ff fec8 	bl	8007a7e <__multadd>
 8007cee:	4607      	mov	r7, r0
 8007cf0:	10ad      	asrs	r5, r5, #2
 8007cf2:	d035      	beq.n	8007d60 <__pow5mult+0x90>
 8007cf4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007cf6:	b93c      	cbnz	r4, 8007d08 <__pow5mult+0x38>
 8007cf8:	2010      	movs	r0, #16
 8007cfa:	f7ff fe6d 	bl	80079d8 <malloc>
 8007cfe:	6270      	str	r0, [r6, #36]	; 0x24
 8007d00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d04:	6004      	str	r4, [r0, #0]
 8007d06:	60c4      	str	r4, [r0, #12]
 8007d08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007d0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d10:	b94c      	cbnz	r4, 8007d26 <__pow5mult+0x56>
 8007d12:	f240 2171 	movw	r1, #625	; 0x271
 8007d16:	4630      	mov	r0, r6
 8007d18:	f7ff ff3a 	bl	8007b90 <__i2b>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d22:	4604      	mov	r4, r0
 8007d24:	6003      	str	r3, [r0, #0]
 8007d26:	f04f 0800 	mov.w	r8, #0
 8007d2a:	07eb      	lsls	r3, r5, #31
 8007d2c:	d50a      	bpl.n	8007d44 <__pow5mult+0x74>
 8007d2e:	4639      	mov	r1, r7
 8007d30:	4622      	mov	r2, r4
 8007d32:	4630      	mov	r0, r6
 8007d34:	f7ff ff35 	bl	8007ba2 <__multiply>
 8007d38:	4639      	mov	r1, r7
 8007d3a:	4681      	mov	r9, r0
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	f7ff fe87 	bl	8007a50 <_Bfree>
 8007d42:	464f      	mov	r7, r9
 8007d44:	106d      	asrs	r5, r5, #1
 8007d46:	d00b      	beq.n	8007d60 <__pow5mult+0x90>
 8007d48:	6820      	ldr	r0, [r4, #0]
 8007d4a:	b938      	cbnz	r0, 8007d5c <__pow5mult+0x8c>
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	4621      	mov	r1, r4
 8007d50:	4630      	mov	r0, r6
 8007d52:	f7ff ff26 	bl	8007ba2 <__multiply>
 8007d56:	6020      	str	r0, [r4, #0]
 8007d58:	f8c0 8000 	str.w	r8, [r0]
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	e7e4      	b.n	8007d2a <__pow5mult+0x5a>
 8007d60:	4638      	mov	r0, r7
 8007d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d66:	bf00      	nop
 8007d68:	08008870 	.word	0x08008870

08007d6c <__lshift>:
 8007d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d70:	460c      	mov	r4, r1
 8007d72:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d76:	6923      	ldr	r3, [r4, #16]
 8007d78:	6849      	ldr	r1, [r1, #4]
 8007d7a:	eb0a 0903 	add.w	r9, sl, r3
 8007d7e:	68a3      	ldr	r3, [r4, #8]
 8007d80:	4607      	mov	r7, r0
 8007d82:	4616      	mov	r6, r2
 8007d84:	f109 0501 	add.w	r5, r9, #1
 8007d88:	42ab      	cmp	r3, r5
 8007d8a:	db32      	blt.n	8007df2 <__lshift+0x86>
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	f7ff fe2b 	bl	80079e8 <_Balloc>
 8007d92:	2300      	movs	r3, #0
 8007d94:	4680      	mov	r8, r0
 8007d96:	f100 0114 	add.w	r1, r0, #20
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	4553      	cmp	r3, sl
 8007d9e:	db2b      	blt.n	8007df8 <__lshift+0x8c>
 8007da0:	6920      	ldr	r0, [r4, #16]
 8007da2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007da6:	f104 0314 	add.w	r3, r4, #20
 8007daa:	f016 021f 	ands.w	r2, r6, #31
 8007dae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007db2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007db6:	d025      	beq.n	8007e04 <__lshift+0x98>
 8007db8:	f1c2 0e20 	rsb	lr, r2, #32
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	681e      	ldr	r6, [r3, #0]
 8007dc0:	468a      	mov	sl, r1
 8007dc2:	4096      	lsls	r6, r2
 8007dc4:	4330      	orrs	r0, r6
 8007dc6:	f84a 0b04 	str.w	r0, [sl], #4
 8007dca:	f853 0b04 	ldr.w	r0, [r3], #4
 8007dce:	459c      	cmp	ip, r3
 8007dd0:	fa20 f00e 	lsr.w	r0, r0, lr
 8007dd4:	d814      	bhi.n	8007e00 <__lshift+0x94>
 8007dd6:	6048      	str	r0, [r1, #4]
 8007dd8:	b108      	cbz	r0, 8007dde <__lshift+0x72>
 8007dda:	f109 0502 	add.w	r5, r9, #2
 8007dde:	3d01      	subs	r5, #1
 8007de0:	4638      	mov	r0, r7
 8007de2:	f8c8 5010 	str.w	r5, [r8, #16]
 8007de6:	4621      	mov	r1, r4
 8007de8:	f7ff fe32 	bl	8007a50 <_Bfree>
 8007dec:	4640      	mov	r0, r8
 8007dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007df2:	3101      	adds	r1, #1
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	e7c7      	b.n	8007d88 <__lshift+0x1c>
 8007df8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	e7cd      	b.n	8007d9c <__lshift+0x30>
 8007e00:	4651      	mov	r1, sl
 8007e02:	e7dc      	b.n	8007dbe <__lshift+0x52>
 8007e04:	3904      	subs	r1, #4
 8007e06:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e0a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e0e:	459c      	cmp	ip, r3
 8007e10:	d8f9      	bhi.n	8007e06 <__lshift+0x9a>
 8007e12:	e7e4      	b.n	8007dde <__lshift+0x72>

08007e14 <__mcmp>:
 8007e14:	6903      	ldr	r3, [r0, #16]
 8007e16:	690a      	ldr	r2, [r1, #16]
 8007e18:	1a9b      	subs	r3, r3, r2
 8007e1a:	b530      	push	{r4, r5, lr}
 8007e1c:	d10c      	bne.n	8007e38 <__mcmp+0x24>
 8007e1e:	0092      	lsls	r2, r2, #2
 8007e20:	3014      	adds	r0, #20
 8007e22:	3114      	adds	r1, #20
 8007e24:	1884      	adds	r4, r0, r2
 8007e26:	4411      	add	r1, r2
 8007e28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e30:	4295      	cmp	r5, r2
 8007e32:	d003      	beq.n	8007e3c <__mcmp+0x28>
 8007e34:	d305      	bcc.n	8007e42 <__mcmp+0x2e>
 8007e36:	2301      	movs	r3, #1
 8007e38:	4618      	mov	r0, r3
 8007e3a:	bd30      	pop	{r4, r5, pc}
 8007e3c:	42a0      	cmp	r0, r4
 8007e3e:	d3f3      	bcc.n	8007e28 <__mcmp+0x14>
 8007e40:	e7fa      	b.n	8007e38 <__mcmp+0x24>
 8007e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e46:	e7f7      	b.n	8007e38 <__mcmp+0x24>

08007e48 <__mdiff>:
 8007e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e4c:	460d      	mov	r5, r1
 8007e4e:	4607      	mov	r7, r0
 8007e50:	4611      	mov	r1, r2
 8007e52:	4628      	mov	r0, r5
 8007e54:	4614      	mov	r4, r2
 8007e56:	f7ff ffdd 	bl	8007e14 <__mcmp>
 8007e5a:	1e06      	subs	r6, r0, #0
 8007e5c:	d108      	bne.n	8007e70 <__mdiff+0x28>
 8007e5e:	4631      	mov	r1, r6
 8007e60:	4638      	mov	r0, r7
 8007e62:	f7ff fdc1 	bl	80079e8 <_Balloc>
 8007e66:	2301      	movs	r3, #1
 8007e68:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e70:	bfa4      	itt	ge
 8007e72:	4623      	movge	r3, r4
 8007e74:	462c      	movge	r4, r5
 8007e76:	4638      	mov	r0, r7
 8007e78:	6861      	ldr	r1, [r4, #4]
 8007e7a:	bfa6      	itte	ge
 8007e7c:	461d      	movge	r5, r3
 8007e7e:	2600      	movge	r6, #0
 8007e80:	2601      	movlt	r6, #1
 8007e82:	f7ff fdb1 	bl	80079e8 <_Balloc>
 8007e86:	692b      	ldr	r3, [r5, #16]
 8007e88:	60c6      	str	r6, [r0, #12]
 8007e8a:	6926      	ldr	r6, [r4, #16]
 8007e8c:	f105 0914 	add.w	r9, r5, #20
 8007e90:	f104 0214 	add.w	r2, r4, #20
 8007e94:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007e98:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007e9c:	f100 0514 	add.w	r5, r0, #20
 8007ea0:	f04f 0e00 	mov.w	lr, #0
 8007ea4:	f852 ab04 	ldr.w	sl, [r2], #4
 8007ea8:	f859 4b04 	ldr.w	r4, [r9], #4
 8007eac:	fa1e f18a 	uxtah	r1, lr, sl
 8007eb0:	b2a3      	uxth	r3, r4
 8007eb2:	1ac9      	subs	r1, r1, r3
 8007eb4:	0c23      	lsrs	r3, r4, #16
 8007eb6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007eba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007ebe:	b289      	uxth	r1, r1
 8007ec0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007ec4:	45c8      	cmp	r8, r9
 8007ec6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007eca:	4694      	mov	ip, r2
 8007ecc:	f845 3b04 	str.w	r3, [r5], #4
 8007ed0:	d8e8      	bhi.n	8007ea4 <__mdiff+0x5c>
 8007ed2:	45bc      	cmp	ip, r7
 8007ed4:	d304      	bcc.n	8007ee0 <__mdiff+0x98>
 8007ed6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007eda:	b183      	cbz	r3, 8007efe <__mdiff+0xb6>
 8007edc:	6106      	str	r6, [r0, #16]
 8007ede:	e7c5      	b.n	8007e6c <__mdiff+0x24>
 8007ee0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007ee4:	fa1e f381 	uxtah	r3, lr, r1
 8007ee8:	141a      	asrs	r2, r3, #16
 8007eea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ef4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007ef8:	f845 3b04 	str.w	r3, [r5], #4
 8007efc:	e7e9      	b.n	8007ed2 <__mdiff+0x8a>
 8007efe:	3e01      	subs	r6, #1
 8007f00:	e7e9      	b.n	8007ed6 <__mdiff+0x8e>

08007f02 <__d2b>:
 8007f02:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f06:	460e      	mov	r6, r1
 8007f08:	2101      	movs	r1, #1
 8007f0a:	ec59 8b10 	vmov	r8, r9, d0
 8007f0e:	4615      	mov	r5, r2
 8007f10:	f7ff fd6a 	bl	80079e8 <_Balloc>
 8007f14:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007f18:	4607      	mov	r7, r0
 8007f1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f1e:	bb34      	cbnz	r4, 8007f6e <__d2b+0x6c>
 8007f20:	9301      	str	r3, [sp, #4]
 8007f22:	f1b8 0300 	subs.w	r3, r8, #0
 8007f26:	d027      	beq.n	8007f78 <__d2b+0x76>
 8007f28:	a802      	add	r0, sp, #8
 8007f2a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007f2e:	f7ff fe00 	bl	8007b32 <__lo0bits>
 8007f32:	9900      	ldr	r1, [sp, #0]
 8007f34:	b1f0      	cbz	r0, 8007f74 <__d2b+0x72>
 8007f36:	9a01      	ldr	r2, [sp, #4]
 8007f38:	f1c0 0320 	rsb	r3, r0, #32
 8007f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f40:	430b      	orrs	r3, r1
 8007f42:	40c2      	lsrs	r2, r0
 8007f44:	617b      	str	r3, [r7, #20]
 8007f46:	9201      	str	r2, [sp, #4]
 8007f48:	9b01      	ldr	r3, [sp, #4]
 8007f4a:	61bb      	str	r3, [r7, #24]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	bf14      	ite	ne
 8007f50:	2102      	movne	r1, #2
 8007f52:	2101      	moveq	r1, #1
 8007f54:	6139      	str	r1, [r7, #16]
 8007f56:	b1c4      	cbz	r4, 8007f8a <__d2b+0x88>
 8007f58:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007f5c:	4404      	add	r4, r0
 8007f5e:	6034      	str	r4, [r6, #0]
 8007f60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007f64:	6028      	str	r0, [r5, #0]
 8007f66:	4638      	mov	r0, r7
 8007f68:	b003      	add	sp, #12
 8007f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f72:	e7d5      	b.n	8007f20 <__d2b+0x1e>
 8007f74:	6179      	str	r1, [r7, #20]
 8007f76:	e7e7      	b.n	8007f48 <__d2b+0x46>
 8007f78:	a801      	add	r0, sp, #4
 8007f7a:	f7ff fdda 	bl	8007b32 <__lo0bits>
 8007f7e:	9b01      	ldr	r3, [sp, #4]
 8007f80:	617b      	str	r3, [r7, #20]
 8007f82:	2101      	movs	r1, #1
 8007f84:	6139      	str	r1, [r7, #16]
 8007f86:	3020      	adds	r0, #32
 8007f88:	e7e5      	b.n	8007f56 <__d2b+0x54>
 8007f8a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007f8e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007f92:	6030      	str	r0, [r6, #0]
 8007f94:	6918      	ldr	r0, [r3, #16]
 8007f96:	f7ff fdad 	bl	8007af4 <__hi0bits>
 8007f9a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007f9e:	e7e1      	b.n	8007f64 <__d2b+0x62>

08007fa0 <_calloc_r>:
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	fb02 f401 	mul.w	r4, r2, r1
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	f000 f856 	bl	8008058 <_malloc_r>
 8007fac:	4605      	mov	r5, r0
 8007fae:	b118      	cbz	r0, 8007fb8 <_calloc_r+0x18>
 8007fb0:	4622      	mov	r2, r4
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	f7fd ff2b 	bl	8005e0e <memset>
 8007fb8:	4628      	mov	r0, r5
 8007fba:	bd38      	pop	{r3, r4, r5, pc}

08007fbc <_free_r>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	4605      	mov	r5, r0
 8007fc0:	2900      	cmp	r1, #0
 8007fc2:	d045      	beq.n	8008050 <_free_r+0x94>
 8007fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fc8:	1f0c      	subs	r4, r1, #4
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	bfb8      	it	lt
 8007fce:	18e4      	addlt	r4, r4, r3
 8007fd0:	f000 face 	bl	8008570 <__malloc_lock>
 8007fd4:	4a1f      	ldr	r2, [pc, #124]	; (8008054 <_free_r+0x98>)
 8007fd6:	6813      	ldr	r3, [r2, #0]
 8007fd8:	4610      	mov	r0, r2
 8007fda:	b933      	cbnz	r3, 8007fea <_free_r+0x2e>
 8007fdc:	6063      	str	r3, [r4, #4]
 8007fde:	6014      	str	r4, [r2, #0]
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fe6:	f000 bac4 	b.w	8008572 <__malloc_unlock>
 8007fea:	42a3      	cmp	r3, r4
 8007fec:	d90c      	bls.n	8008008 <_free_r+0x4c>
 8007fee:	6821      	ldr	r1, [r4, #0]
 8007ff0:	1862      	adds	r2, r4, r1
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	bf04      	itt	eq
 8007ff6:	681a      	ldreq	r2, [r3, #0]
 8007ff8:	685b      	ldreq	r3, [r3, #4]
 8007ffa:	6063      	str	r3, [r4, #4]
 8007ffc:	bf04      	itt	eq
 8007ffe:	1852      	addeq	r2, r2, r1
 8008000:	6022      	streq	r2, [r4, #0]
 8008002:	6004      	str	r4, [r0, #0]
 8008004:	e7ec      	b.n	8007fe0 <_free_r+0x24>
 8008006:	4613      	mov	r3, r2
 8008008:	685a      	ldr	r2, [r3, #4]
 800800a:	b10a      	cbz	r2, 8008010 <_free_r+0x54>
 800800c:	42a2      	cmp	r2, r4
 800800e:	d9fa      	bls.n	8008006 <_free_r+0x4a>
 8008010:	6819      	ldr	r1, [r3, #0]
 8008012:	1858      	adds	r0, r3, r1
 8008014:	42a0      	cmp	r0, r4
 8008016:	d10b      	bne.n	8008030 <_free_r+0x74>
 8008018:	6820      	ldr	r0, [r4, #0]
 800801a:	4401      	add	r1, r0
 800801c:	1858      	adds	r0, r3, r1
 800801e:	4282      	cmp	r2, r0
 8008020:	6019      	str	r1, [r3, #0]
 8008022:	d1dd      	bne.n	8007fe0 <_free_r+0x24>
 8008024:	6810      	ldr	r0, [r2, #0]
 8008026:	6852      	ldr	r2, [r2, #4]
 8008028:	605a      	str	r2, [r3, #4]
 800802a:	4401      	add	r1, r0
 800802c:	6019      	str	r1, [r3, #0]
 800802e:	e7d7      	b.n	8007fe0 <_free_r+0x24>
 8008030:	d902      	bls.n	8008038 <_free_r+0x7c>
 8008032:	230c      	movs	r3, #12
 8008034:	602b      	str	r3, [r5, #0]
 8008036:	e7d3      	b.n	8007fe0 <_free_r+0x24>
 8008038:	6820      	ldr	r0, [r4, #0]
 800803a:	1821      	adds	r1, r4, r0
 800803c:	428a      	cmp	r2, r1
 800803e:	bf04      	itt	eq
 8008040:	6811      	ldreq	r1, [r2, #0]
 8008042:	6852      	ldreq	r2, [r2, #4]
 8008044:	6062      	str	r2, [r4, #4]
 8008046:	bf04      	itt	eq
 8008048:	1809      	addeq	r1, r1, r0
 800804a:	6021      	streq	r1, [r4, #0]
 800804c:	605c      	str	r4, [r3, #4]
 800804e:	e7c7      	b.n	8007fe0 <_free_r+0x24>
 8008050:	bd38      	pop	{r3, r4, r5, pc}
 8008052:	bf00      	nop
 8008054:	200002a0 	.word	0x200002a0

08008058 <_malloc_r>:
 8008058:	b570      	push	{r4, r5, r6, lr}
 800805a:	1ccd      	adds	r5, r1, #3
 800805c:	f025 0503 	bic.w	r5, r5, #3
 8008060:	3508      	adds	r5, #8
 8008062:	2d0c      	cmp	r5, #12
 8008064:	bf38      	it	cc
 8008066:	250c      	movcc	r5, #12
 8008068:	2d00      	cmp	r5, #0
 800806a:	4606      	mov	r6, r0
 800806c:	db01      	blt.n	8008072 <_malloc_r+0x1a>
 800806e:	42a9      	cmp	r1, r5
 8008070:	d903      	bls.n	800807a <_malloc_r+0x22>
 8008072:	230c      	movs	r3, #12
 8008074:	6033      	str	r3, [r6, #0]
 8008076:	2000      	movs	r0, #0
 8008078:	bd70      	pop	{r4, r5, r6, pc}
 800807a:	f000 fa79 	bl	8008570 <__malloc_lock>
 800807e:	4a21      	ldr	r2, [pc, #132]	; (8008104 <_malloc_r+0xac>)
 8008080:	6814      	ldr	r4, [r2, #0]
 8008082:	4621      	mov	r1, r4
 8008084:	b991      	cbnz	r1, 80080ac <_malloc_r+0x54>
 8008086:	4c20      	ldr	r4, [pc, #128]	; (8008108 <_malloc_r+0xb0>)
 8008088:	6823      	ldr	r3, [r4, #0]
 800808a:	b91b      	cbnz	r3, 8008094 <_malloc_r+0x3c>
 800808c:	4630      	mov	r0, r6
 800808e:	f000 f9b3 	bl	80083f8 <_sbrk_r>
 8008092:	6020      	str	r0, [r4, #0]
 8008094:	4629      	mov	r1, r5
 8008096:	4630      	mov	r0, r6
 8008098:	f000 f9ae 	bl	80083f8 <_sbrk_r>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d124      	bne.n	80080ea <_malloc_r+0x92>
 80080a0:	230c      	movs	r3, #12
 80080a2:	6033      	str	r3, [r6, #0]
 80080a4:	4630      	mov	r0, r6
 80080a6:	f000 fa64 	bl	8008572 <__malloc_unlock>
 80080aa:	e7e4      	b.n	8008076 <_malloc_r+0x1e>
 80080ac:	680b      	ldr	r3, [r1, #0]
 80080ae:	1b5b      	subs	r3, r3, r5
 80080b0:	d418      	bmi.n	80080e4 <_malloc_r+0x8c>
 80080b2:	2b0b      	cmp	r3, #11
 80080b4:	d90f      	bls.n	80080d6 <_malloc_r+0x7e>
 80080b6:	600b      	str	r3, [r1, #0]
 80080b8:	50cd      	str	r5, [r1, r3]
 80080ba:	18cc      	adds	r4, r1, r3
 80080bc:	4630      	mov	r0, r6
 80080be:	f000 fa58 	bl	8008572 <__malloc_unlock>
 80080c2:	f104 000b 	add.w	r0, r4, #11
 80080c6:	1d23      	adds	r3, r4, #4
 80080c8:	f020 0007 	bic.w	r0, r0, #7
 80080cc:	1ac3      	subs	r3, r0, r3
 80080ce:	d0d3      	beq.n	8008078 <_malloc_r+0x20>
 80080d0:	425a      	negs	r2, r3
 80080d2:	50e2      	str	r2, [r4, r3]
 80080d4:	e7d0      	b.n	8008078 <_malloc_r+0x20>
 80080d6:	428c      	cmp	r4, r1
 80080d8:	684b      	ldr	r3, [r1, #4]
 80080da:	bf16      	itet	ne
 80080dc:	6063      	strne	r3, [r4, #4]
 80080de:	6013      	streq	r3, [r2, #0]
 80080e0:	460c      	movne	r4, r1
 80080e2:	e7eb      	b.n	80080bc <_malloc_r+0x64>
 80080e4:	460c      	mov	r4, r1
 80080e6:	6849      	ldr	r1, [r1, #4]
 80080e8:	e7cc      	b.n	8008084 <_malloc_r+0x2c>
 80080ea:	1cc4      	adds	r4, r0, #3
 80080ec:	f024 0403 	bic.w	r4, r4, #3
 80080f0:	42a0      	cmp	r0, r4
 80080f2:	d005      	beq.n	8008100 <_malloc_r+0xa8>
 80080f4:	1a21      	subs	r1, r4, r0
 80080f6:	4630      	mov	r0, r6
 80080f8:	f000 f97e 	bl	80083f8 <_sbrk_r>
 80080fc:	3001      	adds	r0, #1
 80080fe:	d0cf      	beq.n	80080a0 <_malloc_r+0x48>
 8008100:	6025      	str	r5, [r4, #0]
 8008102:	e7db      	b.n	80080bc <_malloc_r+0x64>
 8008104:	200002a0 	.word	0x200002a0
 8008108:	200002a4 	.word	0x200002a4

0800810c <__sfputc_r>:
 800810c:	6893      	ldr	r3, [r2, #8]
 800810e:	3b01      	subs	r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	b410      	push	{r4}
 8008114:	6093      	str	r3, [r2, #8]
 8008116:	da08      	bge.n	800812a <__sfputc_r+0x1e>
 8008118:	6994      	ldr	r4, [r2, #24]
 800811a:	42a3      	cmp	r3, r4
 800811c:	db01      	blt.n	8008122 <__sfputc_r+0x16>
 800811e:	290a      	cmp	r1, #10
 8008120:	d103      	bne.n	800812a <__sfputc_r+0x1e>
 8008122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008126:	f7fe bb67 	b.w	80067f8 <__swbuf_r>
 800812a:	6813      	ldr	r3, [r2, #0]
 800812c:	1c58      	adds	r0, r3, #1
 800812e:	6010      	str	r0, [r2, #0]
 8008130:	7019      	strb	r1, [r3, #0]
 8008132:	4608      	mov	r0, r1
 8008134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008138:	4770      	bx	lr

0800813a <__sfputs_r>:
 800813a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813c:	4606      	mov	r6, r0
 800813e:	460f      	mov	r7, r1
 8008140:	4614      	mov	r4, r2
 8008142:	18d5      	adds	r5, r2, r3
 8008144:	42ac      	cmp	r4, r5
 8008146:	d101      	bne.n	800814c <__sfputs_r+0x12>
 8008148:	2000      	movs	r0, #0
 800814a:	e007      	b.n	800815c <__sfputs_r+0x22>
 800814c:	463a      	mov	r2, r7
 800814e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008152:	4630      	mov	r0, r6
 8008154:	f7ff ffda 	bl	800810c <__sfputc_r>
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	d1f3      	bne.n	8008144 <__sfputs_r+0xa>
 800815c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008160 <_vfiprintf_r>:
 8008160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008164:	460c      	mov	r4, r1
 8008166:	b09d      	sub	sp, #116	; 0x74
 8008168:	4617      	mov	r7, r2
 800816a:	461d      	mov	r5, r3
 800816c:	4606      	mov	r6, r0
 800816e:	b118      	cbz	r0, 8008178 <_vfiprintf_r+0x18>
 8008170:	6983      	ldr	r3, [r0, #24]
 8008172:	b90b      	cbnz	r3, 8008178 <_vfiprintf_r+0x18>
 8008174:	f7ff fb34 	bl	80077e0 <__sinit>
 8008178:	4b7c      	ldr	r3, [pc, #496]	; (800836c <_vfiprintf_r+0x20c>)
 800817a:	429c      	cmp	r4, r3
 800817c:	d158      	bne.n	8008230 <_vfiprintf_r+0xd0>
 800817e:	6874      	ldr	r4, [r6, #4]
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	0718      	lsls	r0, r3, #28
 8008184:	d55e      	bpl.n	8008244 <_vfiprintf_r+0xe4>
 8008186:	6923      	ldr	r3, [r4, #16]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d05b      	beq.n	8008244 <_vfiprintf_r+0xe4>
 800818c:	2300      	movs	r3, #0
 800818e:	9309      	str	r3, [sp, #36]	; 0x24
 8008190:	2320      	movs	r3, #32
 8008192:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008196:	2330      	movs	r3, #48	; 0x30
 8008198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800819c:	9503      	str	r5, [sp, #12]
 800819e:	f04f 0b01 	mov.w	fp, #1
 80081a2:	46b8      	mov	r8, r7
 80081a4:	4645      	mov	r5, r8
 80081a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80081aa:	b10b      	cbz	r3, 80081b0 <_vfiprintf_r+0x50>
 80081ac:	2b25      	cmp	r3, #37	; 0x25
 80081ae:	d154      	bne.n	800825a <_vfiprintf_r+0xfa>
 80081b0:	ebb8 0a07 	subs.w	sl, r8, r7
 80081b4:	d00b      	beq.n	80081ce <_vfiprintf_r+0x6e>
 80081b6:	4653      	mov	r3, sl
 80081b8:	463a      	mov	r2, r7
 80081ba:	4621      	mov	r1, r4
 80081bc:	4630      	mov	r0, r6
 80081be:	f7ff ffbc 	bl	800813a <__sfputs_r>
 80081c2:	3001      	adds	r0, #1
 80081c4:	f000 80c2 	beq.w	800834c <_vfiprintf_r+0x1ec>
 80081c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ca:	4453      	add	r3, sl
 80081cc:	9309      	str	r3, [sp, #36]	; 0x24
 80081ce:	f898 3000 	ldrb.w	r3, [r8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 80ba 	beq.w	800834c <_vfiprintf_r+0x1ec>
 80081d8:	2300      	movs	r3, #0
 80081da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081e2:	9304      	str	r3, [sp, #16]
 80081e4:	9307      	str	r3, [sp, #28]
 80081e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081ea:	931a      	str	r3, [sp, #104]	; 0x68
 80081ec:	46a8      	mov	r8, r5
 80081ee:	2205      	movs	r2, #5
 80081f0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80081f4:	485e      	ldr	r0, [pc, #376]	; (8008370 <_vfiprintf_r+0x210>)
 80081f6:	f7f8 f813 	bl	8000220 <memchr>
 80081fa:	9b04      	ldr	r3, [sp, #16]
 80081fc:	bb78      	cbnz	r0, 800825e <_vfiprintf_r+0xfe>
 80081fe:	06d9      	lsls	r1, r3, #27
 8008200:	bf44      	itt	mi
 8008202:	2220      	movmi	r2, #32
 8008204:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008208:	071a      	lsls	r2, r3, #28
 800820a:	bf44      	itt	mi
 800820c:	222b      	movmi	r2, #43	; 0x2b
 800820e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008212:	782a      	ldrb	r2, [r5, #0]
 8008214:	2a2a      	cmp	r2, #42	; 0x2a
 8008216:	d02a      	beq.n	800826e <_vfiprintf_r+0x10e>
 8008218:	9a07      	ldr	r2, [sp, #28]
 800821a:	46a8      	mov	r8, r5
 800821c:	2000      	movs	r0, #0
 800821e:	250a      	movs	r5, #10
 8008220:	4641      	mov	r1, r8
 8008222:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008226:	3b30      	subs	r3, #48	; 0x30
 8008228:	2b09      	cmp	r3, #9
 800822a:	d969      	bls.n	8008300 <_vfiprintf_r+0x1a0>
 800822c:	b360      	cbz	r0, 8008288 <_vfiprintf_r+0x128>
 800822e:	e024      	b.n	800827a <_vfiprintf_r+0x11a>
 8008230:	4b50      	ldr	r3, [pc, #320]	; (8008374 <_vfiprintf_r+0x214>)
 8008232:	429c      	cmp	r4, r3
 8008234:	d101      	bne.n	800823a <_vfiprintf_r+0xda>
 8008236:	68b4      	ldr	r4, [r6, #8]
 8008238:	e7a2      	b.n	8008180 <_vfiprintf_r+0x20>
 800823a:	4b4f      	ldr	r3, [pc, #316]	; (8008378 <_vfiprintf_r+0x218>)
 800823c:	429c      	cmp	r4, r3
 800823e:	bf08      	it	eq
 8008240:	68f4      	ldreq	r4, [r6, #12]
 8008242:	e79d      	b.n	8008180 <_vfiprintf_r+0x20>
 8008244:	4621      	mov	r1, r4
 8008246:	4630      	mov	r0, r6
 8008248:	f7fe fb28 	bl	800689c <__swsetup_r>
 800824c:	2800      	cmp	r0, #0
 800824e:	d09d      	beq.n	800818c <_vfiprintf_r+0x2c>
 8008250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008254:	b01d      	add	sp, #116	; 0x74
 8008256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825a:	46a8      	mov	r8, r5
 800825c:	e7a2      	b.n	80081a4 <_vfiprintf_r+0x44>
 800825e:	4a44      	ldr	r2, [pc, #272]	; (8008370 <_vfiprintf_r+0x210>)
 8008260:	1a80      	subs	r0, r0, r2
 8008262:	fa0b f000 	lsl.w	r0, fp, r0
 8008266:	4318      	orrs	r0, r3
 8008268:	9004      	str	r0, [sp, #16]
 800826a:	4645      	mov	r5, r8
 800826c:	e7be      	b.n	80081ec <_vfiprintf_r+0x8c>
 800826e:	9a03      	ldr	r2, [sp, #12]
 8008270:	1d11      	adds	r1, r2, #4
 8008272:	6812      	ldr	r2, [r2, #0]
 8008274:	9103      	str	r1, [sp, #12]
 8008276:	2a00      	cmp	r2, #0
 8008278:	db01      	blt.n	800827e <_vfiprintf_r+0x11e>
 800827a:	9207      	str	r2, [sp, #28]
 800827c:	e004      	b.n	8008288 <_vfiprintf_r+0x128>
 800827e:	4252      	negs	r2, r2
 8008280:	f043 0302 	orr.w	r3, r3, #2
 8008284:	9207      	str	r2, [sp, #28]
 8008286:	9304      	str	r3, [sp, #16]
 8008288:	f898 3000 	ldrb.w	r3, [r8]
 800828c:	2b2e      	cmp	r3, #46	; 0x2e
 800828e:	d10e      	bne.n	80082ae <_vfiprintf_r+0x14e>
 8008290:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008294:	2b2a      	cmp	r3, #42	; 0x2a
 8008296:	d138      	bne.n	800830a <_vfiprintf_r+0x1aa>
 8008298:	9b03      	ldr	r3, [sp, #12]
 800829a:	1d1a      	adds	r2, r3, #4
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	9203      	str	r2, [sp, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	bfb8      	it	lt
 80082a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80082a8:	f108 0802 	add.w	r8, r8, #2
 80082ac:	9305      	str	r3, [sp, #20]
 80082ae:	4d33      	ldr	r5, [pc, #204]	; (800837c <_vfiprintf_r+0x21c>)
 80082b0:	f898 1000 	ldrb.w	r1, [r8]
 80082b4:	2203      	movs	r2, #3
 80082b6:	4628      	mov	r0, r5
 80082b8:	f7f7 ffb2 	bl	8000220 <memchr>
 80082bc:	b140      	cbz	r0, 80082d0 <_vfiprintf_r+0x170>
 80082be:	2340      	movs	r3, #64	; 0x40
 80082c0:	1b40      	subs	r0, r0, r5
 80082c2:	fa03 f000 	lsl.w	r0, r3, r0
 80082c6:	9b04      	ldr	r3, [sp, #16]
 80082c8:	4303      	orrs	r3, r0
 80082ca:	f108 0801 	add.w	r8, r8, #1
 80082ce:	9304      	str	r3, [sp, #16]
 80082d0:	f898 1000 	ldrb.w	r1, [r8]
 80082d4:	482a      	ldr	r0, [pc, #168]	; (8008380 <_vfiprintf_r+0x220>)
 80082d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082da:	2206      	movs	r2, #6
 80082dc:	f108 0701 	add.w	r7, r8, #1
 80082e0:	f7f7 ff9e 	bl	8000220 <memchr>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d037      	beq.n	8008358 <_vfiprintf_r+0x1f8>
 80082e8:	4b26      	ldr	r3, [pc, #152]	; (8008384 <_vfiprintf_r+0x224>)
 80082ea:	bb1b      	cbnz	r3, 8008334 <_vfiprintf_r+0x1d4>
 80082ec:	9b03      	ldr	r3, [sp, #12]
 80082ee:	3307      	adds	r3, #7
 80082f0:	f023 0307 	bic.w	r3, r3, #7
 80082f4:	3308      	adds	r3, #8
 80082f6:	9303      	str	r3, [sp, #12]
 80082f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fa:	444b      	add	r3, r9
 80082fc:	9309      	str	r3, [sp, #36]	; 0x24
 80082fe:	e750      	b.n	80081a2 <_vfiprintf_r+0x42>
 8008300:	fb05 3202 	mla	r2, r5, r2, r3
 8008304:	2001      	movs	r0, #1
 8008306:	4688      	mov	r8, r1
 8008308:	e78a      	b.n	8008220 <_vfiprintf_r+0xc0>
 800830a:	2300      	movs	r3, #0
 800830c:	f108 0801 	add.w	r8, r8, #1
 8008310:	9305      	str	r3, [sp, #20]
 8008312:	4619      	mov	r1, r3
 8008314:	250a      	movs	r5, #10
 8008316:	4640      	mov	r0, r8
 8008318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800831c:	3a30      	subs	r2, #48	; 0x30
 800831e:	2a09      	cmp	r2, #9
 8008320:	d903      	bls.n	800832a <_vfiprintf_r+0x1ca>
 8008322:	2b00      	cmp	r3, #0
 8008324:	d0c3      	beq.n	80082ae <_vfiprintf_r+0x14e>
 8008326:	9105      	str	r1, [sp, #20]
 8008328:	e7c1      	b.n	80082ae <_vfiprintf_r+0x14e>
 800832a:	fb05 2101 	mla	r1, r5, r1, r2
 800832e:	2301      	movs	r3, #1
 8008330:	4680      	mov	r8, r0
 8008332:	e7f0      	b.n	8008316 <_vfiprintf_r+0x1b6>
 8008334:	ab03      	add	r3, sp, #12
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	4622      	mov	r2, r4
 800833a:	4b13      	ldr	r3, [pc, #76]	; (8008388 <_vfiprintf_r+0x228>)
 800833c:	a904      	add	r1, sp, #16
 800833e:	4630      	mov	r0, r6
 8008340:	f7fd fe02 	bl	8005f48 <_printf_float>
 8008344:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008348:	4681      	mov	r9, r0
 800834a:	d1d5      	bne.n	80082f8 <_vfiprintf_r+0x198>
 800834c:	89a3      	ldrh	r3, [r4, #12]
 800834e:	065b      	lsls	r3, r3, #25
 8008350:	f53f af7e 	bmi.w	8008250 <_vfiprintf_r+0xf0>
 8008354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008356:	e77d      	b.n	8008254 <_vfiprintf_r+0xf4>
 8008358:	ab03      	add	r3, sp, #12
 800835a:	9300      	str	r3, [sp, #0]
 800835c:	4622      	mov	r2, r4
 800835e:	4b0a      	ldr	r3, [pc, #40]	; (8008388 <_vfiprintf_r+0x228>)
 8008360:	a904      	add	r1, sp, #16
 8008362:	4630      	mov	r0, r6
 8008364:	f7fe f8a6 	bl	80064b4 <_printf_i>
 8008368:	e7ec      	b.n	8008344 <_vfiprintf_r+0x1e4>
 800836a:	bf00      	nop
 800836c:	0800873c 	.word	0x0800873c
 8008370:	0800887c 	.word	0x0800887c
 8008374:	0800875c 	.word	0x0800875c
 8008378:	0800871c 	.word	0x0800871c
 800837c:	08008882 	.word	0x08008882
 8008380:	08008886 	.word	0x08008886
 8008384:	08005f49 	.word	0x08005f49
 8008388:	0800813b 	.word	0x0800813b

0800838c <_putc_r>:
 800838c:	b570      	push	{r4, r5, r6, lr}
 800838e:	460d      	mov	r5, r1
 8008390:	4614      	mov	r4, r2
 8008392:	4606      	mov	r6, r0
 8008394:	b118      	cbz	r0, 800839e <_putc_r+0x12>
 8008396:	6983      	ldr	r3, [r0, #24]
 8008398:	b90b      	cbnz	r3, 800839e <_putc_r+0x12>
 800839a:	f7ff fa21 	bl	80077e0 <__sinit>
 800839e:	4b13      	ldr	r3, [pc, #76]	; (80083ec <_putc_r+0x60>)
 80083a0:	429c      	cmp	r4, r3
 80083a2:	d112      	bne.n	80083ca <_putc_r+0x3e>
 80083a4:	6874      	ldr	r4, [r6, #4]
 80083a6:	68a3      	ldr	r3, [r4, #8]
 80083a8:	3b01      	subs	r3, #1
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	60a3      	str	r3, [r4, #8]
 80083ae:	da16      	bge.n	80083de <_putc_r+0x52>
 80083b0:	69a2      	ldr	r2, [r4, #24]
 80083b2:	4293      	cmp	r3, r2
 80083b4:	db02      	blt.n	80083bc <_putc_r+0x30>
 80083b6:	b2eb      	uxtb	r3, r5
 80083b8:	2b0a      	cmp	r3, #10
 80083ba:	d110      	bne.n	80083de <_putc_r+0x52>
 80083bc:	4622      	mov	r2, r4
 80083be:	4629      	mov	r1, r5
 80083c0:	4630      	mov	r0, r6
 80083c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083c6:	f7fe ba17 	b.w	80067f8 <__swbuf_r>
 80083ca:	4b09      	ldr	r3, [pc, #36]	; (80083f0 <_putc_r+0x64>)
 80083cc:	429c      	cmp	r4, r3
 80083ce:	d101      	bne.n	80083d4 <_putc_r+0x48>
 80083d0:	68b4      	ldr	r4, [r6, #8]
 80083d2:	e7e8      	b.n	80083a6 <_putc_r+0x1a>
 80083d4:	4b07      	ldr	r3, [pc, #28]	; (80083f4 <_putc_r+0x68>)
 80083d6:	429c      	cmp	r4, r3
 80083d8:	bf08      	it	eq
 80083da:	68f4      	ldreq	r4, [r6, #12]
 80083dc:	e7e3      	b.n	80083a6 <_putc_r+0x1a>
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	1c5a      	adds	r2, r3, #1
 80083e2:	6022      	str	r2, [r4, #0]
 80083e4:	701d      	strb	r5, [r3, #0]
 80083e6:	b2e8      	uxtb	r0, r5
 80083e8:	bd70      	pop	{r4, r5, r6, pc}
 80083ea:	bf00      	nop
 80083ec:	0800873c 	.word	0x0800873c
 80083f0:	0800875c 	.word	0x0800875c
 80083f4:	0800871c 	.word	0x0800871c

080083f8 <_sbrk_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4c06      	ldr	r4, [pc, #24]	; (8008414 <_sbrk_r+0x1c>)
 80083fc:	2300      	movs	r3, #0
 80083fe:	4605      	mov	r5, r0
 8008400:	4608      	mov	r0, r1
 8008402:	6023      	str	r3, [r4, #0]
 8008404:	f7fa f96e 	bl	80026e4 <_sbrk>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d102      	bne.n	8008412 <_sbrk_r+0x1a>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	b103      	cbz	r3, 8008412 <_sbrk_r+0x1a>
 8008410:	602b      	str	r3, [r5, #0]
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	20000368 	.word	0x20000368

08008418 <__sread>:
 8008418:	b510      	push	{r4, lr}
 800841a:	460c      	mov	r4, r1
 800841c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008420:	f000 f8a8 	bl	8008574 <_read_r>
 8008424:	2800      	cmp	r0, #0
 8008426:	bfab      	itete	ge
 8008428:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800842a:	89a3      	ldrhlt	r3, [r4, #12]
 800842c:	181b      	addge	r3, r3, r0
 800842e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008432:	bfac      	ite	ge
 8008434:	6563      	strge	r3, [r4, #84]	; 0x54
 8008436:	81a3      	strhlt	r3, [r4, #12]
 8008438:	bd10      	pop	{r4, pc}

0800843a <__swrite>:
 800843a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800843e:	461f      	mov	r7, r3
 8008440:	898b      	ldrh	r3, [r1, #12]
 8008442:	05db      	lsls	r3, r3, #23
 8008444:	4605      	mov	r5, r0
 8008446:	460c      	mov	r4, r1
 8008448:	4616      	mov	r6, r2
 800844a:	d505      	bpl.n	8008458 <__swrite+0x1e>
 800844c:	2302      	movs	r3, #2
 800844e:	2200      	movs	r2, #0
 8008450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008454:	f000 f868 	bl	8008528 <_lseek_r>
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800845e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008462:	81a3      	strh	r3, [r4, #12]
 8008464:	4632      	mov	r2, r6
 8008466:	463b      	mov	r3, r7
 8008468:	4628      	mov	r0, r5
 800846a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800846e:	f000 b817 	b.w	80084a0 <_write_r>

08008472 <__sseek>:
 8008472:	b510      	push	{r4, lr}
 8008474:	460c      	mov	r4, r1
 8008476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800847a:	f000 f855 	bl	8008528 <_lseek_r>
 800847e:	1c43      	adds	r3, r0, #1
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	bf15      	itete	ne
 8008484:	6560      	strne	r0, [r4, #84]	; 0x54
 8008486:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800848a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800848e:	81a3      	strheq	r3, [r4, #12]
 8008490:	bf18      	it	ne
 8008492:	81a3      	strhne	r3, [r4, #12]
 8008494:	bd10      	pop	{r4, pc}

08008496 <__sclose>:
 8008496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800849a:	f000 b813 	b.w	80084c4 <_close_r>
	...

080084a0 <_write_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4c07      	ldr	r4, [pc, #28]	; (80084c0 <_write_r+0x20>)
 80084a4:	4605      	mov	r5, r0
 80084a6:	4608      	mov	r0, r1
 80084a8:	4611      	mov	r1, r2
 80084aa:	2200      	movs	r2, #0
 80084ac:	6022      	str	r2, [r4, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	f7fa f9de 	bl	8002870 <_write>
 80084b4:	1c43      	adds	r3, r0, #1
 80084b6:	d102      	bne.n	80084be <_write_r+0x1e>
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	b103      	cbz	r3, 80084be <_write_r+0x1e>
 80084bc:	602b      	str	r3, [r5, #0]
 80084be:	bd38      	pop	{r3, r4, r5, pc}
 80084c0:	20000368 	.word	0x20000368

080084c4 <_close_r>:
 80084c4:	b538      	push	{r3, r4, r5, lr}
 80084c6:	4c06      	ldr	r4, [pc, #24]	; (80084e0 <_close_r+0x1c>)
 80084c8:	2300      	movs	r3, #0
 80084ca:	4605      	mov	r5, r0
 80084cc:	4608      	mov	r0, r1
 80084ce:	6023      	str	r3, [r4, #0]
 80084d0:	f7fa f8d3 	bl	800267a <_close>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d102      	bne.n	80084de <_close_r+0x1a>
 80084d8:	6823      	ldr	r3, [r4, #0]
 80084da:	b103      	cbz	r3, 80084de <_close_r+0x1a>
 80084dc:	602b      	str	r3, [r5, #0]
 80084de:	bd38      	pop	{r3, r4, r5, pc}
 80084e0:	20000368 	.word	0x20000368

080084e4 <_fstat_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4c07      	ldr	r4, [pc, #28]	; (8008504 <_fstat_r+0x20>)
 80084e8:	2300      	movs	r3, #0
 80084ea:	4605      	mov	r5, r0
 80084ec:	4608      	mov	r0, r1
 80084ee:	4611      	mov	r1, r2
 80084f0:	6023      	str	r3, [r4, #0]
 80084f2:	f7fa f8ce 	bl	8002692 <_fstat>
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	d102      	bne.n	8008500 <_fstat_r+0x1c>
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	b103      	cbz	r3, 8008500 <_fstat_r+0x1c>
 80084fe:	602b      	str	r3, [r5, #0]
 8008500:	bd38      	pop	{r3, r4, r5, pc}
 8008502:	bf00      	nop
 8008504:	20000368 	.word	0x20000368

08008508 <_isatty_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	4c06      	ldr	r4, [pc, #24]	; (8008524 <_isatty_r+0x1c>)
 800850c:	2300      	movs	r3, #0
 800850e:	4605      	mov	r5, r0
 8008510:	4608      	mov	r0, r1
 8008512:	6023      	str	r3, [r4, #0]
 8008514:	f7fa f8cd 	bl	80026b2 <_isatty>
 8008518:	1c43      	adds	r3, r0, #1
 800851a:	d102      	bne.n	8008522 <_isatty_r+0x1a>
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	b103      	cbz	r3, 8008522 <_isatty_r+0x1a>
 8008520:	602b      	str	r3, [r5, #0]
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	20000368 	.word	0x20000368

08008528 <_lseek_r>:
 8008528:	b538      	push	{r3, r4, r5, lr}
 800852a:	4c07      	ldr	r4, [pc, #28]	; (8008548 <_lseek_r+0x20>)
 800852c:	4605      	mov	r5, r0
 800852e:	4608      	mov	r0, r1
 8008530:	4611      	mov	r1, r2
 8008532:	2200      	movs	r2, #0
 8008534:	6022      	str	r2, [r4, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	f7fa f8c6 	bl	80026c8 <_lseek>
 800853c:	1c43      	adds	r3, r0, #1
 800853e:	d102      	bne.n	8008546 <_lseek_r+0x1e>
 8008540:	6823      	ldr	r3, [r4, #0]
 8008542:	b103      	cbz	r3, 8008546 <_lseek_r+0x1e>
 8008544:	602b      	str	r3, [r5, #0]
 8008546:	bd38      	pop	{r3, r4, r5, pc}
 8008548:	20000368 	.word	0x20000368

0800854c <__ascii_mbtowc>:
 800854c:	b082      	sub	sp, #8
 800854e:	b901      	cbnz	r1, 8008552 <__ascii_mbtowc+0x6>
 8008550:	a901      	add	r1, sp, #4
 8008552:	b142      	cbz	r2, 8008566 <__ascii_mbtowc+0x1a>
 8008554:	b14b      	cbz	r3, 800856a <__ascii_mbtowc+0x1e>
 8008556:	7813      	ldrb	r3, [r2, #0]
 8008558:	600b      	str	r3, [r1, #0]
 800855a:	7812      	ldrb	r2, [r2, #0]
 800855c:	1c10      	adds	r0, r2, #0
 800855e:	bf18      	it	ne
 8008560:	2001      	movne	r0, #1
 8008562:	b002      	add	sp, #8
 8008564:	4770      	bx	lr
 8008566:	4610      	mov	r0, r2
 8008568:	e7fb      	b.n	8008562 <__ascii_mbtowc+0x16>
 800856a:	f06f 0001 	mvn.w	r0, #1
 800856e:	e7f8      	b.n	8008562 <__ascii_mbtowc+0x16>

08008570 <__malloc_lock>:
 8008570:	4770      	bx	lr

08008572 <__malloc_unlock>:
 8008572:	4770      	bx	lr

08008574 <_read_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4c07      	ldr	r4, [pc, #28]	; (8008594 <_read_r+0x20>)
 8008578:	4605      	mov	r5, r0
 800857a:	4608      	mov	r0, r1
 800857c:	4611      	mov	r1, r2
 800857e:	2200      	movs	r2, #0
 8008580:	6022      	str	r2, [r4, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	f7fa f85c 	bl	8002640 <_read>
 8008588:	1c43      	adds	r3, r0, #1
 800858a:	d102      	bne.n	8008592 <_read_r+0x1e>
 800858c:	6823      	ldr	r3, [r4, #0]
 800858e:	b103      	cbz	r3, 8008592 <_read_r+0x1e>
 8008590:	602b      	str	r3, [r5, #0]
 8008592:	bd38      	pop	{r3, r4, r5, pc}
 8008594:	20000368 	.word	0x20000368

08008598 <__ascii_wctomb>:
 8008598:	b149      	cbz	r1, 80085ae <__ascii_wctomb+0x16>
 800859a:	2aff      	cmp	r2, #255	; 0xff
 800859c:	bf85      	ittet	hi
 800859e:	238a      	movhi	r3, #138	; 0x8a
 80085a0:	6003      	strhi	r3, [r0, #0]
 80085a2:	700a      	strbls	r2, [r1, #0]
 80085a4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80085a8:	bf98      	it	ls
 80085aa:	2001      	movls	r0, #1
 80085ac:	4770      	bx	lr
 80085ae:	4608      	mov	r0, r1
 80085b0:	4770      	bx	lr
	...

080085b4 <_init>:
 80085b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b6:	bf00      	nop
 80085b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ba:	bc08      	pop	{r3}
 80085bc:	469e      	mov	lr, r3
 80085be:	4770      	bx	lr

080085c0 <_fini>:
 80085c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c2:	bf00      	nop
 80085c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c6:	bc08      	pop	{r3}
 80085c8:	469e      	mov	lr, r3
 80085ca:	4770      	bx	lr
